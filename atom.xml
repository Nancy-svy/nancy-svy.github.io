<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>真实の幻梦</title>
    <updated>2023-09-18T09:39:22.099Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>草在结它的种子 ，风在摇它的叶子 ，我们站着，不说话，就十分美好。</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 真实の幻梦</rights>
    <entry>
        <title type="html"><![CDATA[elementUI 解决打包上线后icon图标偶尔乱码的问题]]></title>
        <id>https://nancy-svy.github.io/post/elementui-jie-jue-da-bao-shang-xian-hou-icon-tu-biao-ou-er-luan-ma-de-wen-ti/</id>
        <link href="https://nancy-svy.github.io/post/elementui-jie-jue-da-bao-shang-xian-hou-icon-tu-biao-ou-er-luan-ma-de-wen-ti/">
        </link>
        <updated>2023-09-15T01:17:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-背景">一、 背景</h3>
<p>本项目是以vue-element-admin作为基础，开发过程中，图标显示正常，知道打包到线上，页面偶尔性出现图标落马问题，再次刷新页面后，又显示正常</p>
<h3 id="二-现象">二、现象</h3>
<p>1、项目打包后，dist/css/app.xxx.css，发现所有的图标样式content的文本未正常显示了。例：el-icon-moon:before{content:“”}；<br>
2、虽然页面图标可以正常显示，但是用F12，会发现字体依然是乱码；</p>
<h3 id="原因">原因</h3>
<p>本项目使用的依赖包是sass，elementui使用的是node-sass</p>
<h3 id="解决方法">解决方法</h3>
<ol>
<li>方法一： 替换element-ui的样式文件<br>
element-variables.scss文件中的 @import &quot;~element-ui/packages/theme-chalk/src/index&quot;; 注释掉，然后在main.js把引入的element-variables.scss文件注释掉替换为 import 'element-ui/lib/theme-chalk/index.css'<br>
<img src="https://nancy-svy.github.io/post-images/1694741665999.png" alt="" loading="lazy"></li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1694741672048.png" alt="" loading="lazy"></figure>
<ol start="2">
<li>方法二：把sass版本升到1.39.0<br>
<img src="https://nancy-svy.github.io/post-images/1694741933651.png" alt="" loading="lazy"><br>
<img src="https://nancy-svy.github.io/post-images/1694741940572.png" alt="" loading="lazy"></li>
</ol>
<p>参考地址： <a href="https://blog.csdn.net/qq_37831545/article/details/132427740">https://blog.csdn.net/qq_37831545/article/details/132427740</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS Code 的常用快捷键]]></title>
        <id>https://nancy-svy.github.io/post/vs-code-de-chang-yong-kuai-jie-jian/</id>
        <link href="https://nancy-svy.github.io/post/vs-code-de-chang-yong-kuai-jie-jian/">
        </link>
        <updated>2023-09-07T02:58:56.000Z</updated>
        <content type="html"><![CDATA[<p>VS Code 的常用快捷键和插件</p>
<h5 id="一-vs-code-的常用快捷键">一、vs code 的常用快捷键</h5>
<p>1、注释：</p>
<p>a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/</p>
<p>b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u)</p>
<p>c) 多行注释：[alt+shift+A]</p>
<p>d) 多行注释：/**</p>
<p>2、移动行：alt+up/down</p>
<p>3、显示/隐藏左侧目录栏 ctrl + b</p>
<p>4、复制当前行：shift + alt +up/down</p>
<p>5、删除当前行：shift + ctrl + k</p>
<p>6、控制台终端显示与隐藏：ctrl + ~</p>
<p>7、查找文件/安装vs code 插件地址：ctrl + p</p>
<p>8、代码格式化：shift + alt +f</p>
<p>9、新建一个窗口 : ctrl + shift + n</p>
<p>10、行增加缩进: ctrl + [</p>
<p>11、行减少缩进: ctrl + ]</p>
<p>12、裁剪尾随空格(去掉一行的末尾那些没用的空格) : ctrl + shift + x</p>
<p>13、字体放大/缩小: ctrl + ( + 或 - )</p>
<p>14、拆分编辑器 : ctrl + 1/2/3</p>
<p>15、切换窗口 : ctrl + shift + left/right</p>
<p>16、关闭编辑器窗口 : ctrl + w</p>
<p>17、关闭所有窗口 : ctrl + k + w</p>
<p>18、切换全屏 : F11</p>
<p>19、自动换行 : alt + z</p>
<p>20、显示git : ctrl + shift + g</p>
<p>21、全局查找文件：ctrl + shift + f</p>
<p>22、显示相关插件的命令(如：git log)：ctrl + shift + p</p>
<p>23、选中文字：shift + left / right / up / down</p>
<p>24、折叠代码： ctrl + k + 0-9 (0是完全折叠)</p>
<p>25、展开代码： ctrl + k + j (完全展开代码)</p>
<p>26、删除行 ： ctrl + shift + k</p>
<p>27、快速切换主题：ctrl + k / ctrl + t</p>
<p>28、快速回到顶部 ： ctrl + home</p>
<p>29、快速回到底部 : ctrl + end</p>
<p>30、格式化选定代码 ：ctrl + k / ctrl +f</p>
<p>31、选中代码 ： shift + 鼠标左键</p>
<p>32、多行同时添加内容（光标） ：ctrl + alt + up/down</p>
<p>33、全局替换：ctrl + shift + h</p>
<p>34、当前文件替换：ctrl + h</p>
<p>35、打开最近打开的文件：ctrl + r</p>
<p>36、打开新的命令窗：ctrl + shift + c</p>
<h5 id="二-vs-code-的常用插件">二、vs code 的常用插件</h5>
<p>1、Auto Rename Tag 修改html标签，自动帮你完成尾部闭合标签的同步修改，和webstorm一样。</p>
<p>2、Auto Close Tag 自动闭合HTML标签</p>
<p>4、Beautiful 格式化代码的工具</p>
<p>5、Dash Dash是MacOS的API文档浏览器和代码段管理器</p>
<p>6、Ejs Snippets ejs 代码提示</p>
<p>7、ESLint 检查javascript语法错误与提示</p>
<p>8、File Navigator 快速查找文件</p>
<p>9、Git History(git log) 查看git log</p>
<p>10、Gulp Snippets 写gulp时用到，gulp语法提示。</p>
<p>11、HTML CSS Support 在HTML标签上写class智能提示当前项目所支持的样式</p>
<p>12、HTML Snippets 超级好用且初级的H5代码片段以及提示</p>
<p>13、Debug for Chrome 让vs code映射chrome的debug功能，静态页面都可以用vscode来打断点调试、配饰稍微复杂一点</p>
<p>14、Document this Js的注释模板</p>
<p>15、jQuery Code Snippets jquery提示工具</p>
<p>16、Html2jade html模板转pug模板</p>
<p>17、JS-CSS-HTML Formatter 格式化</p>
<p>18、Npm intellisense require 时的包提示工具</p>
<p>19、Open in browser 打开默认浏览器</p>
<p>20、One Dark Theme 一个vs code的主题</p>
<p>21、Path Intellisense 自动路径补全、默认不带这个功能</p>
<p>22、Project Manager 多个项目之间快速切换的工具</p>
<p>23、Pug(Jade) snippets pug语法提示</p>
<p>24、React Components 根据文件名创建反应组件代码。</p>
<p>25、React Native Tools reactNative工具类为React Native项目提供了开发环境。</p>
<p>26、Stylelint css/sass代码审查</p>
<p>27、Typings auto installer 安装vscode 的代码提示依赖库，基于typtings的</p>
<p>28、View In Browser 　默认浏览器查看HTML文件（快捷键Ctrl+F1可以修改）</p>
<p>29、Vscode-icons 让vscode资源目录加上图标、必备</p>
<p>30、VueHelper Vue2代码段（包括Vue2 api、vue-router2、vuex2）</p>
<p>31、Vue 2 Snippets vue必备vue代码提示</p>
<p>32、Vue-color vue语法高亮主题</p>
<p>33、Auto-Open Markdown Preview markdown文件自动开启预览</p>
<p>34、EverMonkey 印象笔记</p>
<p>35、atom one dark atom的一个高亮主题(个人推荐)</p>
<h5 id="三-常用的电脑快捷键">三、常用的电脑快捷键</h5>
<p>1、ctrl + shift + delete 快速清除浏览器缓存</p>
<p>2、ctrl + alt + delete 快速进入任务管理器页面</p>
<p>3、window + L 快速锁定电脑</p>
<p>4、window + d 所有窗口最小化</p>
<p>5、 window + e 打开我的资源管理器(我的电脑)</p>
<p>6、 window + f 快速打开搜索窗口</p>
<p>7、 alt + tab 快速查看打开的应用与窗口</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 右键菜单(vue-contextmenujs)]]></title>
        <id>https://nancy-svy.github.io/post/vue-you-jian-cai-dan-vue-contextmenujs/</id>
        <link href="https://nancy-svy.github.io/post/vue-you-jian-cai-dan-vue-contextmenujs/">
        </link>
        <updated>2023-09-04T02:01:32.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>安装vue-context-menu</li>
</ol>
<pre><code>npm install vue-contextmenujs --save
或
yarn add vue-contextmenujs
</code></pre>
<ol start="2">
<li>在main.js中引用</li>
</ol>
<pre><code>import Contextmenu from &quot;vue-contextmenujs&quot;
Vue.use(Contextmenu);
</code></pre>
<ol start="3">
<li>给需要点击的元素绑定事件</li>
</ol>
<pre><code>// 在组件中调用显示菜单
 this.$contextmenu(options:MenuOptions);
// 鼠标点击或滚轮自动销毁, 也可手动销毁
 this.$contextmenu.destroy();

// 去除浏览器默认菜单
 event.preventDefault();
</code></pre>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot; @contextmenu.prevent=&quot;onContextmenu&quot;&gt;&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
    // 右键
    onContextmenu(event) {
        event.preventDefault()
        if(event.preventDefault){
            event.preventDefault()
        }else{
            window.event.returnValue = false // 兼容IE6、7、8
        }
        this.$contextmenu({
            items: [
                {
                    label: &quot;返回&quot;,
                    onClick: () =&gt; {
                        console.log(&quot;返回(B)&quot;);
                    }
                },
                { label: &quot;前进(F)&quot;, disabled: true },
                { label: &quot;重新加载(R)&quot;, divided: true, icon: &quot;el-icon-refresh&quot; },
                { label: &quot;另存为(A)...&quot; },
                { label: &quot;打印(P)...&quot;, icon: &quot;el-icon-printer&quot; },
                { label: &quot;投射(C)...&quot;, divided: true },
                {
                    label: &quot;使用网页翻译(T)&quot;,
                    divided: true,
                    minWidth: 0,
                    children: [
                        { label: &quot;翻译成简体中文&quot; },
                        { label: &quot;翻译成繁体中文&quot; }         
                    ]
                },
                {
                    label: &quot;截取网页(R)&quot;,
                    minWidth: 0,
                    children: [{
                            label: &quot;截取可视化区域&quot;,
                            onClick: () =&gt; {
                                this.message = &quot;截取可视化区域&quot;;
                            }
                        },
                        { label: &quot;截取全屏&quot; }
                    ]
                },
                { label: &quot;查看网页源代码(V)&quot;, icon: &quot;el-icon-view&quot; },
                { label: &quot;检查(N)&quot; }
            ],
            event,
            //x: event.clientX,
            //y: event.clientY,
            customClass: &quot;custom-class&quot;,
            zIndex: 3,
            minWidth: 230
        });
        return false;
    },
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 常用修饰符]]></title>
        <id>https://nancy-svy.github.io/post/vue-chang-yong-xiu-shi-fu/</id>
        <link href="https://nancy-svy.github.io/post/vue-chang-yong-xiu-shi-fu/">
        </link>
        <updated>2023-08-28T05:53:29.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>事件修饰符</li>
</ol>
<pre><code>.stop  阻止事件冒泡

.prevent   提交事件不再重复加载页面，阻止表单提交的默认行为

.capture   优先触发 用于捕获监听，冒泡是从内到外，捕获是从外到里

.self   只有自己能触发，子元素无法触发

.once   点击事件只触发一次

.native  使用时将被当成原生HTML标签看待
</code></pre>
<ol start="2">
<li>按键修饰符</li>
</ol>
<pre><code>@keyup  键盘抬起

@keydown  键盘按下

space=''      对键盘输入空格进行监听

按键码的别名：
      .enter 
      .tab 
      .delete 
      .esc 
      .space 
      .up 
      .down 
      .left 
      .right
</code></pre>
<ol start="3">
<li>表单修饰符</li>
</ol>
<pre><code>.lazy：在表单输入时不会马上显示在页面，而是等输入完成失去焦点时才会显示；

.trim：过滤表单输入时两边的空格；

.number：限制输入数字或将输入的数据转为数字
</code></pre>
<ol start="4">
<li>系统修饰符</li>
</ol>
<pre><code>@click.strl     点击+按住ctrl键，才能实现方法

类似的还有：
    .ctrl 
    .alt 
    .shift 
    .meta

.exact 修饰符    赋值其他修饰符进行精确匹配，@click.ctrl  必须只点击+按住ctrl键才会触发方法，另外还按住其他键不会触发
 用法  @click.ctrl.exact=&quot;&quot;
</code></pre>
<ol start="5">
<li>鼠标按键修饰符</li>
</ol>
<pre><code>主要是鼠标的左右键、滚轮
 @click.rigth 触发鼠标右击事件

 @click.rigth.prevent 右键生效，prevent可以取消右击的默认事件，顺序不可以乱
  
.middle触发滚轮事件
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[el-tree树形实现点击按钮tree节点上下移动]]></title>
        <id>https://nancy-svy.github.io/post/tree-move-up-and-down/</id>
        <link href="https://nancy-svy.github.io/post/tree-move-up-and-down/">
        </link>
        <updated>2023-08-22T06:57:13.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1692687647247.png" alt="" loading="lazy"></figure>
<p><em>图标</em></p>
<div style="display: flex; justify-content: space-evenly; background: #C0C4CC; margin-bottom: 20px; height: 60px;">
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1692687941408.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://nancy-svy.github.io/post-images/1692687947383.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://nancy-svy.github.io/post-images/1692687926239.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://nancy-svy.github.io/post-images/1692687932013.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://nancy-svy.github.io/post-images/1692687906222.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://nancy-svy.github.io/post-images/1692687914668.png" alt="" loading="lazy"></figure>
</div>
<pre><code>&lt;div class=&quot;treeBox&quot;  v-loading=&quot;treeLoading&quot;&gt;
    &lt;el-tree
        class=&quot;departmentTree&quot;
        :data=&quot;treeData&quot;
        node-key=&quot;id&quot;
        ref=&quot;tree&quot;
        highlight-current
        default-expand-all
        :current-node-key=&quot;selectedItemId&quot;
        :props=&quot;{children: 'children', label: 'label'}&quot;
        @node-click=&quot;nodeClick&quot;
    &gt;
        &lt;div class=&quot;custom-tree-node&quot; slot-scope=&quot;{ node, data }&quot;&gt;
            &lt;div class=&quot;iconFile&quot;&gt;&lt;/div&gt;
            &lt;template v-if=&quot;data.isEditing&quot;&gt;
                &lt;el-input class=&quot;nameInput&quot; v-model=&quot;data.label&quot; size=&quot;mini&quot; placeholder=&quot;输入名称&quot;&gt;
                    &lt;img slot=&quot;suffix&quot; class=&quot;iconSure&quot; src=&quot;@/assets/images/icon_sure.png&quot; alt=&quot;&quot; @click.stop=&quot;sureCreate(node, data)&quot;&gt;
                    &lt;img slot=&quot;suffix&quot; class=&quot;iconClose&quot; src=&quot;@/assets/images/icon_close.png&quot; alt=&quot;&quot; @click.stop=&quot;cancelCreate(node, data)&quot;&gt;
                &lt;/el-input&gt;
            &lt;/template&gt;
            &lt;template v-else&gt;
                &lt;span class=&quot;fileName&quot;&gt;{{ data.label }}&lt;/span&gt;
                &lt;!-- 三个点图片 --&gt;
                &lt;el-dropdown 
                    v-if=&quot;selectedItemId == data.id&quot; 
                    trigger=&quot;click&quot; 
                    @command=&quot;dropDownClick($event, data, node)&quot;
                &gt;
                    &lt;div class=&quot;el-dropdown-link&quot;&gt;
                        &lt;div class=&quot;iconMore&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;el-dropdown-menu slot=&quot;dropdown&quot; class=&quot;simu-dropdown&quot;&gt;
                        &lt;el-dropdown-item
                            v-for=&quot;item in nodeHandles&quot;
                            :key=&quot;item&quot;
                            :command=&quot;item&quot;
                        &gt;
                            {{item}}
                        &lt;/el-dropdown-item&gt;
                    &lt;/el-dropdown-menu&gt;
                &lt;/el-dropdown&gt;
                &lt;div v-else class=&quot;iconMore&quot;&gt;&lt;/div&gt;
            &lt;/template&gt;
        &lt;/div&gt;
    &lt;/el-tree&gt;
&lt;/div&gt;
</code></pre>
<pre><code>&lt;script&gt;
    export default {
        data(){
            return{
                treeLoading: false,
                // 列表
                treeData: [{
                    id: '1',
                    label: '一级 1',
                    isEditing: false,
                    children: [{
                        id: '2',
                        label: '二级 1-1',
                        isEditing: false,
                        children: [{
                            id: '11',
                            label: '三级 1-1-1',
                            isEditing: false,
                        }]
                    }]
                    }, {
                        id: '3',
                        label: '一级 2',
                        isEditing: false,
                        children: [{
                            id: '4',
                            label: '二级 2-1',
                            isEditing: false,
                            children: [{
                                id: '5',
                                label: '三级 2-1-1',
                                isEditing: false,
                            }]
                        }, {
                            id: '6',
                            label: '二级 2-2',
                            isEditing: false,
                            children: [{
                                id: '7',
                                label: '三级 2-2-1',
                                isEditing: false,
                            }]
                        }]
                    }, {
                        id: '8',
                        label: '一级 3',
                        isEditing: false,
                        children: [{
                            id: '9',
                            label: '二级 3-1',
                            isEditing: false,
                            children: [{
                                id: '10',
                                label: '三级 3-1-1',
                                isEditing: false,
                            }]
                        }, {
                            id: '11',
                            label: '二级 3-2',
                            isEditing: false,
                            children: [{
                                id: '12',
                                label: '三级 3-2-1',
                                isEditing: false,
                            }]
                        }
                    ]
                }],
                selectedItemId: '', // 选中的id
                nodeHandles: ['添加子部门','修改名称','删除','上移','下移'],
            }
        },
        mounted(){

        },
        methods:{
            // el-tree的节点点击事件
            nodeClick (event) {
                this.selectedItemId = event.id
                this.$nextTick(() =&gt; {
                    this.$refs.tree.setCurrentKey(this.selectedItemId)
                })
            },
            // 树节点操作
            dropDownClick(val, data, node){
                this.treeType = val
                if(val == '添加子部门'){
                    let addFind = (arr, data) =&gt; {
                        arr.forEach(item =&gt; {
                            if(item.id == data.id){
                                item.children.push({
                                    id: item.id + 's',
                                    isEditing: true,
                                    label: '',
                                    parentId: item.id
                                })
                            }else if(item.children &amp;&amp; item.children.length != 0){
                                addFind(item.children, data);
                            }
                        })
                    }
                    addFind(this.treeData, data)
                }else if(val == '修改名称'){
                    this.findTree(this.treeData, data.id);
                }else if(val == '删除'){
                    this.$message.success('删除成功')
                       
                }else if(val == '上移'){
                    let fatherChildren = node.parent.data.children || []
                    let selfIndex = fatherChildren.findIndex(a =&gt; a.id == data.id)
                    if (selfIndex) {
                        let reqData = {
                            id: data.id, 
                            changeId: fatherChildren[selfIndex - 1].id
                        }
                        console.log('上移', reqData)
                        
                    } else {
                        this.$message.warning('不能再上移了')
                    }
                }else if(val == '下移'){
                    let fatherChildren = node.parent.data.children || []
                    let selfIndex = fatherChildren.findIndex(a =&gt; a.id == data.id)
                    if (selfIndex == fatherChildren.length - 1) {
                        this.$message.warning('不能再下移了')
                    } else {
                        let downData = {
                            id: data.id, 
                            changeId: fatherChildren[selfIndex + 1].id
                        }
                        console.log('下移', downData)
                        
                    }
                }
            },
            // 根据id 修改isEditing值
            findTree(arr, id){
                arr.forEach((item) =&gt; { 
                    if(item.id == id){        
                        item.isEditing = !item.isEditing;
                        return item;
                    }else if(item.children &amp;&amp; item.children.length != 0){
                        this.findTree(item.children, id);                        
                    }                   
                })
            },
            // 确认添加、修改子级
            sureCreate(node, data){
                if(this.treeType == '添加子部门'){
                    this.findTree(this.treeData, data.id)
                    this.$message.success('添加成功')

                }else if(this.treeType == '修改名称'){
                    this.findTree(this.treeData, data.id)
                    this.$message.success('修改成功')
                    
                }
            },
            // 取消添加、修改子级
            cancelCreate(node, data){
                if(this.treeType == '添加子部门'){
                    let find = (arr, id) =&gt; {
                        arr.forEach((item, index) =&gt; { 
                            if(item.id == id){   
                                console.log(item.id ) 
                                console.log(id )  
                                arr.splice(index, 1)
                            }else if(item.children &amp;&amp; item.children.length != 0){
                                find(item.children, id);                        
                            }                   
                        })
                    }
                    find(this.treeData, data.id)
                }else if(this.treeType == '修改名称'){
                    this.findTree(this.treeData, data.id)
                }
            },
        }
    }
&lt;/script&gt;
</code></pre>
<pre><code>&lt;style lang=&quot;scss&quot;&gt;
.treeBox{
    .departmentTree {
        .el-tree-node__content {
            height: 32px;
            &amp;:hover{
                background: #EBEDF0;
            }
        }
        .el-tree-node.is-current {
            &amp;&gt;.el-tree-node__content {
                background-color: #02C2B0;
                .iconFile {
                    background-image: url('./assets/images/organization-default.png');
                }
                .iconMore {
                    opacity: 1 !important;
                    background-image: url('./assets/images/icon_more_active.png');
                }
                .fileName,.el-tree-node__expand-icon {
                    color: #fff;
                }
                .el-tree-node__expand-icon.is-leaf{
                    color: transparent;
                    cursor: default;
                }
            }
        }
        .custom-tree-node {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: space-between;
            .iconFile {
                width: 14px;
                height: 14px;
                margin-right: 6px;
                background-image: url('./assets/images/organization.png');
                background-repeat: no-repeat;
                background-size: cover;
            }
            .iconSure {
                margin: 0 6px;
            }
            .iconClose {
                margin-right: 11px;
            }
            .nameInput {
                flex: 1;
                background: #fff;
                input {
                    width: calc(100% - 56px);
                    height: 22px;
                    padding: 0 4px;
                    background: #EBEBEB;
                    border-radius: 0;
                    border: none;
                } 
                .el-input__suffix {
                    right: 0;
                }
                .iconClose{
                    margin-right: 0;
                }
            }
            .fileName {
                flex: 1;
                line-height: 22px;
                font-size: 14px;
                color: #303133;
            }
            .iconMore {
                opacity: 0;
                width: 2px;
                height: 10px;
                margin: 6px 12px;
                background-image: url('./assets/images/icon_more.png');
                background-repeat: no-repeat;
                background-size: cover;
            }
        }
    }
    .el-dropdown-menu__item:hover {
        background-color: #7BDFD6!important;
        color: #fff!important;
    }
}
.simu-dropdown{
    li:hover{
        color: #fff!important;
        background: #7BDFD6!important;
    }
}

&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue  在发布阶段移除所有的console.log()输出语句]]></title>
        <id>https://nancy-svy.github.io/post/removeConsoleLog/</id>
        <link href="https://nancy-svy.github.io/post/removeConsoleLog/">
        </link>
        <updated>2023-07-21T02:44:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="第一种方法">第一种方法</h3>
<ol>
<li>下载插件</li>
</ol>
<pre><code>npm install babel-plugin-transform-remove-console --save-dev
</code></pre>
<ol start="2">
<li>修改bable.config.js</li>
</ol>
<pre><code>module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ],
  'env': {
    'development': {
      'plugins': ['dynamic-import-node']
    },
    // 增加以下配置编译时可以去掉console.log等
    'production': {
      'plugins': [
        [
          'transform-remove-console',
          {
            // 排除项
            'exclude': ['error', 'warn']
          }
        ]
      ]
    }
  }
}
</code></pre>
<h3 id="第二种方法">第二种方法</h3>
<p>vue-element-admin 打包后去除console</p>
<ol>
<li>下载插件</li>
</ol>
<pre><code>npm install terser-webpack-plugin --save-dev
</code></pre>
<ol start="2">
<li>在vue.config.js中加入以下代码</li>
</ol>
<pre><code>module.exports = {
  publicPath: '/',         
  outputDir: 'dist',
  assetsDir: 'static',
  // lintOnSave: process.env.NODE_ENV === 'development',
  lintOnSave: false,
  productionSourceMap: false,
  configureWebpack: {
    name: name,
    resolve: {
      alias: {
        '@': resolve('src')
      }
    }
  },
  // 移除console.log
  configureWebpack: config =&gt; {
    if (process.env.NODE_ENV === 'production') {
      config.optimization.minimizer[0].options.terserOptions.compress.warnings = false
      config.optimization.minimizer[0].options.terserOptions.compress.drop_console = true
      config.optimization.minimizer[0].options.terserOptions.compress.drop_debugger = true
      config.optimization.minimizer[0].options.terserOptions.compress.pure_funcs = ['console.log']
    }
  },

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue + iframe标签添加请求头]]></title>
        <id>https://nancy-svy.github.io/post/iframeAddRequestHeader/</id>
        <link href="https://nancy-svy.github.io/post/iframeAddRequestHeader/">
        </link>
        <updated>2023-07-10T12:33:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;iframe id=&quot;iframe&quot; src=&quot;&quot; /&gt;
</code></pre>
<pre><code>setTimeout(() =&gt; {
  var iframe = document.querySelector(&quot;#iframe&quot;);
  this.populateIframe(iframe, [[&quot;Authorization&quot;, &quot;Bearer &quot; + getToken()]]);
}, 0);
</code></pre>
<pre><code>  methods: {
    populateIframe(iframe, headers) {
      var xhr = new XMLHttpRequest();
      xhr.open(&quot;GET&quot;, 'http：localhost:8080/xxx');
      xhr.responseType = &quot;blob&quot;;
      headers.forEach((header) =&gt; {
        xhr.setRequestHeader(header[0], header[1]);
      });
      xhr.onreadystatechange = () =&gt; {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
              console.log(xhr)
            // 这个样式显示有问题
            // iframe.src = URL.createObjectURL(xhr.response);  
            iframe.src = xhr.responseURL;
          }
        }
      };
      xhr.send();
    },
  }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue  路由]]></title>
        <id>https://nancy-svy.github.io/post/router/</id>
        <link href="https://nancy-svy.github.io/post/router/">
        </link>
        <updated>2023-06-30T09:32:03.000Z</updated>
        <content type="html"><![CDATA[<h5 id="有面包屑时三级路由怎么进行跳转页面">有面包屑时，三级路由怎么进行跳转页面</h5>
<p>路由结构</p>
<pre><code>{
    path: '/nrgl',
    component: Layout,
    redirect: '/nrgl/index',
    meta: {
      title: '内容管理',
      icon: 'el-icon-s-help'
    },
    children: [
      {
        path: 'index',
        component: () =&gt; import('@/views/myview/nrgl/index'),
        name: 'index',
        meta: { title: '内容列表',  icon: 'dashboard' }
      },
      {
        path: 'detail',
        component: () =&gt; import('@/views/myview/nrgl/detail'),
        name: 'detail',
        meta: {
          title:  '内容详情',
          icon:  'dashboard', 
          noCache:  true, 
          activeMenu:  '/nrgl/index'
       },
        hidden: true
      },
    ]
  },
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI  el-input限制输入的值为整数或小数]]></title>
        <id>https://nancy-svy.github.io/post/elInputLimitation/</id>
        <link href="https://nancy-svy.github.io/post/elInputLimitation/">
        </link>
        <updated>2023-06-29T03:29:47.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;el-input
    v-model=&quot;&quot;
    oninput=&quot;value=value.replace(/[^0-9.]/g,'').replace(/^\./g, '').replace(/\.{2,}/g, '').replace('.', '$#$').replace(/\./g, '').replace('$#$', '.');&quot;
    size=&quot;mini&quot;/&gt;
</code></pre>
<p>备注：<br>
1：^不放在开头表示取否的意思，就是取相反<br>
2：replace是对你输入的字符串一个字符一个字符的去查找替换，和常见正则可以多个字符查找略有不同</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 接口返回的preview是张图片，前端如何渲染]]></title>
        <id>https://nancy-svy.github.io/post/thePreviewModuleIsAPicture/</id>
        <link href="https://nancy-svy.github.io/post/thePreviewModuleIsAPicture/">
        </link>
        <updated>2023-06-27T12:27:03.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687917326500.png" alt="" loading="lazy"></figure>
<h5 id="第一种">第一种</h5>
<p>也是最简单的一种，直接将接口地址赋值给img标签的src</p>
<pre><code>&lt;img src=&quot;https://xxx.xxx.xxx.com/img&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
<h5 id="第二种">第二种</h5>
<ol>
<li>blob<br>
api.js中设置 responseType为blod</li>
</ol>
<pre><code>export const Tqimg = () =&gt; {
  return request4({
    url: &quot;/xxx/xx/xx&quot;,
    method: &quot;get&quot;,
    // 加上下面这个
    responseType: &quot;blob&quot;,
  });
};
</code></pre>
<p>vue单文件的methods中</p>
<pre><code>async Tqimg() {
  await Tqimg().then((res) =&gt; {
    console.log(res);
    const myBlob = new window.Blob([res.data], { type: &quot;image/jpeg&quot; });
    // Tianqimg是提前定义好的模型
    this.Tianqimg = window.URL.createObjectURL(myBlob);
  });
},
</code></pre>
<p>vue单文件的template中</p>
<pre><code>&lt;img :src=&quot;Tianqimg&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
<ol start="2">
<li>arraybuffer<br>
api.js中设置 responseType为arraybuffer</li>
</ol>
<pre><code>export function verificationCode(data) {
  return serviceCode({
    url: '/code',
    method: 'get',
    data,
    responseType: 'arraybuffer' //这里是声明期望返回的数据类型,为arraybuffer
  })
}
</code></pre>
<p>vue单文件的methods中</p>
<pre><code>getCode(){
      verificationCode().then(res =&gt; {
        // console.log(res)
        const bufferUrl = btoa(new Uint8Array(res.data).reduce((data, byte) =&gt; data + String.fromCharCode(byte), ''));
        this.verificationCodePath = 'data:image/png;base64,' + bufferUrl
      })
    },
</code></pre>
<p>vue单文件的template中</p>
<pre><code>&lt;img :src=&quot;verificationCodePath&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
]]></content>
    </entry>
</feed>