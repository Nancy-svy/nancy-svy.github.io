<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>真实の幻梦</title>
    <updated>2023-06-14T07:10:39.578Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>草在结它的种子 ，风在摇它的叶子 ，我们站着，不说话，就十分美好。</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 真实の幻梦</rights>
    <entry>
        <title type="html"><![CDATA[uniapp 小程序一个页面多个倒计时]]></title>
        <id>https://nancy-svy.github.io/post/multipleCountdowns/</id>
        <link href="https://nancy-svy.github.io/post/multipleCountdowns/">
        </link>
        <updated>2023-06-06T01:41:51.000Z</updated>
        <content type="html"><![CDATA[<p>效果图<br>
<img src="https://nancy-svy.github.io/post-images/1686015900357.png" alt="" loading="lazy"></p>
<p>封装的方法</p>
<pre><code>handleTime  (timestamp) {
	let t = Math.abs(timestamp);
	let d = Math.floor(t/100/60/60/24);
	let h = Math.floor(t/1000/60/60%24);
	let m = Math.floor(t/1000/60%60);
	let s = Math.floor(t/1000%60);
	return{
		day: d,
		hours: h,
		minute: m,
		second: s
	}
},
getRemainTime (overTime) {
	let now = new Date().getTime();
	let over = new Date(overTime).getTime();
	return this.handleTime(over - now);
},
</code></pre>
<p>调用方法</p>
<pre><code>&lt;template&gt;
   &lt;view&gt;
   	  &lt;view v-for=&quot;(item, index) in times&quot; :key=&quot;index&quot;&gt;{{ item.remainTimeNum }}&lt;/view&gt;
   &lt;/view&gt;
&lt;/template&gt;

import { getRemainTime } from @/utils/utils.js';

export default {
   data() {
   	return {
   		times: [{
            id: 1,
            applyStart:  &quot;2023-06-03 08:00:42&quot;,
            applyEnd:  &quot;2023-06-03 09:00:07&quot;,
            name:  &quot;2&quot;
            note:  &quot;1&quot;,
            phone:  &quot;1&quot;,
            placeName:  &quot;1&quot;,
         }{
            id: 2,
            applyStart:  &quot;2023-06-03 10:00:30&quot;,
            applyEnd:  &quot;2023-06-03 12:00:00&quot;,
            name:  &quot;2&quot;
            note:  &quot;1&quot;,
            phone:  &quot;1&quot;,
            placeName:  &quot;1&quot;,
         }]
   	};
   },
   onLoad() {
   		this.timer(this.times);
   },
   methods: {
   		timer(times) {
   			let that = this;
			let timeInterval = null 
			clearInterval(timeInterval)
			timeInterval = setInterval(() =&gt; {
				times.forEach((item, index) =&gt; {
					that.$set(item, 'remainTimeNum', getRemainTime(item.applyEnd))
				})
			},1000)
   		}
   }
};
&lt;/script&gt;
</code></pre>
<p>在页面渲染完成之后，对data里的某个数组或对象进行新增、删除属性是监听不到的，视图不会更新，需要使用this.$set()更新视图。</p>
<pre><code>this.$set(target, key, value)
target: 要更改的数据源(可以是一个对象或者数组)
key: 要更改的属性(字段)
value: 新增的值
</code></pre>
<p>删除属性可以使用</p>
<pre><code>this.$delete(target,key)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postman报错Error: write EPROTO 67713288:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER]]></title>
        <id>https://nancy-svy.github.io/post/testInterfaceError/</id>
        <link href="https://nancy-svy.github.io/post/testInterfaceError/">
        </link>
        <updated>2023-05-29T09:40:25.000Z</updated>
        <content type="html"><![CDATA[<p><strong>postman报错Error: write EPROTO 67713288:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER</strong></p>
<p>使用postman时报错如下 : Error: write EPROTO 93988952:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER:…/…/third_party/boringssl/src/ssl/tls_record.cc:242:</p>
<p><strong>debug</strong><br>
把https改成http，去掉s就能正常检测接口啦</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 日历组件]]></title>
        <id>https://nancy-svy.github.io/post/calendar-component/</id>
        <link href="https://nancy-svy.github.io/post/calendar-component/">
        </link>
        <updated>2023-05-25T08:41:24.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1685004547966.png" alt="" loading="lazy"></figure>
<h3 id="子组件">子组件</h3>
<pre><code>&lt;template&gt;
  &lt;div class=&quot;cal_con&quot;&gt;
    &lt;div class=&quot;cal_header&quot;&gt;
      &lt;div class=&quot;cal_h_left&quot;&gt;
		&lt;!-- 上一年按钮 --&gt;
        &lt;div class=&quot;cal_h_btn&quot; @click=&quot;preYear&quot;&gt;
			&lt;svg-icon icon-class=&quot;el-icon-d-arrow-left&quot; class-name=&quot;cal_h_l_icon&quot;&gt;&lt;/svg-icon&gt;
        &lt;/div&gt;
		&lt;!-- 上个月按钮 --&gt;
        &lt;div class=&quot;cal_h_btn&quot; @click=&quot;preMonth&quot;&gt;
			&lt;svg-icon icon-class=&quot;el-icon-arrow-left&quot; class-name=&quot;cal_h_l_icon&quot;&gt;&lt;/svg-icon&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div&gt;
        &lt;span class=&quot;cal_h_time&quot;&gt;&lt;span class=&quot;cal_h_time_text&quot;&gt;{{ year }}&lt;/span&gt; 年 &lt;/span&gt;
        &lt;span class=&quot;cal_h_time&quot;&gt;&lt;span class=&quot;cal_h_time_text&quot;&gt;{{ month }}&lt;/span&gt; 月&lt;/span&gt;
      &lt;/div&gt;

      &lt;div class=&quot;cal_h_left&quot;&gt;
		  &lt;!-- 下个月按钮 --&gt;
        &lt;div class=&quot;cal_h_btn&quot; @click=&quot;nextMonth&quot;&gt;
			&lt;svg-icon icon-class=&quot;el-icon-arrow-right&quot; class-name=&quot;cal_h_l_icon&quot;&gt;&lt;/svg-icon&gt;
        &lt;/div&gt;
		&lt;!-- 下一年按钮 --&gt;
        &lt;div class=&quot;cal_h_btn&quot; @click=&quot;nextYear&quot;&gt;
			&lt;svg-icon icon-class=&quot;el-icon-d-arrow-right&quot; class-name=&quot;cal_h_l_icon&quot;&gt;&lt;/svg-icon&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;cal_month&quot;&gt;
	  &lt;!-- 星期 --&gt;
      &lt;div class=&quot;cal_m_weeks&quot;&gt;
        &lt;span class=&quot;cal_m_day_cell&quot; v-for=&quot;(wItem, wIndex) in weeks&quot; :key=&quot;wIndex&quot;&gt;{{ wItem }}&lt;/span&gt;
      &lt;/div&gt;

      &lt;div class=&quot;cal_m_days&quot;&gt;
        &lt;div class=&quot;cal_m_day_line&quot; v-for=&quot;(ds, index) in monthData&quot; :key=&quot;index&quot;&gt;
          &lt;div
            v-for=&quot;d in ds&quot;
            :key=&quot;d.day&quot;
            :class=&quot;['cal_m_day_cell',{
				'current_date': d.fullYear == currentYear &amp;&amp; d.month == currentMonth &amp;&amp; d.day == currentDay,
				'active_cell': selectObj.fullYear == d.fullYear &amp;&amp; selectObj.month == d.month &amp;&amp; selectObj.day == d.day
			}]&quot;
            :style=&quot;getCellColor(d)&quot;
            @mouseenter=&quot;mouseenter(d, $event)&quot;
            @mouseleave=&quot;mouseleave(d, $event)&quot;
		    @click=&quot;handleSelected(d)&quot;
          &gt;
            {{ d.day }}
			&lt;!-- &lt;slot :name=&quot;d.fullYear + '-' + d.month + '-' + d.day&quot;&gt;&lt;/slot&gt; --&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

  &lt;/div&gt;
&lt;/template&gt;

</code></pre>
<p><strong>js</strong></p>
<pre><code>&lt;script&gt;
export default {
  name: 'Calendar',
  props: {
    date: {
      type: Date,
      default: () =&gt; new Date()
    }
  },
  data () {
    return {
      now: this.date,
      year: 0,
      month: 0,
      weeks: [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;],
      monthData: [],
      currentYear: new Date().getFullYear(), // 当前年
      currentMonth: new Date().getMonth() + 1, // 当前月
      currentDay: new Date().getDate(), // 当前日
	  // 选中的数据
	  selectObj: {
		fullYear: new Date().getFullYear(),
		month: new Date().getMonth() + 1,
		day: new Date().getDate()
	  },
    }
  },
  computed: {
	  
  },
  mounted () {
    this.setYearMonth(this.now)
    this.generateMonth(this.now)
  },
  methods: {
	// 设置年月
    setYearMonth (now) {
      this.year = now.getFullYear()
      this.month = now.getMonth() + 1
    },
	// 上一年按钮
    preYear () {
      let n = this.now
      let date = new Date(n.getFullYear() - 1, n.getMonth(), n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), n.getMilliseconds());
      this.setYearMonthInfos(date)
    },
	// 上个月按钮
    preMonth () {
      let n = this.now
      let date = new Date(n.getFullYear(), n.getMonth() - 1, n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), n.getMilliseconds());
	  this.setYearMonthInfos(date)
    },
	// 下一年按钮
    nextYear () {
      let n = this.now
      let date = new Date(n.getFullYear() + 1, n.getMonth(), n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), n.getMilliseconds());
      this.setYearMonthInfos(date)
    },
	// 下个月按钮
    nextMonth () {
      let n = this.now
      let date = new Date(n.getFullYear(), n.getMonth() + 1, n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), n.getMilliseconds());
      this.setYearMonthInfos(date)
    },
	// 设置年月的详细信息
    setYearMonthInfos (date) {
      this.setYearMonth(date)
      this.generateMonth(date)
      this.now = date
      this.dateChange()
    },
	// 生成月份
    generateMonth (date) {
      date.setDate(1)
      // 星期 0 - 6， 星期天 - 星期6
      let weekStart = date.getDay()

      let endDate = new Date(date.getFullYear(), date.getMonth() + 1, 0)
      let dayEnd = endDate.getDate()
      // 星期 0 - 6， 星期天 - 星期6
      let weeEnd = endDate.getDay()

      let milsStart = date.getTime()
      let dayMils = 24 * 60 * 60 * 1000
      let milsEnd = endDate.getTime() + dayMils

      let monthDatas = []
      let current;
      // 上个月的几天
      for (let i = 0; i &lt; weekStart; i++) {
        current = new Date(milsStart - (weekStart - i) * dayMils)
        monthDatas.push({
          type: -1,
          date: current,
          fullYear: current.getFullYear(),
          month: current.getMonth() + 1,
          day: current.getDate()
        })
      }
      // 当前月
      for (let i = 0; i &lt; dayEnd; i++) {
        current = new Date(milsStart + i * dayMils)
        monthDatas.push({
          type: 0,
          date: current,
          fullYear: current.getFullYear(),
          month: current.getMonth() + 1,
          day: current.getDate()
        })
      }
      // 下个月的几天
      for (let i = 0; i &lt; (6 - weeEnd); i++) {
        current = new Date(milsEnd + i * dayMils)
        monthDatas.push({
          type: 1,
          date: current,
          fullYear: current.getFullYear(),
          month: current.getMonth() + 1,
          day: current.getDate()
        })
      }

      this.monthData = []
      for (let i = 0; i &lt; monthDatas.length; i++) {
        let mi = i % 7;
        if (mi == 0) {
          this.monthData.push([])
        }
        this.monthData[Math.floor(i / 7)].push(monthDatas[i])
      }

      // 少于6行，补足6行
      if (this.monthData.length &lt;= 5) {
        milsStart = current.getTime()
        let lastLine = []
        for (let i = 1; i &lt;= 7; i++) {
          current = new Date(milsStart + i * dayMils)
          lastLine.push({
            type: 1,
            date: current,
            fullYear: current.getFullYear(),
            month: current.getMonth() + 1,
            day: current.getDate()
          })
        }
        this.monthData.push(lastLine)
      }
    },
	// 当前月份中不存在的日期
    getCellColor (d) {
      let color = d.type == -1 ? 'color: #c0c4cc;' : (d.type == 1 ? 'color: #c0c4cc;' : '')
      return color;
    },
	// 鼠标移入事件
    mouseenter (d, event) {
      this.$emit(&quot;enter&quot;, event, d)
    },
	// 鼠标移出事件
    mouseleave (d, event) {
      this.$emit(&quot;leave&quot;, event, d)
    },
	// 选中的日期
	handleSelected(d){
		if(d.month &lt; this.selectObj.month){
			this.preMonth()
		}else if(d.month &gt; this.selectObj.month){
			this.nextMonth()
		}
		this.selectObj = d
		
		this.$emit(&quot;selected&quot;, d)
	},
	// 数据改变
    dateChange () {
      let fullYear = this.now.getFullYear()
      let month = this.now.getMonth()

      let startDay = new Date(fullYear, month, 1)
      let endDay = new Date(fullYear, month + 1, 0, 23, 59, 59)

      this.$emit(&quot;changeMonth&quot;, startDay, endDay)
    }
  }
}
&lt;/script&gt;
</code></pre>
<p><strong>css</strong></p>
<pre><code>&lt;style scoped lang=&quot;scss&quot;&gt;
.cal_con {
  width: 100%;
  height: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  color: #606266;
  // border: 1px solid #e4e7ed;
  // box-shadow: 0 2px 12px 0 #0000006e;
  background: #fff;
  border-radius: 4px;
  margin: auto;
  .cal_header {
	margin: 12px;
	text-align: center;
    font-size: 16px;
    display: flex;
    justify-content: space-between;
    justify-items: center;
    .cal_h_time {
      cursor: pointer;
	  .cal_h_time_text{
		  color: #02C2B0;
	  }
    }
    .cal_h_left {
      height: 100%;
      display: flex;
      .cal_h_btn {
        height: 100%;
        width: 24px;
        cursor: pointer;
      }
      .cal_h_l_icon {
		/* height: 8px;
        width: 12px;*/
        height: 24px;
        width: 24px;
        margin: auto;
		&amp;:hover{
			color: #02C2B0;
		}
      }
    }
  }
  .cal_month {
    font-size: 12px;
    text-align: center;
    height: calc(100% - 34px);
    .cal_m_day_cell {
      width: 24px;
      height: 24px;
      line-height: 24px;
      cursor: pointer;
      position: relative;
	  &amp;:hover {
		color: #02C2B0;
		border: 1px solid #409eff;
	  }
    }
	.active_cell{
		color: #02C2B0;
		border: 1px solid #02C2B0;
	}
	.current_date{
		color: #02C2B0;
	}
    .cal_m_weeks {
      padding: 8px;
      display: flex;
      justify-content: space-around;
      justify-items: center;
      border-bottom: 1px solid #e4e7ed;
    }
    .cal_m_days {
      height: calc(100% - 49px);
      padding: 8px;
      display: flex;
      justify-content: space-around;
      justify-items: center;
      flex-wrap: wrap;
      .cal_m_day_line {
        width: 100%;
        display: flex;
        justify-content: space-around;
        justify-items: center;
      }
    }
  }
}
&lt;/style&gt;
</code></pre>
<h3 id="父组件">父组件</h3>
<pre><code>&lt;template&gt;
	&lt;div class=&quot;calendar-box&quot;&gt;
		&lt;Calendar :date=&quot;new Date()&quot; @selected=&quot;selected&quot;/&gt;
	&lt;/div&gt;
&lt;/template&gt;
</code></pre>
<p><strong>js</strong></p>
<pre><code>&lt;script&gt;
	import Calendar from './components/calendar.vue'
	export default{
		components: {
			Calendar
		},
		data(){
			return{
				
			}
		},
		methods: {
			selected(dateInfo){
				console.log('选中的日期', dateInfo)
			},
		}
	}
&lt;/script&gt;
</code></pre>
<p><strong>css</strong></p>
<pre><code>&lt;style lang=&quot;scss&quot; scoped&gt;
	.calendar-box{
		width: 300px;
		height: 300px;
	}
&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI 修改element日历样式]]></title>
        <id>https://nancy-svy.github.io/post/calendar/</id>
        <link href="https://nancy-svy.github.io/post/calendar/">
        </link>
        <updated>2023-05-24T06:03:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="第一种-需要注意的是popper-classtimedate">第一种： 需要注意的是popper-class=“timeDate”</h3>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1684908380178.png" alt="" loading="lazy"></figure>
<pre><code>&lt;template&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;el-date-picker
			ref=&quot;datePick&quot;
			class=&quot;inputClass&quot;
			placeholder=&quot;选择日期&quot;
			v-model=&quot;dateValue&quot;
			type=&quot;date&quot;
			:clearable=&quot;false&quot;
			popper-class=&quot;timeDate&quot;
			:picker-options=&quot;pickerOptions&quot;
			@change=&quot;chooseDate&quot;
			@blur=&quot;chooseDate&quot;
		  /&gt;
	&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
	export default{
		data(){
			return{
				dateValue: '',
				pickerOptions: {
                    // 设置禁用状态，参数为当前日期
					disabledDate(time) {
						return time.getTime() &gt; Date.now();
					},
				}
			}
		},
		mounted() {
			// 让日历组件默认触发焦点事件
			this.$refs.datePick.focus(); 
		},
		methods: {
			// 选择日期后依旧触发焦点
			chooseDate(e){
				this.$refs.datePick.focus(); 
			},
		}
	}
&lt;/script&gt;

	
&lt;style lang=&quot;scss&quot;&gt;
	// 这个样式需要写在app才有效,这个组件他是跟app平级的，popper-class=&quot;timeDate&quot;，给他加一个指定的样式，方便修改项目中如果有多个不同的日期组件样式
	.timeDate.el-picker-panel.el-date-picker.el-popper{
	  top: 100px !important;
	  // left: 0 !important;
	  border: none !important;
	  box-shadow: none !important;
	}
	.timeDate.el-date-picker{
	  width: 573px;
	}
	.timeDate.el-date-picker .el-picker-panel__content{
	  width: 95% !important;
	}
	
	.timeDate.el-popper .popper__arrow, .el-popper .popper__arrow::after {
	  display: none !important;
	}
	.el-date-table td.today span {
	  color: #ff9000;
	}
	.el-date-table td.current:not(.disabled) span {
	  color: #FFF;
	  background-color: #ff9000;
	}
	.el-date-table td.available:hover {
	  color: #ff9000;
	}
&lt;/style&gt;

&lt;style lang=&quot;scss&quot; scoped&gt;
	//隐藏日期文本框
	.inputClass.el-date-editor.inputClass.el-input.el-input--prefix.el-input--suffix.el-date-editor--date{
		opacity: 0 !important;
	    cursor: default;
	}
&lt;/style&gt;
</code></pre>
<h3 id="第二种">第二种：</h3>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1684908650762.png" alt="" loading="lazy"></figure>
<pre><code>&lt;template&gt;
    &lt;div class=&quot;content-left&quot;&gt;
        &lt;el-calendar 
            ref=&quot;calendarBtn&quot; 
            v-model=&quot;calendarTime&quot; 
            :first-day-of-week=&quot;7&quot; 
            class=&quot;calendarLit&quot;
        &gt;
		    &lt;template slot=&quot;dateCell&quot; slot-scope=&quot;{date, data}&quot;&gt;
			    &lt;p :class=&quot;data.isSelected ? 'is-selected' : ''&quot;&gt;
					{{ parseInt(data.day.split('-').slice(2).join('-')) }}
			    &lt;/p&gt;
		    &lt;/template&gt;
	    &lt;/el-calendar&gt;
	    &lt;div id=&quot;button&quot;&gt;
		    &lt;el-button @click=&quot;clickPrevious&quot;&gt;
		    &lt;i class=&quot;el-icon-arrow-left&quot; /&gt;
		    &lt;/el-button&gt;
		    &lt;el-button @click=&quot;clickNext&quot;&gt;
			    &lt;i class=&quot;el-icon-arrow-right&quot; /&gt;
		    &lt;/el-button&gt;
	    &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
    export default{
        data(){
            return{
                calendarTime: new Date(),
            }
        },
        methods: {
            clickPrevious() {
			  this.$refs.calendarBtn.$children[0].$children[0].$el.click()
			},
			clickNext() {
			  this.$refs.calendarBtn.selectDate('next-month')
			}
        },
    }
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue项目引入svg图标]]></title>
        <id>https://nancy-svy.github.io/post/project-Introduction-SVG-icon/</id>
        <link href="https://nancy-svy.github.io/post/project-Introduction-SVG-icon/">
        </link>
        <updated>2023-05-23T09:51:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-安装svg依赖">1. 安装svg依赖</h3>
<p>在vue中首先需要安装可以加载svg的依赖。<br>
npm安装：npm install svg-sprite-loader --save-dev</p>
<h3 id="2-创建svg文件夹存放svg图标">2. 创建svg文件夹存放svg图标</h3>
<p>创建icons文件夹，在icons文件夹下创建svg文件夹存放本地svg图标。<br>
<img src="https://nancy-svy.github.io/post-images/1684835702862.png" alt="" loading="lazy"></p>
<h3 id="3-vueconfigjs-中配置svg图片">3. vue.config.js 中配置svg图片</h3>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1684890769870.png" alt="" loading="lazy"></figure>
<p>vue.config.js代码：</p>
<pre><code>const path = require('path')

function resolve(dir) {
  return path.join(__dirname, dir)
}

module.exports = {
	chainWebpack(config){
		/**
		 * set svg-sprite-loader
		 * svg图标加载 
		 **/ 
		config.module
		  .rule('svg')
		  .exclude.add(resolve('src/icons'))
		  .end()
		  
		config.module
		  .rule('icons') // 定义一个名叫 icons 的规则
		  .test(/\.svg$/) // 设置 icons 的匹配正则
		  .include.add(resolve('src/icons')) // 设置当前规则的作用目录，只在当前目录下才执行当前规则
		  .end()
		  .use('svg-sprite-loader') // 指定一个名叫 svg-sprite-loader 的 loader 配置
		  .loader('svg-sprite-loader') // 该配置使用 svg-sprite-loader 作为处理 loader
		  .options({ // 该 svg-sprite-loader 的配置
		    symbolId: 'icon-[name]'
		  })
		  .end()
	}
}
</code></pre>
<h3 id="4-创建indexjs-导入所有svg图标">4. 创建index.js 导入所有svg图标</h3>
<p>icons文件夹创建index.js 自动导入所有svg图标。<br>
<img src="https://nancy-svy.github.io/post-images/1684890847707.png" alt="" loading="lazy"></p>
<p>icons/index.js代码：</p>
<pre><code>import Vue from 'vue'
// svg component
import SvgIcon from '@/components/SvgIcon'

// 全局注册
Vue.component('svg-icon', SvgIcon)

const req = require.context('./svg', false, /\.svg$/)
const requireAll = requireContext =&gt; requireContext.keys().map(requireContext)
requireAll(req)
</code></pre>
<h3 id="5-mainjs中引入iconsindexjs">5. main.js中引入icons/index.js</h3>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1684891161639.png" alt="" loading="lazy"></figure>
<h3 id="6-创建svgicon公用组件">6. 创建SvgIcon公用组件</h3>
<figure data-type="image" tabindex="3"><img src="https://nancy-svy.github.io/post-images/1684891654421.png" alt="" loading="lazy"></figure>
<p>SvgIcon/index.vue代码：</p>
<pre><code>&lt;template&gt;
  &lt;div v-if=&quot;isExternal&quot; :style=&quot;styleExternalIcon&quot; class=&quot;svg-external-icon svg-icon&quot; v-on=&quot;$listeners&quot; /&gt;
  &lt;svg v-else :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot; v-on=&quot;$listeners&quot;&gt;
    &lt;use :xlink:href=&quot;iconName&quot; /&gt;
  &lt;/svg&gt;
&lt;/template&gt;

&lt;script&gt;
// doc: https://panjiachen.github.io/vue-element-admin-site/feature/component/svg-icon.html#usage
import { isExternal } from '@/utils/validate'

export default {
  name: 'SvgIcon',
  props: {
    iconClass: {
      type: String,
      required: true
    },
    className: {
      type: String,
      default: ''
    }
  },
  computed: {
    isExternal() {
      return isExternal(this.iconClass)
    },
    iconName() {
      return `#icon-${this.iconClass}`
    },
    svgClass() {
      if (this.className) {
        return 'svg-icon ' + this.className
      } else {
        return 'svg-icon'
      }
    },
    styleExternalIcon() {
      return {
        mask: `url(${this.iconClass}) no-repeat 50% 50%`,
        '-webkit-mask': `url(${this.iconClass}) no-repeat 50% 50%`
      }
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
.svg-icon {
  width: 1em;
  height: 1em;
  vertical-align: -0.15em;
  fill: currentColor;
  overflow: hidden;
}

.svg-external-icon {
  background-color: currentColor;
  mask-size: cover!important;
  display: inline-block;
}
&lt;/style&gt;

</code></pre>
<p>utils/validate.js代码：</p>
<pre><code>/**
 * @param {string} path
 * @returns {Boolean}
 */
export function isExternal(path) {
  return /^(https?:|mailto:|tel:)/.test(path)
}
</code></pre>
<p>全局注册SvgIcon组件：<br>
<img src="https://nancy-svy.github.io/post-images/1684890847707.png" alt="" loading="lazy"></p>
<p>使用SvgIcon组件：<br>
<img src="https://nancy-svy.github.io/post-images/1684892106504.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue watch监听中的属性]]></title>
        <id>https://nancy-svy.github.io/post/watchListeningProperties/</id>
        <link href="https://nancy-svy.github.io/post/watchListeningProperties/">
        </link>
        <updated>2023-05-11T07:19:01.000Z</updated>
        <content type="html"><![CDATA[<pre><code>watch: {
        data: {
            // 监听数据 获取到数据里的数组数据
            handler(val) {
                this.getInfo()
            },
            // 深度监听
            deep: true, 
            // 在watch中首次绑定的时候，是否执行handler，值为true则表示在watch中声明的时候，就立即执行handler方法，值为false，则和一般使用watch一样，在数据发生变化的时候才执行handler。所以当为true时 在created周期里就可以不用在写
            immediate:true, 
        },
    },
    created() {
        // this.getInfo()     immediate: true包含了初始化时触发
    }

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 关于Vue使用watch监听属性报“TypeError: Cannot read properties of undefined (reading ‘xxx‘)“的问题]]></title>
        <id>https://nancy-svy.github.io/post/watchAttributeError/</id>
        <link href="https://nancy-svy.github.io/post/watchAttributeError/">
        </link>
        <updated>2023-05-11T01:20:46.000Z</updated>
        <content type="html"><![CDATA[<h5 id="报错信息">报错信息</h5>
<p><strong>Error in callback for immediate watcher “abc”: &quot;TypeError: Cannot read properties of undefined (reading ‘xxx’)&quot;</strong><br>
<img src="https://nancy-svy.github.io/post-images/1683788865847.png" alt="" loading="lazy"></p>
<p><strong>解决方法：</strong></p>
<h5 id="1-watch当中的方法名写错">1、watch当中的方法名写错</h5>
<p>错误写法：</p>
<pre><code>watch: {
    $route: {
        immediate: true,
        headler() {  //  这里写错啦！
            console.log(111);
        },
    },
}
</code></pre>
<p>正确写法：</p>
<pre><code>watch: {
    $route: {
        immediate: true,
        handler() {
            console.log(111);
        },
    },
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1683789273221.png" alt="" loading="lazy"></figure>
<h5 id="2-当使用this指向data时报错使用普通函数">2、当使用this指向data时报错（使用普通函数）</h5>
<p>错误写法：</p>
<pre><code>$route: {
	immediate: true,
	handler: (route) =&gt; {
		console.log(this.route);
	},
},

</code></pre>
<p>正确写法：</p>
<pre><code>$route: {
   immediate: true,
   handler: function (route) {
       console.log(this.route);
   },
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 表格数据打印功能]]></title>
        <id>https://nancy-svy.github.io/post/tableDataPrinting/</id>
        <link href="https://nancy-svy.github.io/post/tableDataPrinting/">
        </link>
        <updated>2023-05-09T03:16:31.000Z</updated>
        <content type="html"><![CDATA[<h4 id="一-单页打印">一、单页打印</h4>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1683708395717.jpg" alt="" loading="lazy"></figure>
<p>只对当前页面可见数据进行打印，实现方法不唯一，此处介绍相对简单的vue-print-nb。他的缺点是只能打印可见区域，不能分页打印 。</p>
<ol>
<li>安装</li>
</ol>
<pre><code>  npm install vue-print-nb --save
</code></pre>
<ol start="2">
<li>引入</li>
</ol>
<pre><code>// 安装好以后在main.js文件中引入
import Print from 'vue-print-nb'
Vue.use(Print);  //注册
</code></pre>
<ol start="3">
<li>使用<br>
(1). 直接使用id，不对最终打印的表格进行样式修改</li>
</ol>
<pre><code>// 通过ID直接打印
  &lt;div id=&quot;print_demo&quot; &gt;
    &lt;p&gt;打印内容&lt;/p&gt;
  &lt;/div&gt;
&lt;button v-print=&quot;'#print_demo'&quot;&gt;打印&lt;/button&gt;
</code></pre>
<p>(2). 使用printObj，可以对打印的表格进行样式调整</p>
<pre><code>// 在组件的打印按钮标签上使用指令 v-print=&quot;printObj&quot;, print是配置对象
  &lt;button v-print=&quot;printObj&quot;&gt;打印&lt;/button&gt;

//  在组件的打印区域标签上加 id=&quot;print_demo&quot;
&lt;div id=&quot;print_demo&quot;  style=&quot;background:red;&quot;&gt;
  &lt;p&gt;打印内容&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>(2-1). 在组件的data中定义print配置对象</p>
<pre><code>export default {
    data() {
        return {
            printObj: {
              id: &quot;print_demo&quot;,
              popTitle: '打印的标题', //  打印配置页上方标题
              extraHead: '&lt;meta http-equiv=&quot;Content-Language&quot;content=&quot;zh-cn&quot;/&gt;',  // 最上方的头部文字，附加在head标签上的额外标签,使用逗号分隔
               preview: '',  // 是否启动预览模式，默认是false（开启预览模式，可以先预览后打印）
               previewTitle: '',  // 打印预览的标题（开启预览模式后出现）,
               previewPrintBtnLabel: '',  // 打印预览的标题的下方按钮文本，点击可进入打印（开启预览模式后出现）
               zIndex: '', // 预览的窗口的z-index，默认是 20002（此值要高一些，这涉及到预览模式是否显示在最上面）   
               previewBeforeOpenCallback() {}, //预览窗口打开之前的callback（开启预览模式调用）
               previewOpenCallback() {}, // 预览窗口打开之后的callback（开启预览模式调用）
               beforeOpenCallback() {}, // 开启打印前的回调事件
               openCallback() {}, // 调用打印之后的回调事件
              closeCallback() {}, //关闭打印的回调事件（无法确定点击的是确认还是取消）
              extraCss: 'https://www.google.com,https://www.google.com', 
            }
        };
    }
}
</code></pre>
<p>(2-2). 打印过滤（隐藏打印区域不需要打印的内容）<br>
只需要在组件的打印区域里，给需要隐藏的内容的标签上添加</p>
<pre><code>class=&quot;noprint&quot;
</code></pre>
<p>(2-3). 配置打印的样式<br>
在全局样式中，新增<style media="print"></style>标签，里面是打印时才生效的样式</p>
<pre><code>&lt;style media=&quot;print&quot;&gt;
    @page {
    size: auto;
    margin: 3mm;
    }

    html {
    background-color: #ffffff;
    height: auto;
    margin: 0px;
    }
&lt;/style&gt;
</code></pre>
<p>(2-4). 处理常见的打印bug<br>
解决打印出现空白页的问题<br>
解决el-table表格内容过多，打印不全问题<br>
解决作用域污染问题导致el-table序号错位</p>
<pre><code>&lt;style media=&quot;print&quot; lang=&quot;scss&quot;&gt;
    @page {
    size: auto;
    margin: 3mm;
    }
    @media print {
    html {
        background-color: #ffffff;
        height: auto;
        margin: 0px;
    }

    body {
        border: solid 1px #ffffff;
        margin: 10mm 15mm 10mm 15mm;
    }
    table {
        table-layout: auto !important;
    }

    .el-table__header-wrapper .el-table__header {
        width: 100% !important;
        border: solid 1px #f2f2f2;
    }
    .el-table__body-wrapper .el-table__body {
        width: 100% !important;
    }
    #pagetable table {
        table-layout: fixed !important;
    }
    }
&lt;/style&gt;
</code></pre>
<p>(2-5). 局部打印，局限在当前组件里<br>
在组件标签</p>
<pre><code>&lt;style media=&quot;print&quot; lang=&quot;scss&quot;&gt;
@page {
  size: auto;
  margin: 3mm;
}
@media print {
  html {
    background-color: #ffffff;
    height: auto;
    margin: 0px;
  }

  body {
    border: solid 1px #ffffff;
    margin: 10mm 15mm 10mm 15mm;
  }
  #printArea table {
    table-layout: auto !important;
  }

  #printArea .el-table__header-wrapper .el-table__header {
    width: 100% !important;
    border: solid 1px #f2f2f2;
  }
  #printArea .el-table__body-wrapper .el-table__body {
    width: 100% !important;
  }
  #printArea #pagetable table {
    table-layout: fixed !important;
  }
}
&lt;/style&gt;
</code></pre>
<p>(2-6). 注意<br>
启动打印后可以通过调整设置的缩放来调整显示比例<br>
可以通过设置背景图形来控制页面是否使用彩色背景</p>
<h4 id="二-打印数据库内全部数据">二、打印数据库内全部数据</h4>
<p><a href="https://printjs.crabbly.com/">Print.js 文档</a></p>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1683697863113.png" alt="" loading="lazy"></figure>
<p>将数据库内的全部数据以表格的形式进行打印，需要调用后台接口直接从数据库内进行数据的查找，而不是直接在页面内获取数据。</p>
<ol>
<li>安装</li>
</ol>
<pre><code>npm install print-js --save
</code></pre>
<ol start="2">
<li>引入</li>
</ol>
<pre><code>// 在当前vue文件内引用
import printJS from 'print-js'
</code></pre>
<ol start="3">
<li>使用</li>
</ol>
<pre><code>&lt;el-button  @click=&quot;printJson&quot;&gt;打印全部表格&lt;/el-button&gt;
</code></pre>
<pre><code>async printJson() {
      //通过getdata调用后台接口获取数据封装到res
      const res = await getdata();
      this.list = res.data || [];
      printJS({
        printable: this.list ,
        properties: [ // 表头数据
          {
            field: 'num', //  表头字段
            displayName: '序号', // 页面显示的文字
          },
          { field: 'date', displayName: '日期 '},
         { field: 'name', displayName: '费用名称' },
         { field: 'subjectMatter', displayName: '事由' },
         { field: 'money', displayName: '金额(元)' },
         { field: 'notes', displayName: '备注' },
        ],
        type: 'json',
         // tbody的样式
        gridStyle: 'text-align: center;border: 1px solid #E5E6EB;' ,
         // 标题
		header: `&lt;h3 class=&quot;custom-h3&quot;&gt;标题&lt;/h3&gt;`,
        // 标题样式
		style: '.custom-h3{text-align: center; margin-bottom: 10px;}',
      })
    },
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 条形码]]></title>
        <id>https://nancy-svy.github.io/post/barCode/</id>
        <link href="https://nancy-svy.github.io/post/barCode/">
        </link>
        <updated>2023-05-09T02:19:36.000Z</updated>
        <content type="html"><![CDATA[<h5 id="一-jsbarcode">一、JsBarcode</h5>
<p><a href="https://lindell.me/JsBarcode/">JsBarcode 文档</a></p>
<ol>
<li>安装：</li>
</ol>
<pre><code>npm install jsbarcode --save
</code></pre>
<ol start="2">
<li>引入：在需要生成条形码的页面引入即可</li>
</ol>
<pre><code>import JsBarcode from 'jsbarcode'
</code></pre>
<ol start="3">
<li>需要显示条形码的页面里</li>
</ol>
<pre><code>&lt;img id=&quot;barcode1&quot;&gt;
</code></pre>
<ol start="4">
<li>调用构造函数生成条形码</li>
</ol>
<pre><code>let barCode1 = this.info.marIdCode;
let barheight = this.imgHeight;
JsBarcode(&quot;#barcode1&quot;,barCode1,{
    format:&quot;CODE128&quot;, // 条形码的格式
    width:1,  // 线宽
    height:barheight,  // 条码高度
    lineColor:&quot;#000&quot;,  // 线条颜色
    displayValue:false,  // 是否显示文字
    margin:2  // 设置条形码周围的空白区域
})
</code></pre>
<h5 id="二-vue-barcode">二、vue-barcode</h5>
<p>vue-barcode 是JsBarcode的简单包装</p>
<ol>
<li>版本一<br>
<a href="https://github.com/lindell/vue-barcode">https://github.com/lindell/vue-barcode</a><br>
安装</li>
</ol>
<pre><code>npm install vue-barcode
</code></pre>
<ol start="2">
<li>版本二<br>
<a href="https://github.com/xkeshi/vue-barcode">https://github.com/xkeshi/vue-barcode</a><br>
安装</li>
</ol>
<pre><code>npm install @xkeshi/vue-barcode 
</code></pre>
<ol start="3">
<li>两个版本区别</li>
</ol>
<p>版本一：只能单独绑定属性<br>
引入：在需要生成条形码的页面引入即可</p>
<pre><code> import  VueBarcode from 'vue-barcode'
 new Vue({
  components: {
      'barcode': VueBarcode
  }
})
</code></pre>
<pre><code>&lt;barcode  :value=&quot;barcodeValue&quot;  :width=&quot;7&quot;  :height=&quot;200&quot;&gt;&lt;/barcode&gt;
</code></pre>
<p>版本二：可直接options绑定所有属性<br>
引入：在需要生成条形码的页面引入即可</p>
<pre><code> import VueBarcode from '@xkeshi/vue-barcode'
 new Vue({
  components: {
      'barcode': VueBarcode
  }
})
</code></pre>
<pre><code>&lt;barcode  :value=&quot;barcodeValue&quot;  :options=&quot;{ width:100 , height:100}&quot;&gt;
    条形码显示失败时的内容
&lt;/barcode&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js  文件大小换算为B、KB、MB、GB]]></title>
        <id>https://nancy-svy.github.io/post/fileSizeConversion/</id>
        <link href="https://nancy-svy.github.io/post/fileSizeConversion/">
        </link>
        <updated>2023-05-07T01:46:22.000Z</updated>
        <content type="html"><![CDATA[<pre><code>// 文件大小换算
			sizeTostr(size) {
			    var data = &quot;&quot;;
			    if (size &lt; 0.1 * 1024) { // 如果小于0.1KB转化成B  
			        data = size.toFixed(2) + &quot;B&quot;;
			    } else if (size &lt; 0.1 * 1024 * 1024) { // 如果小于0.1MB转化成KB  
			        data = (size / 1024).toFixed(2) + &quot;KB&quot;;
			    } else if (size &lt; 0.1 * 1024 * 1024 * 1024) { // 如果小于0.1GB转化成MB  
			        data = (size / (1024 * 1024)).toFixed(2) + &quot;MB&quot;;
			    } else { //其他转化成GB  
			        data = (size / (1024 * 1024 * 1024)).toFixed(2) + &quot;GB&quot;;
			    }
			    var sizestr = data + &quot;&quot;;
			    var len = sizestr.indexOf(&quot;\.&quot;);
			    var dec = sizestr.substr(len + 1, 2);
			    if (dec == &quot;00&quot;) { // 当小数点后为00时 去掉小数部分  
			        return sizestr.substring(0, len) + sizestr.substr(len + 3, 2);
			    }
			    return sizestr;
			},
</code></pre>
]]></content>
    </entry>
</feed>