<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>Gridea</title>
    <updated>2023-04-18T03:42:27.695Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[时间表]]></title>
        <id>https://nancy-svy.github.io/post/timeTable/</id>
        <link href="https://nancy-svy.github.io/post/timeTable/">
        </link>
        <updated>2023-04-17T03:37:44.000Z</updated>
        <content type="html"><![CDATA[<p>效果图<br>
<img src="https://nancy-svy.github.io/post-images/1681714897240.png" alt="" loading="lazy"></p>
<p><strong>html</strong></p>
<pre><code>&lt;template&gt;
	&lt;view class=&quot;container&quot;&gt;
		&lt;view class=&quot;timetable&quot;&gt;
			&lt;view class=&quot;header&quot;&gt;
				&lt;view class=&quot;day&quot; @click=&quot;handlePreviousDay&quot;&gt;
					&lt;uni-icons type=&quot;left&quot; color=&quot;#333333&quot; size=&quot;12&quot;&gt;&lt;/uni-icons&gt;
					前一天
				&lt;/view&gt;
				&lt;view class=&quot;date&quot;&gt;{{nowTime}}&lt;/view&gt;
				&lt;view class=&quot;day&quot; @click=&quot;handleNextDay&quot;&gt;
					后一天
					&lt;uni-icons type=&quot;right&quot; color=&quot;#333333&quot; size=&quot;12&quot;&gt;&lt;/uni-icons&gt;
				&lt;/view&gt;
			&lt;/view&gt;
			&lt;view class=&quot;time_list&quot;&gt;
				&lt;!-- 时间表上时间显示的区域 --&gt;
				&lt;view 
				:class=&quot;['leave_box', item &amp;&amp; item.my ? 'yellowBg' : 'blueBg']&quot;
				v-for=&quot;(item,index) in tableList&quot;
				:key=&quot;index&quot;
				:style=&quot;{height: `${item.height}rpx`, top: `${item.top}rpx`}&quot;
				&gt;
				&lt;text&gt;名称&lt;/text&gt;
				&lt;/view&gt;
				&lt;!-- 时间表表格 --&gt;
				&lt;view class=&quot;time_item&quot; v-for=&quot;(item,index) in timeList&quot; :key=&quot;index&quot;&gt;
					&lt;view class=&quot;time_item_text&quot;&gt;{{item}}:00&lt;/view&gt;
					&lt;view class=&quot;time_item_leave&quot;&gt;&lt;/view&gt;
				&lt;/view&gt;
			&lt;/view&gt;
		&lt;/view&gt;
	&lt;/view&gt;
	
&lt;/template&gt;
</code></pre>
<p><strong>js</strong></p>
<pre><code>&lt;script&gt;
	import { createTime } from '@/utils/utils.js'
	export default {
		name:&quot;timetable&quot;,
		data() {
			return {
				timeList: [
					'00','01','02','03','04','05','06','07','08','09','10','11',
					'12','13','14','15','16','17','18','19','20','21','22','23'
				],
				 // 当前日期
				nowTime: '', // xx年xx月xx日
				nowParams: '', // xx/xx/xx
				 // 列表单行高度
				li_H: 62,
				// 时间表
				renderSchedule: [
					{ formetter: '2023/03/09', time: '01:00-04:00', my: false },
					{ formetter: '2023/03/09', time: '08:00-10:10', my: false },
					{ formetter: '2023/03/09', time: '05:36-06:50', my: true },
					{ formetter: '2023/03/09', time: '17:30-19:30', my: true }
				],
				// 数据处理后渲染数据
				tableList: [],
			};
		},
		mounted(){
			let now = new Date()
			this.creationTime(now)
			this.processData()
		},
		methods:{
			// 获取当前日期
			creationTime(date){
				let timeParams = createTime(date)
				this.nowTime = `${timeParams.year}年${timeParams.month}月${timeParams.day}日 ${timeParams.weekday}`
				let timeP = createTime(date)
				this.nowParams = `${timeP.year}/${timeP.month}/${timeP.day}`
			},
			// 前一天
			handlePreviousDay(){
				let beforeDate = new Date(this.nowParams)
				beforeDate.setDate(beforeDate.getDate() - 1);
				this.creationTime(beforeDate)
			},
			// 后一天
			handleNextDay(){
				let afterDate = new Date(this.nowParams);
				afterDate.setDate(afterDate.getDate() + 1);
				this.creationTime(afterDate)
			},
			// 处理渲染的时间表数据
			processData(){
				this.renderSchedule.forEach(item =&gt; {
					let timedata = item.time.split('-');
					// 小时
					let startHour = timedata[0].slice(0, 2);
					let endHour = timedata[1].slice(0, 2);
					// 分钟
					let startMinute = timedata[0].slice(-2);
					let endMinute = timedata[1].slice(-2);
					// 开始时间的与结束时间相差几小时
					let myhour = Math.abs(endHour) - Math.abs(startHour);
					// 开始时间与结束时间相差几分钟
					let minute = Math.abs(endMinute) - Math.abs(startMinute);
					// dom高度
					let dom_height = dom_height = (myhour * this.li_H) + (minute * (this.li_H / 60));
					// console.log('高度', dom_height);
					item.height = parseInt(dom_height);
					// dom顶部偏移量
					let dom_top = (Math.abs(startHour) * this.li_H) + (Math.abs(startMinute) * (this.li_H / 60));
					// console.log('dom_top', dom_top);
					item.top = parseInt(dom_top);
				})
				this.tableList = this.renderSchedule;
			},
		},
	}
&lt;/script&gt;

</code></pre>
<p><strong>css</strong></p>
<pre><code>&lt;style lang=&quot;less&quot; scoped&gt;
.container{
	padding: 20rpx 32rpx;
}
.timetable{
	border-radius: 20rpx 20rpx 0rpx 0rpx;
	border: 1px solid #DFE0EB;
	.header{
		height: 80rpx;
		background: rgba(223,224,235,0.3);
		padding:0 19rpx;
		display: flex;
		align-items: center;
		justify-content: space-between;
		border-bottom: 1px solid #DFE0EB;
		.day{
			font-size: 24rpx;
			font-family: 'SourceHanSansCN-Regular';
			font-weight: 400;
			color: #333333;
		}
		.date{
			font-size: 28rpx;
			font-family: 'Source Han Sans CN-Medium';
			font-weight: 500;
			color: #333333;
		}
	}
	.time_list{
		position: relative;
		.time_item{
			height: 61rpx;
			display: flex;
			border-bottom: 1px solid #DFE0EB;
			&amp;:last-child{
				border-bottom: 0px solid #DFE0EB;
				.time_item_text,
				.time_item_leave{
					border-bottom: 0px solid #DFE0EB;
				}
			}
			.time_item_text{
				width: 84rpx;
				height: 61rpx;
				background: #F7F9FB;
				border-right: 1px solid #DFE0EB;
				text-align: center;
				line-height: 61rpx;
				font-size: 20rpx;
				font-family: 'SourceHanSansCN-Regular';
				font-weight: 400;
				color: #333333;
			}
			.time_item_leave{
				flex: 1;
				height: 61rpx;
			}
		}
		.leave_box{
			position: absolute;
			right: 0;
			width: calc(100% - 84rpx);
			font-size: 24rpx;
			font-family: 'SourceHanSansCN-Regular';
			font-weight: 400;
			color: #333333;
			text{
				line-height: 60rpx;
				padding-left: 20rpx;
			}
		}
		.yellowBg{
			background: rgba(255, 204, 0, 0.5);
		}
		.blueBg{
			background: rgba(0, 122, 255, 0.5);
		}
	}
}
		
&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uniapp 引入外部字体]]></title>
        <id>https://nancy-svy.github.io/post/importFontFile/</id>
        <link href="https://nancy-svy.github.io/post/importFontFile/">
        </link>
        <updated>2023-04-14T09:50:09.000Z</updated>
        <content type="html"><![CDATA[<p>uni-app 支持使用字体图标，请仔细阅读官方文档：<a href="https://uniapp.dcloud.net.cn/tutorial/syntax-css.html#%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87">地址</a></p>
<h3 id="一-当字体文件小于40kb时uni-app-会自动将其转化为-base64-格式直接引入即可">一、当字体文件小于40kb时，uni-app 会自动将其转化为 base64 格式，直接引入即可</h3>
<pre><code>@font-face {
     font-family: xxxxx;
     src: url('~@/static/xxxx.ttf');
 }
</code></pre>
<h3 id="当字体文件大于40kb时需要自己转化成base64格式">当字体文件大于40kb时，需要自己转化成base64格式：</h3>
<h6 id="1-将下载好的字体文件转换成base64格式转换地址">1、将下载好的字体文件转换成base64格式，<a href="https://transfonter.org/">转换地址</a></h6>
<p><img src="https://nancy-svy.github.io/post-images/1681464749478.png" alt="" loading="lazy"><br>
####### 步骤：<br>
<img src="https://nancy-svy.github.io/post-images/1681465633635.webp" alt="" loading="lazy"></p>
<ol>
<li>点击【Add fonts】,选择文件</li>
<li>打开【Base64 encode】</li>
<li>点击【Covert】</li>
<li>点击【Download】下载文件并解压，打开 stylesheet.css 文件，复制代码</li>
</ol>
<h6 id="2-转换完成后下载文件解压后将这三个文件放入项目中的static目录下">2、转换完成后，下载文件，解压后将这三个文件放入项目中的static目录下:</h6>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1681464757016.png" alt="" loading="lazy"></figure>
<h6 id="3-在appvue中引入该文件">3、在App.vue中引入该文件</h6>
<pre><code>@import url(&quot;./static/fonts/stylesheet.css&quot;);
</code></pre>
<h6 id="4-在代码中正常使用即可">4、在代码中正常使用即可：</h6>
<pre><code>例如：font-family: YOUSHEhaoshenti;
</code></pre>
<h3 id="或者在阿里巴巴矢量图标图-地址-中查找需要下载的字体文件">或者在阿里巴巴矢量图标图 <a href="https://www.iconfont.cn/">地址</a> 中查找需要下载的字体文件</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[chrome问题]]></title>
        <id>https://nancy-svy.github.io/post/chromeQuestion/</id>
        <link href="https://nancy-svy.github.io/post/chromeQuestion/">
        </link>
        <updated>2023-04-12T01:05:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题">问题：</h2>
<pre><code>    打开谷歌浏览器提示：您使用的是不受支持的命令行标记:–extensions-on-chrome-urls。稳定性和安全性会有所下降。
</code></pre>
<h2 id="问题分析">问题分析：</h2>
<pre><code>    出现该提示是因为在你非官方安装插件之后
</code></pre>
<h2 id="解决办法">解决办法：</h2>
<pre><code>    在Chrome导航栏中输入[Experiments](chrome://flags ),
    搜索栏搜索【Extensions on chrome:// URLs】网址下的扩展程序，然后选择Disabled。     
</code></pre>
<p><img src="https://nancy-svy.github.io/post-images/1681261731032.png" alt="" loading="lazy"><br>
disabled 关闭<br>
enabled 启用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[压缩包添加密码]]></title>
        <id>https://nancy-svy.github.io/post/compressedPacketEncryption/</id>
        <link href="https://nancy-svy.github.io/post/compressedPacketEncryption/">
        </link>
        <updated>2023-04-12T00:44:30.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>压缩文件：找到需要压缩的文件/文件夹，右击文件，点击添加到压缩文件，开始压缩。</li>
<li>添加密码：进入压缩界面，点击添加密码</li>
<li>输入密码：进入添加密码界面后，输入密码</li>
<li>开始压缩：密码设置完成后，点击立即压缩，开始压缩文件并加密</li>
<li>压缩成功：我们可以看到压缩文件和原文件都在，说明压缩成功了。</li>
<li>解压：右击压缩文件，点击解压到，开始解压</li>
<li>需要密码：出现解压需要密码，说明密码设置成功。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[百度网盘设置提取码]]></title>
        <id>https://nancy-svy.github.io/post/networkDiskExtractionCode/</id>
        <link href="https://nancy-svy.github.io/post/networkDiskExtractionCode/">
        </link>
        <updated>2023-04-11T09:20:49.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>打开百度网盘，上传想要分享的文件<br>
<img src="https://nancy-svy.github.io/post-images/1681205379490.jpg" alt="" loading="lazy"></li>
<li>然后找到文件，选中文件，在上方会出现【分享】<br>
<img src="https://nancy-svy.github.io/post-images/1681205384472.jpg" alt="" loading="lazy"><br>
或者右击要分享的文件，选择【分享】<br>
<img src="https://nancy-svy.github.io/post-images/1681205391766.jpg" alt="" loading="lazy"></li>
<li>在打开的窗口中，分享形式下点击【加密】，然后点击【创建链接】<br>
<img src="https://nancy-svy.github.io/post-images/1681205396627.jpg" alt="" loading="lazy"></li>
<li>就可以得到文件的分享的地址和提取码了，点击【复制链接及密码】<br>
<img src="https://nancy-svy.github.io/post-images/1681205403056.jpg" alt="" loading="lazy"></li>
<li>系统提示复制成功，再将复制好的内容发送给你的好友，就可以了<br>
<img src="https://nancy-svy.github.io/post-images/1681205492242.jpg" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用GitHub发布个人网站]]></title>
        <id>https://nancy-svy.github.io/post/publishPersonalWebsite/</id>
        <link href="https://nancy-svy.github.io/post/publishPersonalWebsite/">
        </link>
        <updated>2023-04-10T08:48:38.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>进入github, 点击Create repository创建一个仓库<br>
<img src="https://nancy-svy.github.io/post-images/1681117633780.png" alt="" loading="lazy"></li>
<li>建立自己的库<br>
<img src="https://nancy-svy.github.io/post-images/1681117640648.png" alt="" loading="lazy"></li>
<li>点击uploading an existing file 上传一个已有的文件，或将文件拖动进入<br>
<img src="https://nancy-svy.github.io/post-images/1681117646631.png" alt="" loading="lazy"></li>
<li>点击commit changes 上传<br>
<img src="https://nancy-svy.github.io/post-images/1681117652676.png" alt="" loading="lazy"></li>
<li>点击 settings<br>
<img src="https://nancy-svy.github.io/post-images/1681117663992.png" alt="" loading="lazy"></li>
<li>选择左侧pages菜单，source中选择分支选择main，点击save<br>
<img src="https://nancy-svy.github.io/post-images/1681117670948.png" alt="" loading="lazy"></li>
<li>刷新一下将出现你的静态访问网址（需要等待几分钟）</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[添加萌国ICP备案号]]></title>
        <id>https://nancy-svy.github.io/post/mengGuoICPPutOnRecord/</id>
        <link href="https://nancy-svy.github.io/post/mengGuoICPPutOnRecord/">
        </link>
        <updated>2023-04-07T07:28:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言🍭</h1>
<ul>
<li>使用国外域名部署网站的站长</li>
<li>已经在国内备案，想再添加一个备案信息的站长</li>
</ul>
<p>因为国内互联网监管要求，购买国内的域名需要进行ICP备案，本小站也是国内购买的域名，当时网站备案花费了9天时间，流程相对严谨，不同地区的备案时间各有差异，一般不超过30天即可完成备案。当网站备案通过后需要将备案号添加到页脚中，以便网站的规范化运作。</p>
<p>而在国外域名网站购买的域名不需要经过备案就可以让国内用户访问网站，相对而言比较快速上手，但由于没有经过备案这一流程，网站没有备案号，本文就针对这种情况给出解决方法，通过第三方网站选择一个备案号码填入到页脚。</p>
<h1 id="萌国萌站平台">萌国萌站平台🐣</h1>
<p>萌国ICP备案是第三方的备案平台，站长在注册通过后选择一个备案号码，然后将生成的备案链接添加到网站的页脚标签页中。</p>
<h1 id="添加教程">添加教程✅</h1>
<ul>
<li>点击登录， 选择加入<br>
<a href="https://icp.gov.moe/aboutus.php">萌国ICP主页</a></li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1680853010730.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>点击橙色进入选择一个喜欢的号码<br>
<img src="https://nancy-svy.github.io/post-images/1680853018966.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1680853027028.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>选择好后填写常用邮箱，验证账号，并填写好网站名字和网站地址，大概5分钟时间完成验证<br>
<img src="https://nancy-svy.github.io/post-images/1680853041573.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="3"><img src="https://nancy-svy.github.io/post-images/1680853062611.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>将刚才页面的代码填入到网站页脚页面，⚠️每个人申请的都不同<br>
<a href="https://icp.gov.moe/?keyword=20220176" target="_blank">萌ICP备20220176号</a><br>
进入主题编辑中template/common/footer.ftl,在footer里任意位置添加上述获取到的代码：<br>
示范代码</p>
  <p>
  <a href="https://icp.gov.moe/?keyword=20220176" target="_blank">萌ICP备20220176号</a>
  </p>
</li>
</ul>
<h1 id="效果">效果🔅</h1>
<p>页脚效果<br>
<img src="https://nancy-svy.github.io/post-images/1680853129791.png" alt="" loading="lazy"></p>
<p>点击效果<br>
<img src="https://nancy-svy.github.io/post-images/1680853139680.png" alt="" loading="lazy"></p>
<h1 id="小结">小结🔖</h1>
<p>以上就是添加萌国ICP备案信息的教程，如果后续需要更改网站信息，可以点击自己萌国ICP打开关于页面，找到下面的修改填写自己的萌国ID加绑定的邮箱即可完成修改。<br>
<img src="https://nancy-svy.github.io/post-images/1680853150947.png" alt="" loading="lazy"></p>
<h1 id="致谢">致谢🎈</h1>
<p><a href="https://icp.gov.moe/">萌ICP备案</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea快速上手]]></title>
        <id>https://nancy-svy.github.io/post/grideaGetStartedQuickly/</id>
        <link href="https://nancy-svy.github.io/post/grideaGetStartedQuickly/">
        </link>
        <updated>2023-04-07T06:28:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>先给大家简单的介绍一下吧，Gridea是一个静态博客写作客户端，相较于其他主流的静态博客，比如之前介绍过的hexo，它更简单更容易上手，只需要了解一点点Markdown的语法进行写作就可以，这就意味着哪怕是完全没有接触过这方面的人也能够在短短几分钟之内搭建一个自己的博客。 那么下面就是具体操作的步骤！</p>
<h3 id="一-确定托管代码的平台">💻 一、确定托管代码的平台</h3>
<p>Gridea是可以将博客部署到Github、Coding和自己的服务器上的。但是很明显，服务器要花钱，选择建静态博客的大部分人，还是因为不想花非刚需的钱去买主机或者服务器。而Coding新版也是要收费的，虽然也不贵而且还有六个月的试用期，但是想要用它的pages服务还需要实名认证，这也相对繁琐。因此我推荐将博客部署到github。往下的教程也是以Github为例。*</p>
<h3 id="二-注册github账号并创建仓库">🍀 二、注册Github账号并创建仓库</h3>
<p>🤝 1、如果你没有Github的账号，那么可以进入官网开始注册（注意一下用户名的填写，如果不使用自定义域名，用户名将会是你的Github分配给你的域名，比如你的用户名为xxx，那么你的域名会是xxx.github,io）。</p>
<p>⛳️ Github官网：https://github.com</p>
<p>🤝 2、新建仓库，如图所示，点击右上角的“+”号，然后点击“New respository&quot;即可。<br>
<img src="https://nancy-svy.github.io/post-images/1680851882561.png" alt="" loading="lazy"><br>
🤝 3、配置仓库<br>
这里推荐仓库名填写格式为：”用户名.github.io“。<br>
然后点击”Add a README file“，再点击”Create repository“即可。<br>
<img src="https://nancy-svy.github.io/post-images/1680851895583.png" alt="" loading="lazy"></p>
<p>🤝 4、点击仓库的”Settings“，进入”pages“。<br>
<img src="https://nancy-svy.github.io/post-images/1680851942771.png" alt="" loading="lazy"><br>
<img src="https://nancy-svy.github.io/post-images/1680851950892.png" alt="" loading="lazy"><br>
🤝 你就会看到你的域名已经正常显示出来了。<br>
<img src="https://nancy-svy.github.io/post-images/1680851958169.png" alt="" loading="lazy"><br>
<img src="https://nancy-svy.github.io/post-images/1680851964605.png" alt="" loading="lazy"></p>
<h3 id="三-创建github-token">🌁 三、创建Github token</h3>
<p>🚲 1、点击右上角头像的settings，选择菜单最下面的developer settings。<br>
<img src="https://nancy-svy.github.io/post-images/1680851972305.png" alt="" loading="lazy"></p>
<p>🚲 2、点击”Personal acces tokens“，再点击”Generate new token“。<br>
<img src="https://nancy-svy.github.io/post-images/1680852099339.png" alt="" loading="lazy"></p>
<p>🚲 3、Note备注可以随便写，这里写个”Griddea“，然后选择”No expiration“，再把”repo“打上✓。<br>
<img src="https://nancy-svy.github.io/post-images/1680852106842.png" alt="" loading="lazy"></p>
<p>然后下拉页面，选择”Generate token“创建token。<br>
<img src="https://nancy-svy.github.io/post-images/1680852113727.png" alt="" loading="lazy"></p>
<p>🚲 4、复制token，记得保存好，因为只显示一次，忘了又得重新申请。<br>
<img src="https://nancy-svy.github.io/post-images/1680852119865.png" alt="" loading="lazy"></p>
<h3 id="四-配置gridea">🌱 四、配置Gridea</h3>
<p>准备工作都完成了接下来是配置Gridea。</p>
<p>⛳️ Gridea官网： https://gridea.dev</p>
<p>✈️ 1、进入官网，根据你的电脑系统下载好Gridea客户端，这里以windows为例。<br>
<img src="https://nancy-svy.github.io/post-images/1680852193850.png" alt="" loading="lazy"><br>
你也可以直接在下方链接下载，因为在GIthub上下载是比较慢的。<br>
推荐国内Gitee下载源：https://gitee.com/fehey/gridea/releases/v0.9.2<br>
<img src="https://nancy-svy.github.io/post-images/1680852210292.png" alt="" loading="lazy"></p>
<p>✈️ 2、安装好后，打开Gridea的”远程“配置你的Github信息，然后保存，如下图。<br>
<img src="https://nancy-svy.github.io/post-images/1680852215287.png" alt="" loading="lazy"></p>
<p>然后点击左下角的检测远程链接，如果配置没问题，那就会显示远程连接成功。<br>
如果连接失败，还请回到上述步骤自行检查。<br>
<img src="https://nancy-svy.github.io/post-images/1680852221690.png" alt="" loading="lazy"></p>
<p>✈️ 3、编辑文章。<br>
点击文章，点击右上角的”+“号即可。<br>
<img src="https://nancy-svy.github.io/post-images/1680852311361.png" alt="" loading="lazy"><br>
编辑完成后，点击右上角保存即可。<br>
<img src="https://nancy-svy.github.io/post-images/1680852303470.png" alt="" loading="lazy"></p>
<p>✈️ 4、预览和同步<br>
点击预览，本地预览后没问题即可点击”同步“推送至github。<br>
<img src="https://nancy-svy.github.io/post-images/1680852293208.png" alt="" loading="lazy"></p>
<p>✈️ 当然，你还可以继续配置其他信息，比如自己的网站名字，头像，页脚，图标，加评论等等。<br>
还可以买个域名来自定义github的域名。<br>
<img src="https://nancy-svy.github.io/post-images/1680852283579.png" alt="" loading="lazy"></p>
<h3 id="五-更换主题">🌉 五、更换主题</h3>
<p>🗼在 https://gridea.dev/themes/ ，寻找你喜欢的主题，然后点击【下载文件】，下载后解压<br>
🗼 点击客户端里的【配置】，找到【 站点源文件路径 】，打开路径。退出Gridea客户端。<br>
🗼 选择【themes】文件夹，把刚刚解压的主题文件夹复制过来，重新打开Gridea客户端，打开【主题】，选择主题，滚动下鼠标，选中刚刚复制进去的主题名称，保存。<br>
🗼 点击预览，即可看到新的主题页面。</p>
<h1 id="六-开启gitalk评论系统">💬 六、开启Gitalk评论系统</h1>
<p>🏷️ 在https://github.com/settings/applications/new注册应用。<br>
<img src="https://nancy-svy.github.io/post-images/1681097397374.png" alt="" loading="lazy"><br>
🏷️ 填写后点击【Register application】，会得到【Client ID】和【Client Secret】。<br>
<img src="https://nancy-svy.github.io/post-images/1681097290262.jpg" alt="" loading="lazy"><br>
🏷️ 打开Gridea客户端 -&gt; 远程 -&gt; 评论配置 -&gt; 平台（选中Gitalk）-&gt; 按照下面提示填写-&gt;<br>
<img src="https://nancy-svy.github.io/post-images/1681097404152.png" alt="" loading="lazy"><br>
🏷️ 填完后点击【保存】-&gt;【同步】。<br>
📋 稍等一会儿后，在浏览器打开域名，会看到文章底下显示“未找到相关的issues进行评论xxx”，点击【使用GitHub登陆】，进行授权。</p>
<h3 id="六-基本操作">📝 六、基本操作</h3>
<ol>
<li>
<p>输入文章标题<br>
(1.)使用 = 和 - 标记一级和二级标题<br>
注意：由于分割线也是 “---”， 因此在使用分割线时，一定要空一行，不然会把上方的文字识别为第二级标题<br>
(2.)使用#号标记<br>
在行首插入 1 到 6 个 # 再加空格，对应到标题 1 到 6级<br>
（注意：#号后面一定要有一个空格）</p>
</li>
<li>
<p>输入无序列表   - 无序列表，数字列表    1. 数字列表</p>
</li>
<li>
<p>输入代码虚假的代码,(虚假的代码左右各一个&quot;`&quot;)输入代码段虚假的代码段.(虚假的代码段,左右各有3个```)</p>
</li>
<li>
<p>输入数学公式: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">数</mi><mi mathvariant="normal">学</mi><mi mathvariant="normal">公</mi><mi mathvariant="normal">式</mi></mrow><annotation encoding="application/x-tex">数学公式</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">学</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">式</span></span></span></span>.</p>
</li>
<li>
<p>插入图片: 直接拖入以 【 <img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片名称" loading="lazy"> 】 的形式给出</p>
</li>
<li>
<p>插入链接: 以【<a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a>】的形式给出</p>
</li>
<li>
<p>字体<br>
（1）<em>斜体文本</em><br>
（2）<em>斜体文本</em><br>
（3）<strong>粗体文本</strong><br>
（4）<strong>粗体文本</strong><br>
（5）<em><strong>粗斜体文本</strong></em><br>
（6）<em><strong>粗斜体文本</strong></em></p>
</li>
<li>
<p>分割线<br>
在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>
<hr>
<hr>
</li>
<li>
<p>删除线<br>
<s>删除线</s><br>
<u>下划线</u><br>
脚注[^脚注]</p>
</li>
<li>
<p>列表<br>
（1）无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容<br>
（2）列表嵌套<br>
列表嵌套只需在子列表中的选项前面添加四个空格即可<br>
（3）在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：<br>
另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推<br>
（4）区块中使用列表<br>
列表中使用区块<br>
如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简单的锚点定位]]></title>
        <id>https://nancy-svy.github.io/post/anchorPointPositioning/</id>
        <link href="https://nancy-svy.github.io/post/anchorPointPositioning/">
        </link>
        <updated>2023-04-05T07:38:10.000Z</updated>
        <content type="html"><![CDATA[<p>html</p>
<pre><code>&lt;template&gt;
	&lt;view class=&quot;container&quot;&gt;
		&lt;!-- 左边内容 --&gt;
		&lt;scroll-view 
		class=&quot;scroller&quot; 
		:scroll-into-view=&quot;toView&quot; 
		scroll-y=&quot;true&quot; 
		scroll-with-animation=&quot;true&quot;
		@scroll=&quot;cateScroll&quot;
		&gt;
			&lt;view 
			:id=&quot;item&quot; 
			class=&quot;left&quot; 
			v-for=&quot;item in list&quot;
			&gt;
				{{item.toUpperCase()}}
			&lt;/view&gt;
		&lt;/scroll-view&gt;
		&lt;!-- 右边索引 --&gt;
		&lt;view&gt;
			&lt;view 
			:data-id=&quot;item&quot; 
			v-for=&quot;item in list&quot; 
			@tap=&quot;bindToView&quot;&gt;{{item}}
			&lt;/view&gt;
		&lt;/view&gt;
	&lt;/view&gt;
&lt;/template&gt;
</code></pre>
<p>js</p>
<pre><code>&lt;script&gt;
	export default {
		data() {
			return {
				list:[
					'a','b','c','d','e','f','g','h','i','j',
					'k','l','m','n','o','p','q','r','s','t',
					'u','v','w','x','y','z'
				],
				toView:'',
			}
		},
		methods:{
			bindToView(event){
				let id = event.currentTarget.dataset.id;
				this.toView = id;
			},
			/*滑动*/
			cateScroll() {
				const query = uni.createSelectorQuery().in(this);
				query.selectAll('.aaaaa').boundingClientRect(data =&gt; {
					for (var cate = 0; cate &lt; data.length; cate++) {
						if (data[cate].top &lt; 120 &amp;&amp; data[cate].top &gt; 0) {
							this.toview = data[cate].id;
						}
					}
				}).exec();
			}
		},
	}
&lt;/script&gt;
</code></pre>
<p>css</p>
<pre><code>&lt;style  lang=&quot;scss&quot; scoped&gt;
	.container{
		width: 100%;
		display: flex;
		scroll-view{
			height: 100vh;
			.left{
				font-size: 50rpx;
				line-height: 150rpx;
			}
		}
		&gt; view{
			position: fixed;
			right: 10rpx;
		}
	}
&lt;/style&gt;
</code></pre>
<p>效果<br>
<img src="https://nancy-svy.github.io/post-images/1681724154044.gif" alt="" loading="lazy"></p>
<p><strong>需要注意的是scroll-view必须设置高度，不设置的话没效果，但不要设置100%，除非父元素写了高</strong><br>
<img src="https://nancy-svy.github.io/post-images/1681724191543.png" alt="" loading="lazy"><br>
<a href="https://uniapp.dcloud.io/component/scroll-view">附上官方文档</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[动态创建form并校验]]></title>
        <id>https://nancy-svy.github.io/post/dynamicallyCreateAForms/</id>
        <link href="https://nancy-svy.github.io/post/dynamicallyCreateAForms/">
        </link>
        <updated>2023-04-05T07:12:01.000Z</updated>
        <content type="html"><![CDATA[<p>效果图<br>
<img src="https://nancy-svy.github.io/post-images/1681715723244.png" alt="" loading="lazy"><br>
点击新增<br>
<img src="https://nancy-svy.github.io/post-images/1681715739290.png" alt="" loading="lazy"><br>
点击提交<br>
<img src="https://nancy-svy.github.io/post-images/1681715751339.png" alt="" loading="lazy"></p>
<p><strong>css</strong></p>
<pre><code>&lt;template&gt;
	&lt;view class=&quot;container&quot;&gt;
		&lt;uni-section :title=&quot;'新增数据' + index&quot; 
		type=&quot;line&quot; 
		v-for=&quot;(item, index) in dynamicLists&quot; 
		:key=&quot;index&quot;
		&gt;
		    &lt;uni-forms ref=&quot;baseForm&quot; :modelValue='dynamicLists[index]' :rules=&quot;rules&quot;&gt;
		    	&lt;uni-forms-item label=&quot;姓名&quot; name=&quot;name&quot;&gt;
		    		&lt;input v-model=&quot;item.name&quot; placeholder=&quot;请输入姓名&quot;/&gt;
				&lt;/uni-forms-item&gt;
				&lt;uni-forms-item label=&quot;手机号&quot; name=&quot;phone&quot;&gt;
					&lt;input v-model=&quot;item.phone&quot; placeholder=&quot;请输入手机号&quot;/&gt;
				&lt;/uni-forms-item&gt;
		    &lt;/uni-forms&gt;
		&lt;/uni-section&gt;
		&lt;view class=&quot;button-group&quot;&gt;
			&lt;button type=&quot;primary&quot; plain=&quot;true&quot; class=&quot;button&quot; size=&quot;mini&quot; @click=&quot;add&quot;&gt;新增&lt;/button&gt;
			&lt;button type=&quot;warn&quot; plain=&quot;true&quot; class=&quot;button&quot; size=&quot;mini&quot; @click=&quot;submit&quot;&gt;提交&lt;/button&gt;
		&lt;/view&gt;
	&lt;/view&gt;
&lt;/template&gt;
</code></pre>
<p><strong>js</strong></p>
<pre><code>&lt;script&gt;
	export default {
		data() {
			return {
				dynamicLists: [
					{    
		                id: Date.now(),
						name: '',
						phone: '',
					}
				],
				rules: {
					name: {
						rules: [{
							required: true,
							errorMessage: '姓名必填'
						}]
					},
					phone: {
						rules: [
							{required: true, errorMessage: '手机号必填'},
							{required: true, validateFunction: (rule,value,data,callback)=&gt;{
									let reg = /^1(3\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\d|9[0-35-9])\d{8}$/;
									if(reg.test(value) == false){
										callback('请输入合法的手机号')
									}
									return true;
								}
							},
						]
					}
				}
			}
		},
		onReady(){
			// 需要在onReady中设置规则
			this.$nextTick(()=&gt;{
				this.dynamicLists.map((item, index) =&gt; {
					this.$refs.baseForm[index].setRules(this.rules)
				})
			})
		},
		methods: {
			// 新增
			add(){
			    this.dynamicLists.push({
				    id: Date.now(),
					name: '',
					phone: '',
				})
				this.$nextTick(() =&gt; {
					this.dynamicLists.map((item,index) =&gt; {
						this.$refs.baseForm[index].setRules(this.rules)
					})
				})
			},
			// validate方法是针对对象来说的，数组时不能使用该方法的
			// 解决方法 
			async handleValidte() {
				const promises = this.dynamicLists.map((item, index) =&gt; {
					return new Promise(resolve =&gt; {
						this.$refs.baseForm[index].validate(err =&gt; {
							resolve(err)
						})
					})
				})
				return await Promise.all(promises)
			},
			
			// 提交
			async submit() {
				let validtateList = await this.handleValidte()
			    // 扁平化
				let flat = validtateList.flat(2)
				const isTrue = flat.every(item =&gt; {
					return item === null
				})
				if(isTrue) {
					uni.showToast({
						title: `提交成功`
					})
			        // 清数组
					this.dynamicLists = [{
						id: Date.now(),
						name: '',
						phone: '',
					}]
				}
			},

		}
	}
&lt;/script&gt;

</code></pre>
<p><strong>css</strong></p>
<pre><code>&lt;style lang=&quot;less&quot; scoped&gt;
.container{
	padding: 20rpx 32rpx;
	/deep/.uni-forms{
		padding-left: 50rpx;
		.uni-forms-item{
			align-items: center;
			.uni-forms-item__label{
				font-size: 32rpx!important;
				font-weight: 400;
				color: #333333!important;
			}
			input{
				font-size: 32rpx;
			}
		}
	}
	.button-group{
		display: flex;
		align-items: center;
		justify-content: space-evenly;
	}
}
&lt;/style&gt;

</code></pre>
]]></content>
    </entry>
</feed>