<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>真实の幻梦</title>
    <updated>2024-01-23T09:54:35.715Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>草在结它的种子 ，风在摇它的叶子 ，我们站着，不说话，就十分美好。</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, 真实の幻梦</rights>
    <entry>
        <title type="html"><![CDATA[vue 解决数据改变但视图没有刷新的几种情况以及解决方法]]></title>
        <id>https://nancy-svy.github.io/post/vue-jie-jue-shu-ju-gai-bian-dan-shi-tu-mei-you-shua-xin-de-ji-chong-qing-kuang-yi-ji-jie-jue-fang-fa/</id>
        <link href="https://nancy-svy.github.io/post/vue-jie-jue-shu-ju-gai-bian-dan-shi-tu-mei-you-shua-xin-de-ji-chong-qing-kuang-yi-ji-jie-jue-fang-fa/">
        </link>
        <updated>2024-01-23T07:36:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="情况一vue无法检测实例被创建是不存在于data中的变量">情况一：vue无法检测实例被创建是不存在于data中的变量</h3>
<p>例如：</p>
<pre><code>new Vue({
  data:{},
  template: '&lt;div&gt;{{message}}&lt;/div&gt;'
})
this.message = 'Hello world!' // `message` 不是响应式的页面不会发生变化
</code></pre>
<p>解决方法：</p>
<pre><code>new Vue({
  data: {
    message: '',
  },
  template: '&lt;div&gt;{{ message }}&lt;/div&gt;'
})
this.message = 'Hello world!'
</code></pre>
<h3 id="情况二vue不能检测到data中对象的动态添加和删除">情况二：vue不能检测到data中对象的动态添加和删除</h3>
<p>例如：</p>
<pre><code>new Vue({
  data:{
    obj: {
      id: 1
    }
  },
  template: '&lt;div&gt;{{ obj.message }}&lt;/div&gt;'
})
this.obj.message = 'hello' // 不是响应式的
delete this.obj.id       // 不是响应式的
</code></pre>
<p>解决方法：</p>
<pre><code>// 动态添加 - Vue.set
Vue.set(this.obj, 'id', 002)
  
// 动态添加 - this.$set
this.$set(this.obj, 'id', 002)
  
// 动态添加多个
// 代替 Object.assign(this.obj, { a: 1, b: 2 })
this.obj = Object.assign({}, this.obj, { a: 1, b: 2 })
  
// 动态移除 - Vue.delete
Vue.delete(this.obj, 'name')
  
// 动态移除 - this.$delete
this.$delete(this.obj, 'name')
</code></pre>
<h3 id="情况三span-stylecolor-red变量为数组时sapn">情况三：<span style="color: red;">变量为数组时</sapn></h3>
<p style="color: #FF5823;">不能通过索引值直接修改或赋值，也不能改变数组的长度</p>
<p>例如：</p>
<pre><code>new Vue({
  data: {
    items: ['a', 'b', 'c']
  }
})
this.items[1] = 'x' // 不是响应性的
this.items[3] = 'd' // 不是响应性的
this.items.length = 2 // 不是响应性的
</code></pre>
<p>解决方法：</p>
<pre><code>// Vue.set
Vue.set(this.items, 4, 'd')
  
// this.$set
this.$set(this.items, 4, 'd')
  
// Array.prototype.splice
this.items.splice(indexOfItem, 4, 'd')
//修改长度
this.items.splice(3)
</code></pre>
<h3 id="情况四一步获取接口数据dom数据不发生变化">情况四：一步获取接口数据，DOM数据不发生变化</h3>
<p>原因：Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(funcation, 0) 代替。<br>
例如：</p>
<pre><code>&lt;div id=&quot;example&quot;&gt;{{message}}&lt;/div&gt;
var vm = new Vue({
  el: '#example',
  data: {
    message: '123'
  }
})
vm.message = 'new message' // 更改数据
vm.$el.textContent === 'new message' // false
vm.$el.style.color = 'red' // 页面没有变化
</code></pre>
<p>解决方法：</p>
<pre><code>var vm = new Vue({
  el: '#example',
  data: {
    message: '123'
  }
})
vm.message = 'new message' // 更改数据
//使用 Vue.nextTick(callback) callback 将在 DOM 更新完成后被调用
Vue.nextTick(function () {
  vm.$el.textContent === 'new message' // true
  vm.$el.style.color = 'red' // 文字颜色变成红色
})
</code></pre>
<h3 id="情况五循环嵌套层级太深视图不更新">情况五：循环嵌套层级太深，视图不更新</h3>
<p>当嵌套太深时，页面也可能不更新，此时可以让页面强制刷新</p>
<p>this.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>c</mi><mi>e</mi><mi>U</mi><mi>p</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>(</mo><mo>)</mo><mi mathvariant="normal">迫</mi><mi mathvariant="normal">使</mi><mi>v</mi><mi>u</mi><mi>e</mi><mi mathvariant="normal">实</mi><mi mathvariant="normal">例</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">（</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">）</mi><mi mathvariant="normal">渲</mi><mi mathvariant="normal">染</mi><mi mathvariant="normal">虚</mi><mi mathvariant="normal">拟</mi><mi>D</mi><mi>O</mi><mi>M</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">注</mi><mi mathvariant="normal">意</mi><mi mathvariant="normal">并</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">载</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">结</mi><mi mathvariant="normal">合</mi><mi>v</mi><mi>u</mi><mi>e</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">生</mi><mi mathvariant="normal">命</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">调</mi><mi mathvariant="normal">用</mi></mrow><annotation encoding="application/x-tex">forceUpdate()迫使vue实例重新（rander）渲染虚拟DOM，注意并不是重新加载组件。
结合vue的生命周期，调用</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord cjk_fallback">迫</span><span class="mord cjk_fallback">使</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">例</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">渲</span><span class="mord cjk_fallback">染</span><span class="mord cjk_fallback">虚</span><span class="mord cjk_fallback">拟</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">注</span><span class="mord cjk_fallback">意</span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">载</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">合</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">生</span><span class="mord cjk_fallback">命</span><span class="mord cjk_fallback">周</span><span class="mord cjk_fallback">期</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">调</span><span class="mord cjk_fallback">用</span></span></span></span>forceUpdate后只会触发beforeUpdate和updated这两个钩子函数，不会触发其他的钩子函数。<br>
它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p>
<pre><code>//官方说如果你现在的场景需要用forceUpdate方法 ,那么99%是你的操作有问题
this.$forceUpdate();
</code></pre>
<h3 id="情况六路由参数变化页面不更新数据不更新">情况六：路由参数变化，页面不更新(数据不更新)</h3>
<p>例如：</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;router-link to=&quot;/home/foo&quot;&gt;To Foo&lt;/router-link&gt;&lt;/li&gt;    
    &lt;li&gt;&lt;router-link to=&quot;/home/baz&quot;&gt;To Baz&lt;/router-link&gt;&lt;/li&gt;    
    &lt;li&gt;&lt;router-link to=&quot;/home/bar&quot;&gt;To Bar&lt;/router-link&gt;&lt;/li&gt;    
  &lt;/ul&gt;    
  &lt;router-view&gt;&lt;/router-view&gt;
&lt;/div&gt;

const Home = {
  template: `&lt;div&gt;{{message}}&lt;/div&gt;`,
  data() {
    return {
      message: this.$route.params.name
    }
  }
}
  
const router = new VueRouter({
  mode:'history',
    routes: [
    {path: '/home', component: Home },
    {path: '/home/:name', component: Home }
  ]
})
  
new Vue({
  el: '#app',
  router
})
</code></pre>
<p>上段代码中，我们在路由构建选项 routes 中配置了一个动态路由 '/home/:name'，它们共用一个路由组件 Home，这代表他们复用 RouterView 。</p>
<p>当进行路由切换时，页面只会渲染第一次路由匹配到的参数，之后再进行路由切换时，message 是没有变化的。</p>
<p>解决方法：<br>
1.通过 watch 监听 $route 的变化。</p>
<pre><code>const Home = {
  template: `&lt;div&gt;{{message}}&lt;/div&gt;`,
  data() {
    return {
      message: this.$route.params.name
    }
  },
  watch:{
     '$route':function(){
        this.message = this.$route.params.name
     }
  }
}
...
new Vue({
  el: '#app',
  router
})
</code></pre>
<p>2.给<router-view> 绑定key属性，这样 Vue 就会认为这是不同的 <router-view>。</p>
<p>弊端：如果从 /home 跳转到 /user 等其他路由下，我们是不用担心组件更新问题的，所以这个时候 key 属性是多余的。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
   &lt;router-view :key=&quot;key&quot;&gt;&lt;/router-view&gt;
&lt;/div&gt;
</code></pre>
<h3 id="情况七变量通过赋值来定义的">情况七：变量通过赋值来定义的</h3>
<p>在 Vue 中有两种类型的变量：响应式变量和非响应式变量。</p>
<p>从后端获取的变量通常是响应式变量，也就是说它们会被 Vue 监测到变化并同步到页面上，如果你修改了这些响应式变量，页面会随之改变。</p>
<p>而通过赋值来定义的变量通常是非响应式变量，如果你修改了这些非响应式变量，Vue 并不会监测到它们的变化，所以页面不会改变。</p>
<p>如果你需要使一个非响应式变量变成响应式变量，可以使用 Vue.set 方法或者数组的变异方法（例如 push、splice 等）。</p>
<p>例1：Vue.set(对象,添加的key,属性值”)</p>
<pre><code>Vue.set
//这个是直接用在Vue身上的。例如: Vue.set(对象,添加的key,属性值”)
//常见于: xx.js文件中
//注意: js文件中，需要引入vue，比如: import Vue from vue
</code></pre>
<p>例2：this.$set(对象,添加的key',属性值)</p>
<pre><code>this.$set
//这个是用在vm或者vc实例身上的，比如vue文件中，this.$set(对象,添加的key',属性值)
//常见于: xx.vue文件中
</code></pre>
<p style="color: blue;">强制更新数据：this.$forceUpdate();</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSON.stringify()和JSON.parse()不能转换RegExp正则的问题]]></title>
        <id>https://nancy-svy.github.io/post/jsonstringifyhe-jsonparsebu-neng-zhuan-huan-regexp-zheng-ze-de-wen-ti/</id>
        <link href="https://nancy-svy.github.io/post/jsonstringifyhe-jsonparsebu-neng-zhuan-huan-regexp-zheng-ze-de-wen-ti/">
        </link>
        <updated>2023-10-17T07:50:46.000Z</updated>
        <content type="html"><![CDATA[<h5 id="前言">前言</h5>
<p>有一个对象如<code>{ formData: { name: '', phone: '' },regList: { phone: [{ pattern: &quot;/^1(3|4|5|6|7|8|9)\d{9}$/&quot;, message: '手机号格式错误' }] }}</code>用<code>JSON.stringfit()</code>转json字符串的时候发现转成了<code>{ formData: { name: '', phone: '' },regList: { phone: [{ pattern: {}, message: '手机号格式错误' }] }}</code>把正则转成了空对象，以至于用<code>JSON.parse()</code>时，发现把正则数据丢失了</p>
<h5 id="原因">原因</h5>
<p><code>JSON.stringify</code>会处理的几种类型： <code>String, Number, Boolean, null, Array, Object</code><br>
不会处理的几种类型：<code> Date, RegExp, undefined, Function</code></p>
<h5 id="解决方法">解决方法</h5>
<p>JSON.stringify()</p>
<pre><code>/**
 * json对象转json字符串
 * @param { Object } json json对象
 */
export function stringifyJson(json){
  return JSON.stringify(json, (k, v) =&gt; {
    // 将正则对象转换为正则字符串
    if(v instanceof RegExp){
      return v.toString();
    }
    return v;
  });
}
</code></pre>
<p>JSON.parse()</p>
<pre><code>/**
 * json字符串转json对象
 * @param { String } jsonStr json字符串
 */
export function parseJson(jsonStr){
  return JSON.parse(jsonStr, (k, v) =&gt; {
    try{
      // 将正则字符串转成正则对象
      if (eval(v) instanceof RegExp) {
        return eval(v);
      }
    }catch(e){ // nothing

    }
    return v;
  });
}
</code></pre>
<p>转载于<a href="https://blog.csdn.net/weixin_46656983/article/details/107188175">https://blog.csdn.net/weixin_46656983/article/details/107188175</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI 解决打包上线后icon图标偶尔乱码的问题]]></title>
        <id>https://nancy-svy.github.io/post/elementui-jie-jue-da-bao-shang-xian-hou-icon-tu-biao-ou-er-luan-ma-de-wen-ti/</id>
        <link href="https://nancy-svy.github.io/post/elementui-jie-jue-da-bao-shang-xian-hou-icon-tu-biao-ou-er-luan-ma-de-wen-ti/">
        </link>
        <updated>2023-09-15T01:17:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-背景">一、 背景</h3>
<p>本项目是以vue-element-admin作为基础，开发过程中，图标显示正常，知道打包到线上，页面偶尔性出现图标落马问题，再次刷新页面后，又显示正常</p>
<h3 id="二-现象">二、现象</h3>
<p>1、项目打包后，dist/css/app.xxx.css，发现所有的图标样式content的文本未正常显示了。例：el-icon-moon:before{content:“”}；<br>
2、虽然页面图标可以正常显示，但是用F12，会发现字体依然是乱码；</p>
<h3 id="原因">原因</h3>
<p>本项目使用的依赖包是sass，elementui使用的是node-sass</p>
<h3 id="解决方法">解决方法</h3>
<ol>
<li>方法一： 替换element-ui的样式文件<br>
element-variables.scss文件中的 @import &quot;~element-ui/packages/theme-chalk/src/index&quot;; 注释掉，然后在main.js把引入的element-variables.scss文件注释掉替换为 import 'element-ui/lib/theme-chalk/index.css'<br>
<img src="https://nancy-svy.github.io/post-images/1694741665999.png" alt="" loading="lazy"></li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1694741672048.png" alt="" loading="lazy"></figure>
<ol start="2">
<li>方法二：把sass版本升到1.39.0<br>
<img src="https://nancy-svy.github.io/post-images/1694741933651.png" alt="" loading="lazy"><br>
<img src="https://nancy-svy.github.io/post-images/1694741940572.png" alt="" loading="lazy"></li>
</ol>
<p>参考地址： <a href="https://blog.csdn.net/qq_37831545/article/details/132427740">https://blog.csdn.net/qq_37831545/article/details/132427740</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS Code 的常用快捷键]]></title>
        <id>https://nancy-svy.github.io/post/vs-code-de-chang-yong-kuai-jie-jian/</id>
        <link href="https://nancy-svy.github.io/post/vs-code-de-chang-yong-kuai-jie-jian/">
        </link>
        <updated>2023-09-07T02:58:56.000Z</updated>
        <content type="html"><![CDATA[<p>VS Code 的常用快捷键和插件</p>
<h5 id="一-vs-code-的常用快捷键">一、vs code 的常用快捷键</h5>
<p>1、注释：</p>
<p>a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/</p>
<p>b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u)</p>
<p>c) 多行注释：[alt+shift+A]</p>
<p>d) 多行注释：/**</p>
<p>2、移动行：alt+up/down</p>
<p>3、显示/隐藏左侧目录栏 ctrl + b</p>
<p>4、复制当前行：shift + alt +up/down</p>
<p>5、删除当前行：shift + ctrl + k</p>
<p>6、控制台终端显示与隐藏：ctrl + ~</p>
<p>7、查找文件/安装vs code 插件地址：ctrl + p</p>
<p>8、代码格式化：shift + alt +f</p>
<p>9、新建一个窗口 : ctrl + shift + n</p>
<p>10、行增加缩进: ctrl + [</p>
<p>11、行减少缩进: ctrl + ]</p>
<p>12、裁剪尾随空格(去掉一行的末尾那些没用的空格) : ctrl + shift + x</p>
<p>13、字体放大/缩小: ctrl + ( + 或 - )</p>
<p>14、拆分编辑器 : ctrl + 1/2/3</p>
<p>15、切换窗口 : ctrl + shift + left/right</p>
<p>16、关闭编辑器窗口 : ctrl + w</p>
<p>17、关闭所有窗口 : ctrl + k + w</p>
<p>18、切换全屏 : F11</p>
<p>19、自动换行 : alt + z</p>
<p>20、显示git : ctrl + shift + g</p>
<p>21、全局查找文件：ctrl + shift + f</p>
<p>22、显示相关插件的命令(如：git log)：ctrl + shift + p</p>
<p>23、选中文字：shift + left / right / up / down</p>
<p>24、折叠代码： ctrl + k + 0-9 (0是完全折叠)</p>
<p>25、展开代码： ctrl + k + j (完全展开代码)</p>
<p>26、删除行 ： ctrl + shift + k</p>
<p>27、快速切换主题：ctrl + k / ctrl + t</p>
<p>28、快速回到顶部 ： ctrl + home</p>
<p>29、快速回到底部 : ctrl + end</p>
<p>30、格式化选定代码 ：ctrl + k / ctrl +f</p>
<p>31、选中代码 ： shift + 鼠标左键</p>
<p>32、多行同时添加内容（光标） ：ctrl + alt + up/down</p>
<p>33、全局替换：ctrl + shift + h</p>
<p>34、当前文件替换：ctrl + h</p>
<p>35、打开最近打开的文件：ctrl + r</p>
<p>36、打开新的命令窗：ctrl + shift + c</p>
<h5 id="二-vs-code-的常用插件">二、vs code 的常用插件</h5>
<p>1、Auto Rename Tag 修改html标签，自动帮你完成尾部闭合标签的同步修改，和webstorm一样。</p>
<p>2、Auto Close Tag 自动闭合HTML标签</p>
<p>4、Beautiful 格式化代码的工具</p>
<p>5、Dash Dash是MacOS的API文档浏览器和代码段管理器</p>
<p>6、Ejs Snippets ejs 代码提示</p>
<p>7、ESLint 检查javascript语法错误与提示</p>
<p>8、File Navigator 快速查找文件</p>
<p>9、Git History(git log) 查看git log</p>
<p>10、Gulp Snippets 写gulp时用到，gulp语法提示。</p>
<p>11、HTML CSS Support 在HTML标签上写class智能提示当前项目所支持的样式</p>
<p>12、HTML Snippets 超级好用且初级的H5代码片段以及提示</p>
<p>13、Debug for Chrome 让vs code映射chrome的debug功能，静态页面都可以用vscode来打断点调试、配饰稍微复杂一点</p>
<p>14、Document this Js的注释模板</p>
<p>15、jQuery Code Snippets jquery提示工具</p>
<p>16、Html2jade html模板转pug模板</p>
<p>17、JS-CSS-HTML Formatter 格式化</p>
<p>18、Npm intellisense require 时的包提示工具</p>
<p>19、Open in browser 打开默认浏览器</p>
<p>20、One Dark Theme 一个vs code的主题</p>
<p>21、Path Intellisense 自动路径补全、默认不带这个功能</p>
<p>22、Project Manager 多个项目之间快速切换的工具</p>
<p>23、Pug(Jade) snippets pug语法提示</p>
<p>24、React Components 根据文件名创建反应组件代码。</p>
<p>25、React Native Tools reactNative工具类为React Native项目提供了开发环境。</p>
<p>26、Stylelint css/sass代码审查</p>
<p>27、Typings auto installer 安装vscode 的代码提示依赖库，基于typtings的</p>
<p>28、View In Browser 　默认浏览器查看HTML文件（快捷键Ctrl+F1可以修改）</p>
<p>29、Vscode-icons 让vscode资源目录加上图标、必备</p>
<p>30、VueHelper Vue2代码段（包括Vue2 api、vue-router2、vuex2）</p>
<p>31、Vue 2 Snippets vue必备vue代码提示</p>
<p>32、Vue-color vue语法高亮主题</p>
<p>33、Auto-Open Markdown Preview markdown文件自动开启预览</p>
<p>34、EverMonkey 印象笔记</p>
<p>35、atom one dark atom的一个高亮主题(个人推荐)</p>
<h5 id="三-终端控制台常用指令">三、终端控制台常用指令</h5>
<p>1.清除终端：</p>
<pre><code>clear
</code></pre>
<p>2.列出当前目录中的文件和文件夹：</p>
<pre><code>ls
</code></pre>
<p>3.切换到指定目录：：</p>
<pre><code>cd &lt;目录路径&gt;
</code></pre>
<p>4.返回上一级目录：</p>
<pre><code>cd ..
</code></pre>
<p>5.创建新文件夹：</p>
<pre><code>mkdir &lt;文件夹名&gt;
</code></pre>
<p>6.创建新文件：</p>
<pre><code>touch &lt;文件名&gt;
</code></pre>
<p>7.打开文件：</p>
<pre><code>code &lt;文件名&gt;
</code></pre>
<p>8.删除文件：</p>
<pre><code>rm &lt;文件名&gt;
</code></pre>
<p>9.删除文件夹：</p>
<pre><code>rm -r &lt;文件夹名&gt;
</code></pre>
<p>10.复制文件或文件夹：</p>
<pre><code>cp &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;
</code></pre>
<p>11.移动文件或文件夹：</p>
<pre><code>mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;
</code></pre>
<p>12.查看文件内容：</p>
<pre><code>cat &lt;文件名&gt;
</code></pre>
<p>13.查找文件：</p>
<pre><code>find &lt;目录路径&gt; -name &lt;文件名&gt;
</code></pre>
<p>14.查找文件内容：</p>
<pre><code>grep &lt;搜索内容&gt; &lt;文件名&gt;
</code></pre>
<p>15.压缩文件或文件夹：</p>
<pre><code>tar -czvf &lt;压缩文件名.tar.gz&gt; &lt;文件/文件夹&gt;
</code></pre>
<p>16.解压缩文件：</p>
<pre><code>tar -xzvf &lt;压缩文件名.tar.gz&gt;
</code></pre>
<p>17.退出或关闭当前正在运行的程序或进程：</p>
<pre><code>:q
</code></pre>
<h5 id="四-常用的电脑快捷键">四、常用的电脑快捷键</h5>
<p>1、ctrl + shift + delete 快速清除浏览器缓存</p>
<p>2、ctrl + alt + delete 快速进入任务管理器页面</p>
<p>3、window + L 快速锁定电脑</p>
<p>4、window + d 所有窗口最小化</p>
<p>5、 window + e 打开我的资源管理器(我的电脑)</p>
<p>6、 window + f 快速打开搜索窗口</p>
<p>7、 alt + tab 快速查看打开的应用与窗口</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 右键菜单(vue-contextmenujs)]]></title>
        <id>https://nancy-svy.github.io/post/vue-you-jian-cai-dan-vue-contextmenujs/</id>
        <link href="https://nancy-svy.github.io/post/vue-you-jian-cai-dan-vue-contextmenujs/">
        </link>
        <updated>2023-09-04T02:01:32.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>安装vue-context-menu</li>
</ol>
<pre><code>npm install vue-contextmenujs --save
或
yarn add vue-contextmenujs
</code></pre>
<ol start="2">
<li>在main.js中引用</li>
</ol>
<pre><code>import Contextmenu from &quot;vue-contextmenujs&quot;
Vue.use(Contextmenu);
</code></pre>
<ol start="3">
<li>给需要点击的元素绑定事件</li>
</ol>
<pre><code>// 在组件中调用显示菜单
 this.$contextmenu(options:MenuOptions);
// 鼠标点击或滚轮自动销毁, 也可手动销毁
 this.$contextmenu.destroy();

// 去除浏览器默认菜单
 event.preventDefault();
</code></pre>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot; @contextmenu.prevent=&quot;onContextmenu&quot;&gt;&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
    // 右键
    onContextmenu(event) {
        event.preventDefault()
        if(event.preventDefault){
            event.preventDefault()
        }else{
            window.event.returnValue = false // 兼容IE6、7、8
        }
        this.$contextmenu({
            items: [
                {
                    label: &quot;返回&quot;,
                    onClick: () =&gt; {
                        console.log(&quot;返回(B)&quot;);
                    }
                },
                { label: &quot;前进(F)&quot;, disabled: true },
                { label: &quot;重新加载(R)&quot;, divided: true, icon: &quot;el-icon-refresh&quot; },
                { label: &quot;另存为(A)...&quot; },
                { label: &quot;打印(P)...&quot;, icon: &quot;el-icon-printer&quot; },
                { label: &quot;投射(C)...&quot;, divided: true },
                {
                    label: &quot;使用网页翻译(T)&quot;,
                    divided: true,
                    minWidth: 0,
                    children: [
                        { label: &quot;翻译成简体中文&quot; },
                        { label: &quot;翻译成繁体中文&quot; }         
                    ]
                },
                {
                    label: &quot;截取网页(R)&quot;,
                    minWidth: 0,
                    children: [{
                            label: &quot;截取可视化区域&quot;,
                            onClick: () =&gt; {
                                this.message = &quot;截取可视化区域&quot;;
                            }
                        },
                        { label: &quot;截取全屏&quot; }
                    ]
                },
                { label: &quot;查看网页源代码(V)&quot;, icon: &quot;el-icon-view&quot; },
                { label: &quot;检查(N)&quot; }
            ],
            event,
            //x: event.clientX,
            //y: event.clientY,
            customClass: &quot;custom-class&quot;,
            zIndex: 3,
            minWidth: 230
        });
        return false;
    },
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 常用修饰符]]></title>
        <id>https://nancy-svy.github.io/post/vue-chang-yong-xiu-shi-fu/</id>
        <link href="https://nancy-svy.github.io/post/vue-chang-yong-xiu-shi-fu/">
        </link>
        <updated>2023-08-28T05:53:29.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>事件修饰符</li>
</ol>
<pre><code>.stop  阻止事件冒泡

.prevent   提交事件不再重复加载页面，阻止表单提交的默认行为

.capture   优先触发 用于捕获监听，冒泡是从内到外，捕获是从外到里

.self   只有自己能触发，子元素无法触发

.once   点击事件只触发一次

.native  使用时将被当成原生HTML标签看待
</code></pre>
<ol start="2">
<li>按键修饰符</li>
</ol>
<pre><code>@keyup  键盘抬起

@keydown  键盘按下

space=''      对键盘输入空格进行监听

按键码的别名：
      .enter 
      .tab 
      .delete 
      .esc 
      .space 
      .up 
      .down 
      .left 
      .right
</code></pre>
<ol start="3">
<li>表单修饰符</li>
</ol>
<pre><code>.lazy：在表单输入时不会马上显示在页面，而是等输入完成失去焦点时才会显示；

.trim：过滤表单输入时两边的空格；

.number：限制输入数字或将输入的数据转为数字
</code></pre>
<ol start="4">
<li>系统修饰符</li>
</ol>
<pre><code>@click.strl     点击+按住ctrl键，才能实现方法

类似的还有：
    .ctrl 
    .alt 
    .shift 
    .meta

.exact 修饰符    赋值其他修饰符进行精确匹配，@click.ctrl  必须只点击+按住ctrl键才会触发方法，另外还按住其他键不会触发
 用法  @click.ctrl.exact=&quot;&quot;
</code></pre>
<ol start="5">
<li>鼠标按键修饰符</li>
</ol>
<pre><code>主要是鼠标的左右键、滚轮
 @click.rigth 触发鼠标右击事件

 @click.rigth.prevent 右键生效，prevent可以取消右击的默认事件，顺序不可以乱
  
.middle触发滚轮事件
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ElementUI el-tree树形实现点击按钮tree节点上下移动]]></title>
        <id>https://nancy-svy.github.io/post/tree-move-up-and-down/</id>
        <link href="https://nancy-svy.github.io/post/tree-move-up-and-down/">
        </link>
        <updated>2023-08-22T06:57:13.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1692687647247.png" alt="" loading="lazy"></figure>
<p><em>图标</em></p>
<div style="display: flex; justify-content: space-evenly; background: #C0C4CC; margin-bottom: 20px; height: 60px;">
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1692687941408.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://nancy-svy.github.io/post-images/1692687947383.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://nancy-svy.github.io/post-images/1692687926239.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://nancy-svy.github.io/post-images/1692687932013.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://nancy-svy.github.io/post-images/1692687906222.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://nancy-svy.github.io/post-images/1692687914668.png" alt="" loading="lazy"></figure>
</div>
<pre><code>&lt;div class=&quot;treeBox&quot;  v-loading=&quot;treeLoading&quot;&gt;
    &lt;el-tree
        class=&quot;departmentTree&quot;
        :data=&quot;treeData&quot;
        node-key=&quot;id&quot;
        ref=&quot;tree&quot;
        highlight-current
        default-expand-all
        :current-node-key=&quot;selectedItemId&quot;
        :props=&quot;{children: 'children', label: 'label'}&quot;
        @node-click=&quot;nodeClick&quot;
    &gt;
        &lt;div class=&quot;custom-tree-node&quot; slot-scope=&quot;{ node, data }&quot;&gt;
            &lt;div class=&quot;iconFile&quot;&gt;&lt;/div&gt;
            &lt;template v-if=&quot;data.isEditing&quot;&gt;
                &lt;el-input class=&quot;nameInput&quot; v-model=&quot;data.label&quot; size=&quot;mini&quot; placeholder=&quot;输入名称&quot;&gt;
                    &lt;img slot=&quot;suffix&quot; class=&quot;iconSure&quot; src=&quot;@/assets/images/icon_sure.png&quot; alt=&quot;&quot; @click.stop=&quot;sureCreate(node, data)&quot;&gt;
                    &lt;img slot=&quot;suffix&quot; class=&quot;iconClose&quot; src=&quot;@/assets/images/icon_close.png&quot; alt=&quot;&quot; @click.stop=&quot;cancelCreate(node, data)&quot;&gt;
                &lt;/el-input&gt;
            &lt;/template&gt;
            &lt;template v-else&gt;
                &lt;span class=&quot;fileName&quot;&gt;{{ data.label }}&lt;/span&gt;
                &lt;!-- 三个点图片 --&gt;
                &lt;el-dropdown 
                    v-if=&quot;selectedItemId == data.id&quot; 
                    trigger=&quot;click&quot; 
                    @command=&quot;dropDownClick($event, data, node)&quot;
                &gt;
                    &lt;div class=&quot;el-dropdown-link&quot;&gt;
                        &lt;div class=&quot;iconMore&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;el-dropdown-menu slot=&quot;dropdown&quot; class=&quot;simu-dropdown&quot;&gt;
                        &lt;el-dropdown-item
                            v-for=&quot;item in nodeHandles&quot;
                            :key=&quot;item&quot;
                            :command=&quot;item&quot;
                        &gt;
                            {{item}}
                        &lt;/el-dropdown-item&gt;
                    &lt;/el-dropdown-menu&gt;
                &lt;/el-dropdown&gt;
                &lt;div v-else class=&quot;iconMore&quot;&gt;&lt;/div&gt;
            &lt;/template&gt;
        &lt;/div&gt;
    &lt;/el-tree&gt;
&lt;/div&gt;
</code></pre>
<pre><code>&lt;script&gt;
    export default {
        data(){
            return{
                treeLoading: false,
                // 列表
                treeData: [{
                    id: '1',
                    label: '一级 1',
                    isEditing: false,
                    children: [{
                        id: '2',
                        label: '二级 1-1',
                        isEditing: false,
                        children: [{
                            id: '11',
                            label: '三级 1-1-1',
                            isEditing: false,
                        }]
                    }]
                    }, {
                        id: '3',
                        label: '一级 2',
                        isEditing: false,
                        children: [{
                            id: '4',
                            label: '二级 2-1',
                            isEditing: false,
                            children: [{
                                id: '5',
                                label: '三级 2-1-1',
                                isEditing: false,
                            }]
                        }, {
                            id: '6',
                            label: '二级 2-2',
                            isEditing: false,
                            children: [{
                                id: '7',
                                label: '三级 2-2-1',
                                isEditing: false,
                            }]
                        }]
                    }, {
                        id: '8',
                        label: '一级 3',
                        isEditing: false,
                        children: [{
                            id: '9',
                            label: '二级 3-1',
                            isEditing: false,
                            children: [{
                                id: '10',
                                label: '三级 3-1-1',
                                isEditing: false,
                            }]
                        }, {
                            id: '11',
                            label: '二级 3-2',
                            isEditing: false,
                            children: [{
                                id: '12',
                                label: '三级 3-2-1',
                                isEditing: false,
                            }]
                        }
                    ]
                }],
                selectedItemId: '', // 选中的id
                nodeHandles: ['添加子部门','修改名称','删除','上移','下移'],
            }
        },
        mounted(){

        },
        methods:{
            // el-tree的节点点击事件
            nodeClick (event) {
                this.selectedItemId = event.id
                this.$nextTick(() =&gt; {
                    this.$refs.tree.setCurrentKey(this.selectedItemId)
                })
            },
            // 树节点操作
            dropDownClick(val, data, node){
                this.treeType = val
                if(val == '添加子部门'){
                    let addFind = (arr, data) =&gt; {
                        arr.forEach(item =&gt; {
                            if(item.id == data.id){
                                item.children.push({
                                    id: item.id + 's',
                                    isEditing: true,
                                    label: '',
                                    parentId: item.id
                                })
                            }else if(item.children &amp;&amp; item.children.length != 0){
                                addFind(item.children, data);
                            }
                        })
                    }
                    addFind(this.treeData, data)
                }else if(val == '修改名称'){
                    this.findTree(this.treeData, data.id);
                }else if(val == '删除'){
                    this.$message.success('删除成功')
                       
                }else if(val == '上移'){
                    let fatherChildren = node.parent.data.children || []
                    let selfIndex = fatherChildren.findIndex(a =&gt; a.id == data.id)
                    if (selfIndex) {
                        let reqData = {
                            id: data.id, 
                            changeId: fatherChildren[selfIndex - 1].id
                        }
                        console.log('上移', reqData)
                        
                    } else {
                        this.$message.warning('不能再上移了')
                    }
                }else if(val == '下移'){
                    let fatherChildren = node.parent.data.children || []
                    let selfIndex = fatherChildren.findIndex(a =&gt; a.id == data.id)
                    if (selfIndex == fatherChildren.length - 1) {
                        this.$message.warning('不能再下移了')
                    } else {
                        let downData = {
                            id: data.id, 
                            changeId: fatherChildren[selfIndex + 1].id
                        }
                        console.log('下移', downData)
                        
                    }
                }
            },
            // 根据id 修改isEditing值
            findTree(arr, id){
                arr.forEach((item) =&gt; { 
                    if(item.id == id){        
                        item.isEditing = !item.isEditing;
                        return item;
                    }else if(item.children &amp;&amp; item.children.length != 0){
                        this.findTree(item.children, id);                        
                    }                   
                })
            },
            // 确认添加、修改子级
            sureCreate(node, data){
                if(this.treeType == '添加子部门'){
                    this.findTree(this.treeData, data.id)
                    this.$message.success('添加成功')

                }else if(this.treeType == '修改名称'){
                    this.findTree(this.treeData, data.id)
                    this.$message.success('修改成功')
                    
                }
            },
            // 取消添加、修改子级
            cancelCreate(node, data){
                if(this.treeType == '添加子部门'){
                    let find = (arr, id) =&gt; {
                        arr.forEach((item, index) =&gt; { 
                            if(item.id == id){   
                                console.log(item.id ) 
                                console.log(id )  
                                arr.splice(index, 1)
                            }else if(item.children &amp;&amp; item.children.length != 0){
                                find(item.children, id);                        
                            }                   
                        })
                    }
                    find(this.treeData, data.id)
                }else if(this.treeType == '修改名称'){
                    this.findTree(this.treeData, data.id)
                }
            },
        }
    }
&lt;/script&gt;
</code></pre>
<pre><code>&lt;style lang=&quot;scss&quot;&gt;
.treeBox{
    .departmentTree {
        .el-tree-node__content {
            height: 32px;
            &amp;:hover{
                background: #EBEDF0;
            }
        }
        .el-tree-node.is-current {
            &amp;&gt;.el-tree-node__content {
                background-color: #02C2B0;
                .iconFile {
                    background-image: url('./assets/images/organization-default.png');
                }
                .iconMore {
                    opacity: 1 !important;
                    background-image: url('./assets/images/icon_more_active.png');
                }
                .fileName,.el-tree-node__expand-icon {
                    color: #fff;
                }
                .el-tree-node__expand-icon.is-leaf{
                    color: transparent;
                    cursor: default;
                }
            }
        }
        .custom-tree-node {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: space-between;
            .iconFile {
                width: 14px;
                height: 14px;
                margin-right: 6px;
                background-image: url('./assets/images/organization.png');
                background-repeat: no-repeat;
                background-size: cover;
            }
            .iconSure {
                margin: 0 6px;
            }
            .iconClose {
                margin-right: 11px;
            }
            .nameInput {
                flex: 1;
                background: #fff;
                input {
                    width: calc(100% - 56px);
                    height: 22px;
                    padding: 0 4px;
                    background: #EBEBEB;
                    border-radius: 0;
                    border: none;
                } 
                .el-input__suffix {
                    right: 0;
                }
                .iconClose{
                    margin-right: 0;
                }
            }
            .fileName {
                flex: 1;
                line-height: 22px;
                font-size: 14px;
                color: #303133;
            }
            .iconMore {
                opacity: 0;
                width: 2px;
                height: 10px;
                margin: 6px 12px;
                background-image: url('./assets/images/icon_more.png');
                background-repeat: no-repeat;
                background-size: cover;
            }
        }
    }
    .el-dropdown-menu__item:hover {
        background-color: #7BDFD6!important;
        color: #fff!important;
    }
}
.simu-dropdown{
    li:hover{
        color: #fff!important;
        background: #7BDFD6!important;
    }
}

&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue  在发布阶段移除所有的console.log()输出语句]]></title>
        <id>https://nancy-svy.github.io/post/removeConsoleLog/</id>
        <link href="https://nancy-svy.github.io/post/removeConsoleLog/">
        </link>
        <updated>2023-07-21T02:44:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="第一种方法">第一种方法</h3>
<ol>
<li>下载插件</li>
</ol>
<pre><code>npm install babel-plugin-transform-remove-console --save-dev
</code></pre>
<ol start="2">
<li>修改bable.config.js</li>
</ol>
<pre><code>module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ],
  'env': {
    'development': {
      'plugins': ['dynamic-import-node']
    },
    // 增加以下配置编译时可以去掉console.log等
    'production': {
      'plugins': [
        [
          'transform-remove-console',
          {
            // 排除项
            'exclude': ['error', 'warn']
          }
        ]
      ]
    }
  }
}
</code></pre>
<h3 id="第二种方法">第二种方法</h3>
<p>vue-element-admin 打包后去除console</p>
<ol>
<li>下载插件</li>
</ol>
<pre><code>npm install terser-webpack-plugin --save-dev
</code></pre>
<ol start="2">
<li>在vue.config.js中加入以下代码</li>
</ol>
<pre><code>module.exports = {
  publicPath: '/',         
  outputDir: 'dist',
  assetsDir: 'static',
  // lintOnSave: process.env.NODE_ENV === 'development',
  lintOnSave: false,
  productionSourceMap: false,
  configureWebpack: {
    name: name,
    resolve: {
      alias: {
        '@': resolve('src')
      }
    }
  },
  // 移除console.log
  configureWebpack: config =&gt; {
    if (process.env.NODE_ENV === 'production') {
      config.optimization.minimizer[0].options.terserOptions.compress.warnings = false
      config.optimization.minimizer[0].options.terserOptions.compress.drop_console = true
      config.optimization.minimizer[0].options.terserOptions.compress.drop_debugger = true
      config.optimization.minimizer[0].options.terserOptions.compress.pure_funcs = ['console.log']
    }
  },

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue + iframe标签添加请求头]]></title>
        <id>https://nancy-svy.github.io/post/iframeAddRequestHeader/</id>
        <link href="https://nancy-svy.github.io/post/iframeAddRequestHeader/">
        </link>
        <updated>2023-07-10T12:33:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;iframe id=&quot;iframe&quot; src=&quot;&quot; /&gt;
</code></pre>
<pre><code>setTimeout(() =&gt; {
  var iframe = document.querySelector(&quot;#iframe&quot;);
  this.populateIframe(iframe, [[&quot;Authorization&quot;, &quot;Bearer &quot; + getToken()]]);
}, 0);
</code></pre>
<pre><code>  methods: {
    populateIframe(iframe, headers) {
      var xhr = new XMLHttpRequest();
      xhr.open(&quot;GET&quot;, 'http：localhost:8080/xxx');
      xhr.responseType = &quot;blob&quot;;
      headers.forEach((header) =&gt; {
        xhr.setRequestHeader(header[0], header[1]);
      });
      xhr.onreadystatechange = () =&gt; {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
              console.log(xhr)
            // 这个样式显示有问题
            // iframe.src = URL.createObjectURL(xhr.response);  
            iframe.src = xhr.responseURL;
          }
        }
      };
      xhr.send();
    },
  }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信小程序 扫描设备二维码携带参数跳转到微信小程序指定页面（微信小程序二维码配置规则）]]></title>
        <id>https://nancy-svy.github.io/post/configure-regular-link-QR-code-rules/</id>
        <link href="https://nancy-svy.github.io/post/configure-regular-link-QR-code-rules/">
        </link>
        <updated>2023-07-06T01:21:08.000Z</updated>
        <content type="html"><![CDATA[<p><code style="color: #c7254e; background-color: #f9f2f4; border-radius: 2px;}">***1:打开微信公众平台： https://mp.weixin.qq.com 扫码登录***</code></p>
<h2 id="2-点击左侧边栏开发-开发管理-开发设置-服务器域名">2. 点击左侧边栏开发 =&gt; 开发管理 =&gt; 开发设置 =&gt; 服务器域名</h2>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1695173240463.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1695173330770.png" alt="" loading="lazy"></figure>
<h2 id="3-点击左侧边栏开发-开发管理-开发设置-扫普通连接二维码开发小程序">3. 点击左侧边栏开发 =&gt; 开发管理 =&gt; 开发设置 =&gt; 扫普通连接二维码开发小程序</h2>
<figure data-type="image" tabindex="3"><img src="https://nancy-svy.github.io/post-images/1695173477966.png" alt="" loading="lazy"></figure>
<p>点击添加按钮进入此界面<br>
<img src="https://nancy-svy.github.io/post-images/1695174166728.png" alt="" loading="lazy"></p>
<p>点击保存，保存后自动跳转到这里<br>
<img src="https://nancy-svy.github.io/post-images/1695174244895.png" alt="" loading="lazy"></p>
<p>以上二维码配置规则完毕</p>
<p>打开 百度搜索草料 <a href="https://cli.im/">二维码生成器</a> https://cli.im/二维码生成工具，输入配置好的二维码规则即可生成二维码，</p>
]]></content>
    </entry>
</feed>