<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>Gridea</title>
    <updated>2023-04-14T10:06:06.287Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[uniapp 引入外部字体]]></title>
        <id>https://nancy-svy.github.io/post/importFontFile/</id>
        <link href="https://nancy-svy.github.io/post/importFontFile/">
        </link>
        <updated>2023-04-14T09:50:09.000Z</updated>
        <content type="html"><![CDATA[<p>uni-app 支持使用字体图标，请仔细阅读官方文档：<a href="https://uniapp.dcloud.net.cn/tutorial/syntax-css.html#%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87">地址</a></p>
<h3 id="一-当字体文件小于40kb时uni-app-会自动将其转化为-base64-格式直接引入即可">一、当字体文件小于40kb时，uni-app 会自动将其转化为 base64 格式，直接引入即可</h3>
<pre><code>@font-face {
     font-family: xxxxx;
     src: url('~@/static/xxxx.ttf');
 }
</code></pre>
<h3 id="当字体文件大于40kb时需要自己转化成base64格式">当字体文件大于40kb时，需要自己转化成base64格式：</h3>
<h6 id="1-将下载好的字体文件转换成base64格式转换地址">1、将下载好的字体文件转换成base64格式，<a href="https://transfonter.org/">转换地址</a></h6>
<p><img src="https://nancy-svy.github.io/post-images/1681464749478.png" alt="" loading="lazy"><br>
####### 步骤：<br>
<img src="https://nancy-svy.github.io/post-images/1681465633635.webp" alt="" loading="lazy"></p>
<ol>
<li>点击【Add fonts】,选择文件</li>
<li>打开【Base64 encode】</li>
<li>点击【Covert】</li>
<li>点击【Download】下载文件并解压，打开 stylesheet.css 文件，复制代码</li>
</ol>
<h6 id="2-转换完成后下载文件解压后将这三个文件放入项目中的static目录下">2、转换完成后，下载文件，解压后将这三个文件放入项目中的static目录下:</h6>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1681464757016.png" alt="" loading="lazy"></figure>
<h6 id="3-在appvue中引入该文件">3、在App.vue中引入该文件</h6>
<pre><code>@import url(&quot;./static/fonts/stylesheet.css&quot;);
</code></pre>
<h6 id="4-在代码中正常使用即可">4、在代码中正常使用即可：</h6>
<pre><code>例如：font-family: YOUSHEhaoshenti;
</code></pre>
<h3 id="或者在阿里巴巴矢量图标图-地址-中查找需要下载的字体文件">或者在阿里巴巴矢量图标图 <a href="https://www.iconfont.cn/">地址</a> 中查找需要下载的字体文件</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[chrome问题]]></title>
        <id>https://nancy-svy.github.io/post/chromeQuestion/</id>
        <link href="https://nancy-svy.github.io/post/chromeQuestion/">
        </link>
        <updated>2023-04-12T01:05:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题">问题：</h2>
<pre><code>    打开谷歌浏览器提示：您使用的是不受支持的命令行标记:–extensions-on-chrome-urls。稳定性和安全性会有所下降。
</code></pre>
<h2 id="问题分析">问题分析：</h2>
<pre><code>    出现该提示是因为在你非官方安装插件之后
</code></pre>
<h2 id="解决办法">解决办法：</h2>
<pre><code>    在Chrome导航栏中输入[Experiments](chrome://flags ),
    搜索栏搜索【Extensions on chrome:// URLs】网址下的扩展程序，然后选择Disabled。     
</code></pre>
<p><img src="https://nancy-svy.github.io/post-images/1681261731032.png" alt="" loading="lazy"><br>
disabled 关闭<br>
enabled 启用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[压缩包添加密码]]></title>
        <id>https://nancy-svy.github.io/post/compressedPacketEncryption/</id>
        <link href="https://nancy-svy.github.io/post/compressedPacketEncryption/">
        </link>
        <updated>2023-04-12T00:44:30.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>压缩文件：找到需要压缩的文件/文件夹，右击文件，点击添加到压缩文件，开始压缩。</li>
<li>添加密码：进入压缩界面，点击添加密码</li>
<li>输入密码：进入添加密码界面后，输入密码</li>
<li>开始压缩：密码设置完成后，点击立即压缩，开始压缩文件并加密</li>
<li>压缩成功：我们可以看到压缩文件和原文件都在，说明压缩成功了。</li>
<li>解压：右击压缩文件，点击解压到，开始解压</li>
<li>需要密码：出现解压需要密码，说明密码设置成功。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[百度网盘设置提取码]]></title>
        <id>https://nancy-svy.github.io/post/networkDiskExtractionCode/</id>
        <link href="https://nancy-svy.github.io/post/networkDiskExtractionCode/">
        </link>
        <updated>2023-04-11T09:20:49.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>打开百度网盘，上传想要分享的文件<br>
<img src="https://nancy-svy.github.io/post-images/1681205379490.jpg" alt="" loading="lazy"></li>
<li>然后找到文件，选中文件，在上方会出现【分享】<br>
<img src="https://nancy-svy.github.io/post-images/1681205384472.jpg" alt="" loading="lazy"><br>
或者右击要分享的文件，选择【分享】<br>
<img src="https://nancy-svy.github.io/post-images/1681205391766.jpg" alt="" loading="lazy"></li>
<li>在打开的窗口中，分享形式下点击【加密】，然后点击【创建链接】<br>
<img src="https://nancy-svy.github.io/post-images/1681205396627.jpg" alt="" loading="lazy"></li>
<li>就可以得到文件的分享的地址和提取码了，点击【复制链接及密码】<br>
<img src="https://nancy-svy.github.io/post-images/1681205403056.jpg" alt="" loading="lazy"></li>
<li>系统提示复制成功，再将复制好的内容发送给你的好友，就可以了<br>
<img src="https://nancy-svy.github.io/post-images/1681205492242.jpg" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用GitHub发布个人网站]]></title>
        <id>https://nancy-svy.github.io/post/publishPersonalWebsite/</id>
        <link href="https://nancy-svy.github.io/post/publishPersonalWebsite/">
        </link>
        <updated>2023-04-10T08:48:38.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>进入github, 点击Create repository创建一个仓库<br>
<img src="https://nancy-svy.github.io/post-images/1681117633780.png" alt="" loading="lazy"></li>
<li>建立自己的库<br>
<img src="https://nancy-svy.github.io/post-images/1681117640648.png" alt="" loading="lazy"></li>
<li>点击uploading an existing file 上传一个已有的文件，或将文件拖动进入<br>
<img src="https://nancy-svy.github.io/post-images/1681117646631.png" alt="" loading="lazy"></li>
<li>点击commit changes 上传<br>
<img src="https://nancy-svy.github.io/post-images/1681117652676.png" alt="" loading="lazy"></li>
<li>点击 settings<br>
<img src="https://nancy-svy.github.io/post-images/1681117663992.png" alt="" loading="lazy"></li>
<li>选择左侧pages菜单，source中选择分支选择main，点击save<br>
<img src="https://nancy-svy.github.io/post-images/1681117670948.png" alt="" loading="lazy"></li>
<li>刷新一下将出现你的静态访问网址（需要等待几分钟）</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[添加萌国ICP备案号]]></title>
        <id>https://nancy-svy.github.io/post/mengGuoICPPutOnRecord/</id>
        <link href="https://nancy-svy.github.io/post/mengGuoICPPutOnRecord/">
        </link>
        <updated>2023-04-07T07:28:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言🍭</h1>
<ul>
<li>使用国外域名部署网站的站长</li>
<li>已经在国内备案，想再添加一个备案信息的站长</li>
</ul>
<p>因为国内互联网监管要求，购买国内的域名需要进行ICP备案，本小站也是国内购买的域名，当时网站备案花费了9天时间，流程相对严谨，不同地区的备案时间各有差异，一般不超过30天即可完成备案。当网站备案通过后需要将备案号添加到页脚中，以便网站的规范化运作。</p>
<p>而在国外域名网站购买的域名不需要经过备案就可以让国内用户访问网站，相对而言比较快速上手，但由于没有经过备案这一流程，网站没有备案号，本文就针对这种情况给出解决方法，通过第三方网站选择一个备案号码填入到页脚。</p>
<h1 id="萌国萌站平台">萌国萌站平台🐣</h1>
<p>萌国ICP备案是第三方的备案平台，站长在注册通过后选择一个备案号码，然后将生成的备案链接添加到网站的页脚标签页中。</p>
<h1 id="添加教程">添加教程✅</h1>
<ul>
<li>
<p>点击登录， 选择加入<br>
萌国ICP主页  https://icp.gov.moe/aboutus.php<br>
<img src="https://nancy-svy.github.io/post-images/1680853010730.png" alt="" loading="lazy"></p>
</li>
<li>
<p>点击橙色进入选择一个喜欢的号码<br>
<img src="https://nancy-svy.github.io/post-images/1680853018966.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1680853027028.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>选择好后填写常用邮箱，验证账号，并填写好网站名字和网站地址，大概5分钟时间完成验证<br>
<img src="https://nancy-svy.github.io/post-images/1680853041573.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1680853062611.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>将刚才页面的代码填入到网站页脚页面，⚠️每个人申请的都不同<br>
<a href="https://icp.gov.moe/?keyword=20220176" target="_blank">萌ICP备20220176号</a><br>
进入主题编辑中template/common/footer.ftl,在footer里任意位置添加上述获取到的代码：<br>
示范代码</p>
  <p>
  <a href="https://icp.gov.moe/?keyword=20220176" target="_blank">萌ICP备20220176号</a>
  </p>
</li>
</ul>
<h1 id="效果">效果🔅</h1>
<p>页脚效果<br>
<img src="https://nancy-svy.github.io/post-images/1680853129791.png" alt="" loading="lazy"></p>
<p>点击效果<br>
<img src="https://nancy-svy.github.io/post-images/1680853139680.png" alt="" loading="lazy"></p>
<h1 id="小结">小结🔖</h1>
<p>以上就是添加萌国ICP备案信息的教程，如果后续需要更改网站信息，可以点击自己萌国ICP打开关于页面，找到下面的修改填写自己的萌国ID加绑定的邮箱即可完成修改。<br>
<img src="https://nancy-svy.github.io/post-images/1680853150947.png" alt="" loading="lazy"></p>
<h1 id="致谢">致谢🎈</h1>
<p>萌ICP备案   https://icp.gov.moe/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea快速上手]]></title>
        <id>https://nancy-svy.github.io/post/grideaGetStartedQuickly/</id>
        <link href="https://nancy-svy.github.io/post/grideaGetStartedQuickly/">
        </link>
        <updated>2023-04-07T06:28:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>先给大家简单的介绍一下吧，Gridea是一个静态博客写作客户端，相较于其他主流的静态博客，比如之前介绍过的hexo，它更简单更容易上手，只需要了解一点点Markdown的语法进行写作就可以，这就意味着哪怕是完全没有接触过这方面的人也能够在短短几分钟之内搭建一个自己的博客。 那么下面就是具体操作的步骤！</p>
<h3 id="一-确定托管代码的平台">💻 一、确定托管代码的平台</h3>
<p>Gridea是可以将博客部署到Github、Coding和自己的服务器上的。但是很明显，服务器要花钱，选择建静态博客的大部分人，还是因为不想花非刚需的钱去买主机或者服务器。而Coding新版也是要收费的，虽然也不贵而且还有六个月的试用期，但是想要用它的pages服务还需要实名认证，这也相对繁琐。因此我推荐将博客部署到github。往下的教程也是以Github为例。*</p>
<h3 id="二-注册github账号并创建仓库">🍀 二、注册Github账号并创建仓库</h3>
<p>🤝 1、如果你没有Github的账号，那么可以进入官网开始注册（注意一下用户名的填写，如果不使用自定义域名，用户名将会是你的Github分配给你的域名，比如你的用户名为xxx，那么你的域名会是xxx.github,io）。</p>
<p>⛳️ Github官网：https://github.com</p>
<p>🤝 2、新建仓库，如图所示，点击右上角的“+”号，然后点击“New respository&quot;即可。<br>
<img src="https://nancy-svy.github.io/post-images/1680851882561.png" alt="" loading="lazy"><br>
🤝 3、配置仓库<br>
这里推荐仓库名填写格式为：”用户名.github.io“。<br>
然后点击”Add a README file“，再点击”Create repository“即可。<br>
<img src="https://nancy-svy.github.io/post-images/1680851895583.png" alt="" loading="lazy"></p>
<p>🤝 4、点击仓库的”Settings“，进入”pages“。<br>
<img src="https://nancy-svy.github.io/post-images/1680851942771.png" alt="" loading="lazy"><br>
<img src="https://nancy-svy.github.io/post-images/1680851950892.png" alt="" loading="lazy"><br>
🤝 你就会看到你的域名已经正常显示出来了。<br>
<img src="https://nancy-svy.github.io/post-images/1680851958169.png" alt="" loading="lazy"><br>
<img src="https://nancy-svy.github.io/post-images/1680851964605.png" alt="" loading="lazy"></p>
<h3 id="三-创建github-token">🌁 三、创建Github token</h3>
<p>🚲 1、点击右上角头像的settings，选择菜单最下面的developer settings。<br>
<img src="https://nancy-svy.github.io/post-images/1680851972305.png" alt="" loading="lazy"></p>
<p>🚲 2、点击”Personal acces tokens“，再点击”Generate new token“。<br>
<img src="https://nancy-svy.github.io/post-images/1680852099339.png" alt="" loading="lazy"></p>
<p>🚲 3、Note备注可以随便写，这里写个”Griddea“，然后选择”No expiration“，再把”repo“打上✓。<br>
<img src="https://nancy-svy.github.io/post-images/1680852106842.png" alt="" loading="lazy"></p>
<p>然后下拉页面，选择”Generate token“创建token。<br>
<img src="https://nancy-svy.github.io/post-images/1680852113727.png" alt="" loading="lazy"></p>
<p>🚲 4、复制token，记得保存好，因为只显示一次，忘了又得重新申请。<br>
<img src="https://nancy-svy.github.io/post-images/1680852119865.png" alt="" loading="lazy"></p>
<h3 id="四-配置gridea">🌱 四、配置Gridea</h3>
<p>准备工作都完成了接下来是配置Gridea。</p>
<p>⛳️ Gridea官网： https://gridea.dev</p>
<p>✈️ 1、进入官网，根据你的电脑系统下载好Gridea客户端，这里以windows为例。<br>
<img src="https://nancy-svy.github.io/post-images/1680852193850.png" alt="" loading="lazy"><br>
你也可以直接在下方链接下载，因为在GIthub上下载是比较慢的。<br>
推荐国内Gitee下载源：https://gitee.com/fehey/gridea/releases/v0.9.2<br>
<img src="https://nancy-svy.github.io/post-images/1680852210292.png" alt="" loading="lazy"></p>
<p>✈️ 2、安装好后，打开Gridea的”远程“配置你的Github信息，然后保存，如下图。<br>
<img src="https://nancy-svy.github.io/post-images/1680852215287.png" alt="" loading="lazy"></p>
<p>然后点击左下角的检测远程链接，如果配置没问题，那就会显示远程连接成功。<br>
如果连接失败，还请回到上述步骤自行检查。<br>
<img src="https://nancy-svy.github.io/post-images/1680852221690.png" alt="" loading="lazy"></p>
<p>✈️ 3、编辑文章。<br>
点击文章，点击右上角的”+“号即可。<br>
<img src="https://nancy-svy.github.io/post-images/1680852311361.png" alt="" loading="lazy"><br>
编辑完成后，点击右上角保存即可。<br>
<img src="https://nancy-svy.github.io/post-images/1680852303470.png" alt="" loading="lazy"></p>
<p>✈️ 4、预览和同步<br>
点击预览，本地预览后没问题即可点击”同步“推送至github。<br>
<img src="https://nancy-svy.github.io/post-images/1680852293208.png" alt="" loading="lazy"></p>
<p>✈️ 当然，你还可以继续配置其他信息，比如自己的网站名字，头像，页脚，图标，加评论等等。<br>
还可以买个域名来自定义github的域名。<br>
<img src="https://nancy-svy.github.io/post-images/1680852283579.png" alt="" loading="lazy"></p>
<h3 id="五-更换主题">🌉 五、更换主题</h3>
<p>🗼在 https://gridea.dev/themes/ ，寻找你喜欢的主题，然后点击【下载文件】，下载后解压<br>
🗼 点击客户端里的【配置】，找到【 站点源文件路径 】，打开路径。退出Gridea客户端。<br>
🗼 选择【themes】文件夹，把刚刚解压的主题文件夹复制过来，重新打开Gridea客户端，打开【主题】，选择主题，滚动下鼠标，选中刚刚复制进去的主题名称，保存。<br>
🗼 点击预览，即可看到新的主题页面。</p>
<h1 id="六-开启gitalk评论系统">💬 六、开启Gitalk评论系统</h1>
<p>🏷️ 在https://github.com/settings/applications/new注册应用。<br>
<img src="https://nancy-svy.github.io/post-images/1681097397374.png" alt="" loading="lazy"><br>
🏷️ 填写后点击【Register application】，会得到【Client ID】和【Client Secret】。<br>
<img src="https://nancy-svy.github.io/post-images/1681097290262.jpg" alt="" loading="lazy"><br>
🏷️ 打开Gridea客户端 -&gt; 远程 -&gt; 评论配置 -&gt; 平台（选中Gitalk）-&gt; 按照下面提示填写-&gt;<br>
<img src="https://nancy-svy.github.io/post-images/1681097404152.png" alt="" loading="lazy"><br>
🏷️ 填完后点击【保存】-&gt;【同步】。<br>
📋 稍等一会儿后，在浏览器打开域名，会看到文章底下显示“未找到相关的issues进行评论xxx”，点击【使用GitHub登陆】，进行授权。</p>
<h3 id="六-基本操作">📝 六、基本操作</h3>
<ol>
<li>
<p>输入文章标题<br>
(1.)使用 = 和 - 标记一级和二级标题<br>
注意：由于分割线也是 “---”， 因此在使用分割线时，一定要空一行，不然会把上方的文字识别为第二级标题<br>
(2.)使用#号标记<br>
在行首插入 1 到 6 个 # 再加空格，对应到标题 1 到 6级<br>
（注意：#号后面一定要有一个空格）</p>
</li>
<li>
<p>输入无序列表   - 无序列表，数字列表    1. 数字列表</p>
</li>
<li>
<p>输入代码虚假的代码,(虚假的代码左右各一个&quot;`&quot;)输入代码段虚假的代码段.(虚假的代码段,左右各有3个```)</p>
</li>
<li>
<p>输入数学公式: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">数</mi><mi mathvariant="normal">学</mi><mi mathvariant="normal">公</mi><mi mathvariant="normal">式</mi></mrow><annotation encoding="application/x-tex">数学公式</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">学</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">式</span></span></span></span>.</p>
</li>
<li>
<p>插入图片: 直接拖入以 【 <img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片名称" loading="lazy"> 】 的形式给出</p>
</li>
<li>
<p>插入链接: 以【<a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a>】的形式给出</p>
</li>
<li>
<p>字体<br>
（1）<em>斜体文本</em><br>
（2）<em>斜体文本</em><br>
（3）<strong>粗体文本</strong><br>
（4）<strong>粗体文本</strong><br>
（5）<em><strong>粗斜体文本</strong></em><br>
（6）<em><strong>粗斜体文本</strong></em></p>
</li>
<li>
<p>分割线<br>
在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>
<hr>
<hr>
</li>
<li>
<p>删除线<br>
<s>删除线</s><br>
<u>下划线</u><br>
脚注[^脚注]</p>
</li>
<li>
<p>列表<br>
（1）无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容<br>
（2）列表嵌套<br>
列表嵌套只需在子列表中的选项前面添加四个空格即可<br>
（3）在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：<br>
另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推<br>
（4）区块中使用列表<br>
列表中使用区块<br>
如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决小程序自定义tabbar在ios手机上无法显示问题]]></title>
        <id>https://nancy-svy.github.io/post/unableToDisplay/</id>
        <link href="https://nancy-svy.github.io/post/unableToDisplay/">
        </link>
        <updated>2023-02-21T06:46:39.000Z</updated>
        <content type="html"><![CDATA[<p><strong>在custom-tab-bar文件夹中，index.js文件中，</strong></p>
<pre><code>Component({
  data: {
    selected: 0,
    color: &quot;#B2B2B2&quot;,
    selectedColor: &quot;#FF502F&quot;,
	allList: [{
		// cheguanyuan
		vehicleControllerList: [{
			pagePath: &quot;/pages/home/home&quot;,
			iconPath: &quot;/static/images/tab0_icon.png&quot;,
			selectedIconPath: &quot;/static/images/tab0_active.png&quot;,
			text: &quot;首页&quot;
		}, {
			pagePath: &quot;/pages/deliverGoods/deliverGoods&quot;,
			iconPath: &quot;/static/images/tab1.png&quot;,
			selectedIconPath: &quot;/static/images/tab1.png&quot;,
			text: &quot;发货&quot;
		},{
			pagePath: &quot;/pages/mine/mine&quot;,
			iconPath: &quot;/static/images/tab2_icon.png&quot;,
			selectedIconPath: &quot;/static/images/tab2_active.png&quot;,
			text: &quot;我的&quot;
		}],
		// siji
		driverList: [{
			pagePath: &quot;/pages/home/home&quot;,
			iconPath: &quot;/static/images/tab0_icon.png&quot;,
			selectedIconPath: &quot;/static/images/tab0_active.png&quot;,
			text: &quot;首页&quot;
		}, {
			pagePath: &quot;/pages/mine/mine&quot;,
			iconPath: &quot;/static/images/tab2_icon.png&quot;,
			selectedIconPath: &quot;/static/images/tab2_active.png&quot;,
			text: &quot;我的&quot;
		}]
	}],
	list: []
  },
  attached() {
	  
	if(wx.getStorageSync('userInfo')){
		const role = wx.getStorageSync('userInfo').role
		if(role == 2){ // 车管员
			this.setData({
				list: this.data.allList[0].vehicleControllerList
			})
		}else if(role == 3){ // 司机
			this.setData({
				list: this.data.allList[0].driverList
			})
		}
	}
  },
  methods: {
    switchTab(e) {
      const data = e.currentTarget.dataset
      const url = data.path
	  this.setData({
	    selected: data.index
	  })
      wx.switchTab({url})
    },

	// 初始化赋值
	init() {
		if(wx.getStorageSync('userInfo')){
			const role = wx.getStorageSync('userInfo').role
			if(role == 2){ // 车管员
				this.setData({
					list: this.data.allList[0].vehicleControllerList
				})
			}else if(role == 3){ // 司机
				this.setData({
					list: this.data.allList[0].driverList
				})
			}
		}
	}
  }
})
 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pnpm和vite]]></title>
        <id>https://nancy-svy.github.io/post/pnpmAndVite/</id>
        <link href="https://nancy-svy.github.io/post/pnpmAndVite/">
        </link>
        <updated>2023-02-09T09:14:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="pnpm">pnpm</h3>
<pre><code>pnpm 节约磁盘空间并提升安装速度

pnpm import package-lock.json

运行   pnpm dev

用于安装项目所有依赖（忽略） pnpm install 
 
</code></pre>
<h3 id="vite">vite</h3>
<pre><code>vite 前端构建工具

Vite 是 vue 的作者尤雨溪在开发 vue3.0 的时候开发的一个 web 开发构建工具。由于其原生 ES 模块导入方式，可以实现闪电般的冷服务器启动。
 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[仿美团选择预计送达时间组件]]></title>
        <id>https://nancy-svy.github.io/post/deliveryTime/</id>
        <link href="https://nancy-svy.github.io/post/deliveryTime/">
        </link>
        <updated>2023-02-03T07:40:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="readmemd">README.md</h2>
<h3 id="仿美团选择预送达时间组件delivery-time-op-点餐-时间选择-送达时间">仿美团选择预送达时间组件delivery-time-op 点餐 时间选择 送达时间</h3>
<p>[^简单实用的选择时间组件，源码简单易懂注释清楚，可根据需求随意更改方案]</p>
<h6 id="引用组件">引用组件</h6>
<pre><code>import deliveryTimeOp from '@/components/delivery-time-op/delivery-time-op.vue'
</code></pre>
<h6 id="注册组件">注册组件</h6>
<pre><code>components: {
   deliveryTimeOp
},
</code></pre>
<h6 id="使用组件">使用组件</h6>
<pre><code> &lt;delivery-time-op
          @dataCallback=&quot;dataCallback&quot;
          @timeCallback=&quot;timeCallback&quot;
          @close=&quot;close&quot;
          :model='model'
          :showYes='showYes'
          :content=&quot;content&quot;
          :barHidth='600'
          title=&quot;选择预送达时间&quot;&gt;
   &lt;/delivery-time-op&gt;
</code></pre>
<h6 id="参数说明">参数说明</h6>
<pre><code>@dataCallback:选择日期的回调

@timeCallback:选择时间的回调

@close：隐藏事件（点击iocn关闭弹框）

model：显示或隐藏（true/false）

showYes：点击模态框是否关闭弹框（true/false）

content：需要传递展示的日期时间数据（数组）

barHidth：弹出框高度(数字)

title:标题
</code></pre>
<h6 id="数据格式">数据格式</h6>
<pre><code> content:[{
   &quot;timezh&quot;: &quot;今天 (周三)&quot;,
   &quot;timeformatter&quot;: &quot;8-10&quot;,
   &quot;timelist&quot;: [
       {
        &quot;timestr&quot;: &quot;立即送达&quot;,
    }, {
        &quot;timestr&quot;: &quot;15:35&quot;,
    }, {
        &quot;timestr&quot;: &quot;16:05&quot;,
    }, {
        &quot;timestr&quot;: &quot;16:35&quot;,
    }, {
        &quot;timestr&quot;: &quot;17:05&quot;,
    }, {
        &quot;timestr&quot;: &quot;17:35&quot;,
    }, {
        &quot;timestr&quot;: &quot;18:05&quot;,
    }, {
        &quot;timestr&quot;: &quot;18:35&quot;,
    }]
 }]
</code></pre>
<h2 id="deliverytimevue">deliveryTime.vue</h2>
<h6 id="html">html</h6>
<pre><code>&lt;template&gt;
  &lt;view&gt;
	  &lt;view class=&quot;pinck-box&quot;&gt;
	    &lt;view class=&quot;picker-up-title&quot;&gt;取货时间&lt;/view&gt;
	    &lt;view class=&quot;pick-item&quot;&gt;
	      &lt;view class=&quot;block-up-title&quot;&gt;{{bhTxt}}&lt;/view&gt;
	      &lt;view class=&quot;block-up-time&quot; @click=&quot;showModel&quot;&gt;
	        &lt;text&gt;{{chooseDay}} {{chooseTime}}&lt;/text&gt;
	        &lt;uni-icons type=&quot;right&quot; /&gt;
	      &lt;/view&gt;
	    &lt;/view&gt;
	  &lt;/view&gt;
	  
	  &lt;deliveryTimeOp
	  	  v-if=&quot;content &amp;&amp; content.length != 0&quot; 
	  	  @dataCallback=&quot;dataCallback&quot; 
	  	  @timeCallback=&quot;timeCallback&quot; 
	  	  @close=&quot;close&quot; 
	  	  :model='model' 
	  	  :showYes=&quot;model&quot; 
	  	  :content=&quot;content&quot; 
	  	  :barHidth='600' 
	  	  title=&quot;选择取货时间&quot;
	  &gt;
	  &lt;/deliveryTimeOp&gt;
  &lt;/view&gt;
&lt;/template&gt;
 
</code></pre>
<h6 id="1-js-推荐使用">1. js (推荐使用)</h6>
<pre><code>&lt;script&gt;
import deliveryTimeOp from '@/components/delivery-time-op.vue'
export default {
  components: {
    deliveryTimeOp,
  },
  data(){
	return{
		
	}
  },
  mounted(){},
  methods{
			// 时间
			getDliveryTime(){
				let today = '';
				let nextDay = '';
				let threeDay = ''
				let timeformatter = ''

				let now = new Date();
				// 获取星期
				let week = now.getDay();
				let deliveryTimeList = [];
				// 年
				let Y = now.getFullYear();
				// 月份
				let M = now.getMonth() + 1;
				M = M &lt; 10 ? &quot;0&quot; + M : M;
				// 日
				let D = now.getDate();
				switch(week){
					case 0:
						today = &quot;今天（周日）&quot;;
						nextDay = &quot;明天（周一）&quot;;
						threeDay = &quot;后天（周二）&quot;;
						break;
					case 1:
						today = &quot;今天（周一）&quot;;
						nextDay = &quot;明天（周二）&quot;;
						threeDay = &quot;后天（周三）&quot;;
						break;
					case 2:
						today = &quot;今天（周二）&quot;;
						nextDay = &quot;明天（周三）&quot;;
						threeDay = &quot;后天（周四）&quot;;
						break;
					case 3:
						today = &quot;今天（周三）&quot;;
						nextDay = &quot;明天（周四）&quot;;
						threeDay = &quot;后天（周五）&quot;;
						break;
					case 4:
						today = &quot;今天（周四）&quot;;
						nextDay = &quot;明天（周五）&quot;;
						threeDay = &quot;后天（周六）&quot;;
						break;
					case 5:
						today = &quot;今天（周五）&quot;;
						nextDay = &quot;明天（周六）&quot;;
						threeDay = &quot;后天（周日）&quot;;
						break;
					case 6:
						today = &quot;今天（周六）&quot;;
						nextDay = &quot;明天（周日）&quot;;
						threeDay = &quot;后天（周一）&quot;;
						break;
				}
				
				// 判断是否是20点以后, 20点以后则默认值为第二天第一个
				let endTimeStamp = new Date(new Date().setHours(20)).getTime()
				let nowStamp = new Date().getTime()
				
				if(nowStamp &gt; endTimeStamp) {
					let todayStr = this.getTimeList('two');
					let nowDayList = this.getTimeObj(todayStr)
					let D1 = new Date(new Date().setDate(new Date().getDate() + 1)).getDate().toString()
					
					let todayYMD = Y + '-'+ M + '-' + D1.padStart(2, '0')
					
					deliveryTimeList.push({ timezh: nextDay, timeformatter: todayYMD, timelist: nowDayList });
					this.content = deliveryTimeList
					
					let nextDayStr = this.getTimeList('three');
					let nextDayList = this.getTimeObj(nextDayStr)
					
					let D2 = new Date(new Date().setDate(new Date().getDate() + 2)).getDate().toString()
					let nextYMD = Y + '-'+ M + '-' + D2.padStart(2, '0')
					deliveryTimeList.push({ timezh: threeDay, timeformatter: nextYMD, timelist: nowDayList });
					this.content = []
					this.content = deliveryTimeList
				} else {
					let todayStr = this.getTimeList('one');
					let nowDayList = this.getTimeObj(todayStr)
					
					let todayYMD = Y + '-'+ M + '-' + D.toString().padStart(2, '0')
					deliveryTimeList.push({ timezh: today, timeformatter: todayYMD, timelist: nowDayList });
					this.content = deliveryTimeList
					
					let nextDayStr = this.getTimeList('two');
					let nextDayList = this.getTimeObj(nextDayStr)
					let D2 = new Date(new Date().setDate(new Date().getDate() + 1)).getDate().toString()
					let nextYMD = Y + '-' + M + '-' + D2.padStart(2, '0')
					deliveryTimeList.push({ timezh: nextDay, timeformatter: nextYMD, timelist: nextDayList });
					this.content = []
					this.content = deliveryTimeList
					
				}
				
				this.chooseDate = this.content[0].timeformatter
				this.chooseDay = this.content[0].timezh
                this.chooseTime = this.content[0].timelist[0].timestr
			},
			// 获取时间段
			getTimeList(type) {
				let timeListTodayAll = [];
				let timeList = []
				let startTime 
				
				let now = new Date()
				let tommorrow = new Date().setDate(new Date().getDate() + 1)
				let three = new Date().setDate(new Date().getDate() + 2)
				let todayStart = new Date().getFullYear() + '-' + (new Date().getMonth()+1).toString().padStart(2, '0') + '-' + new Date().getDate() + ' 09:00:00'
				
				let allTimes = (21 - 9) * 60 / 40
				for(let i = 0; i &lt; allTimes; i++) {
					let setTodayTime = new Date(todayStart).setMinutes(40*i)
					timeListTodayAll.push(formatTime(setTodayTime))
					timeList.push(formatTime(setTodayTime).substring(11, 16))
				}
				if(type == 'one') {
					let nowTimeStamp = new Date().setMinutes(new Date().getMinutes() + 20)
					for(let j = 0; j &lt; timeListTodayAll.length; j++) {
						let itemStamp = new Date(timeListTodayAll[j]).getTime()
						if(itemStamp &gt;= nowTimeStamp) {
							timeList = timeList.slice(j)
							break
						}
					}
				}
				return timeList
			},
			// 根据时间段转为数组对象
			getTimeObj(todayStr){
				// 将数组中的时间段字符串分割
				let todayArr = []
				todayStr.forEach(item =&gt; {
					todayArr.push(...item.split('-'))
				})
				// 将分割后的数组去重
				let todayDup = []
				todayArr.forEach(item =&gt; {
					if(todayDup.indexOf(item) == -1){
						todayDup.push(item)
					}
				})
				// 将去重后的数组转为数组对象
				let todayList = []
				todayDup.forEach(item =&gt; {
					todayList.push({
						timestr: item
					})
				})
				return todayList;
			},

			// 点击显示时间弹窗
			showModel(){
				this.model = true;
			},

			// 选择日期的回调
			dataCallback(item,index){
				this.chooseDay = item.timezh
				this.chooseDate = item.timeformatter
			},

			// 选择时间的回调
			timeCallback(item,index){
				if(this.now == this.formData.chooseDate){
					this.chooseDay = this.content[0].timezh
					this.chooseDate = this.now
				}else{
					this.chooseDay = this.content[1].timezh
					this.chooseDate = this.content[1].timeformatter
				}
				this.chooseTime = item.timestr
				
				if(this.chooseDay != this.content[0].timezh || this.chooseTime != this.content[0].timelist[0].timestr) {
					this.bhTxt = '指定时间'
				} else {
					this.bhTxt = '尽快取货'
				}
				this.model = false;
			},

			// 隐藏事件
			close(){
				this.model = false 
			},
  },

  onshow(){
		let now = new Date();
		let year = now.getFullYear()
		let month = now.getMonth() + 1
		month = month &lt; 10 ? &quot;0&quot; + month : month;
		let date = now.getDate() 
		date = date &lt; 10 ? '0' + date : date
		this.chooseDate = `${year}-${month}-${date}`
		this.now = `${year}-${month}-${date}`
		this.getDliveryTime()
  },

}
&lt;/script&gt;
 
</code></pre>
<h6 id="2-js">2. js</h6>
<pre><code>&lt;script&gt;
import deliveryTimeOp from '@/components/delivery-time-op.vue'
export default {
  components: {
    deliveryTimeOp,
  },
  data() {
    return {
      // 控制显示隐藏
      model: false,
      // 需要传递展示的日期时间数据
      content: [
        // {timezh: &quot;&quot;,timeformatter: &quot;&quot;, timelist: []},
      ],
      chooseTime: '',
      // 时间
      chooseDay: '',
      //星期
	  chooseDate: '', // 年月日
	  bhTxt: '尽快取货', // 取货时间文字
    }
  },
  mounted() {
    this.$nextTick(() =&gt; {
      this.getDliveryTime()
    })
  },
  methods: {
    // 时间
    getDliveryTime() {
      let now = new Date();
      // 获取星期
      let week = now.getDay();
      let today = '';
      // 今天星期 文字
      let nextDay = '';
     // 明天星期 文字
      let timeformatter = ''
     // 年月日
      let deliveryTimeList = []
	  // 获取当前的月份
      let M = now.getMonth() + 1
      M = M &lt; 10 ? '0' + M : M
	  // 获取当前的日
      let D = now.getDate()
      switch (week) {
        case 0:
          today = '今天（周日）'
          nextDay = '明天（周一）'
          break
        case 1:
          today = '今天（周一）'
          nextDay = '明天（周二）'
          break
        case 2:
          today = '今天（周二）'
          nextDay = '明天（周三）'
          break
        case 3:
          today = '今天（周三）'
          nextDay = '明天（周四）'
          break
        case 4:
          today = '今天（周四）'
          nextDay = '明天（周五）'
          break
        case 5:
          today = '今天（周五）'
          nextDay = '明天（周六）'
          break
        case 6:
          today = '今天（周六）'
          nextDay = '明天（周日）'
          break
      }

      let timeDate = new Date(now.getTime() + 3600000);
      
	  // 今天的时间段
      let todayStr = this.getTimeList(
        timeDate.getHours(),
        timeDate.getMinutes()
      );
      let nowDayList = this.getTimeObj(todayStr);
	  // 日 补零
	  let dnum = D
	  dnum = dnum &lt; 10 ? '0' + dnum : dnum;
	  // 年 月 日
	  let todayYMD = Y + '-' + 'M' + '-' + dnum;
      deliveryTimeList.push({
        timezh: today,
        timeformatter: todayYMD,
        timelist: nowDayList,
      });
      this.content = deliveryTimeList;

      // 明天的时间段
      let nextDayStr = this.getTimeList(9, 0);
      let nextDayList = this.getTimeObj(nextDayStr);
	  // 日 补零
	  let DNum = D + 1;
	  DNum = DNum &lt; 10 ? '0' + DNum : DNum;
	  // 年 月 日
	  let nextYMD = Y + '-' + M + '-' + DNum;
      deliveryTimeList.push({
        timezh: nextDay,
        timeformatter: nextYMD,
        timelist: nextDayList,
      });
      this.content = [];
      this.content = deliveryTimeList;
		
	  this.chooseDay = this.content[0].timezh
      this.chooseTime = this.content[0].timelist[0].timestr

    },
    // 获取时间段
    getTimeList(hour, minut) {
      let timeList = [];
	  let times = 0;
	  let timei = 0;
      let startTime = hour &lt; 9 ? 9 : hour;
      if (minut &lt; 20) {
        for (let i = 0; i &lt; 21 - startTime; i++) {
          for (let j = 0; j &lt; 2; j++) {
            if (j % 2 === 0) {
              times = startTime + i;
			  times = times &lt; 10 ? '0' + times : times;
			  timeList.push(
				 times + &quot;:00&quot; + &quot;-&quot; + (times) + &quot;:20&quot;
			  );

            } else {
              times = times = startTime + i;
			  times = times &lt; 10 ? '0' + times : times;
			  timei = startTime + i + 1;
			  timei = timei &lt; 10 ? '0' + timei : timei;
			  timeList.push(
				 times + &quot;:40&quot; + &quot;-&quot; + (timei) + &quot;:00&quot;
			   );

            }
          }
        }
      } else {
		times = 0;
		timei = 0;
        for (let i = 0; i &lt; 21 - startTime; i++) {
          for (let j = 0; j &lt; 2; j++) {
            if (j % 2) {
              if (i !== 20 - startTime) {
                times = startTime + i;
				times = times &lt; 10 ? '0' + times : times;
				timei = startTime + 1 + i;
				timei = timei &lt; 10 ? '0' + timei : timei;
				timeList.push(
					timei + &quot;:00&quot; + &quot;-&quot; + (timei) + &quot;:20&quot;
				);

              }
            } else {
              times = startTime + i;
			  times = times &lt; 10 ? '0' + times : times;
			  timei = timei = startTime + i + 1;
			  timei &lt; 10 ? '0' + timei : timei;
			  timeList.push(
				 times + &quot;:40&quot; + &quot;-&quot; + (timei) + &quot;:00&quot;
			  );
            }
          }
        }
      }
      return timeList
    },
    // 根据时间段转为数组对象
    getTimeObj(todayStr) {
      // 将数组中的时间段字符串分割
      let todayArr = []
      todayStr.forEach((item) =&gt; {
        todayArr.push(...item.split('-'))
      })
      // 将分割后的数组去重
      let todayDup = []
      todayArr.forEach((item) =&gt; {
        if (todayDup.indexOf(item) == -1) {
          todayDup.push(item)
        }
      })
      // 将去重后的数组转为数组对象
      let todayList = []
      todayDup.forEach((item) =&gt; {
        todayList.push({
          timestr: item,
        })
      })
      return todayList
    },
    // 控制弹窗显示
    showModel() {
        this.model = true
    },
    // 选择日期的回调
    dataCallback(item, index) {
      this.chooseDay = item.timezh
	  this.chooseDate = item.timeformatter
    },
    // 选择时间的回调
    timeCallback(item, index) {
       if(this.now == this.content[0].timeformatter){
			this.chooseDay = this.content[0].timezh
			this.chooseDate = this.now
		}else{
			this.chooseDay = this.content[1].timezh
			this.chooseDate = this.content[1].timeformatter
		}
		this.chooseTime = item.timestr
		
		if(this.chooseDay != this.content[0].timezh || this.chooseTime != this.content[0].timelist[0].timestr) {
			this.bhTxt = '指定时间'
		} else {
			this.bhTxt = '尽快取货'
		}
		this.model = false;
    },
    // 隐藏事件
    close() {
      this.model = false
    },
  },
  onshow(){
		let now = new Date();
		let year = now.getFullYear()
		let month = now.getMonth() + 1
		month = month &lt; 10 ? &quot;0&quot; + month : month;
		let date = now.getDate() 
		date = date &lt; 10 ? '0' + date : date
		this.chooseDate = `${year}-${month}-${date}`
		this.now = `${year}-${month}-${date}`
		this.getDliveryTime()
  },
}
&lt;/script&gt;

 
</code></pre>
<h6 id="css">css</h6>
<pre><code>&lt;style lang=&quot;less&quot; scoped&gt;
.pinck-box {
  background: #ffffff;
  padding: 0 32rpx 17rpx 32rpx;
  .picker-up-title {
    font-size: 32rpx;
    font-weight: 500;
    color: #000000;
    padding: 20rpx 0;
  }
  .pick-item {
    height: 88rpx;
    background: #f4f4f4;
    border-radius: 24rpx 24rpx 24rpx 24rpx;
    padding: 0 32rpx;
    display: flex;
    align-items: center;
    justify-content: space-between;
    .block-up-title {
      font-size: 28rpx;
      font-weight: 400;
      color: #ff502f;
    }
    .block-up-time {
      font-size: 24rpx;
      font-weight: 400;
      color: #999999;
      display: flex;
      align-items: center;
      /deep/.uni-icons {
        font-size: 24rpx !important;
        color: #999999 !important;
      }
    }
  }
}
&lt;/style&gt;
 
</code></pre>
<h2 id="components文件">components文件</h2>
<h4 id="delivery-time-opvue">delivery-time-op.vue</h4>
<h6 id="html-2">html</h6>
<pre><code>&lt;template&gt;
	&lt;view&gt;
		&lt;!-- 模态框 --&gt;
		&lt;view @click=&quot;Modal&quot; :class=&quot;{mask:model}&quot;&gt;&lt;/view&gt;
		&lt;!-- 弹窗主体 --&gt;
		&lt;view :style=&quot;{'height':barHidth+'rpx'}&quot; class=&quot;active&quot; :class=&quot;{add:model}&quot;&gt;
			&lt;view class=&quot;title&quot;&gt;{{title}} &lt;text @click=&quot;showModal&quot;&gt;X&lt;/text&gt;&lt;/view&gt;
			&lt;view class=&quot;cont&quot; :style=&quot;{height:barHidth-80 +'rpx'}&quot;&gt;
				&lt;view class=&quot;day&quot;&gt;
					&lt;view 
					:class=&quot;index === isIndex ? 'active_copy' : ''&quot; 
					v-for=&quot;(item,index) in content&quot; 
					:key=&quot;index&quot;
					@click=&quot;dataCallback(item,index)&quot;
					&gt;{{item.timezh}}&lt;/view&gt;
				&lt;/view&gt;

				&lt;scroll-view class=&quot;content&quot; :scroll-y=&quot;true&quot; :scroll-top=&quot;scrollTop&quot;&gt;
					&lt;view class=&quot;appoint&quot; 
					:class=&quot;index === Indexes ? 'longActive' : ''&quot; 
					@click=&quot;timeCallback(item,index)&quot;
					v-for=&quot;(item,index) in Days&quot; 
					:key=&quot;index&quot;
					&gt;
						{{item.timestr}}
						&lt;text :class=&quot;index === Indexes ? 'cuIcon-check' : ''&quot;&gt;&lt;/text&gt;
					&lt;/view&gt;
				&lt;/scroll-view&gt;
			&lt;/view&gt;
		&lt;/view&gt;

	&lt;/view&gt;
&lt;/template&gt;
 
</code></pre>
<h6 id="js">js</h6>
<pre><code>&lt;script&gt;
	export default {
		props: {
			//控制弹窗的隐藏显示
			model: {
				type: Boolean,
				default: false
			},
			//弹窗标题
			title: {
				type: String,
				default: '弹窗测试'
			},
			//弹窗内容
			content: {
				type: Array,
				default: [{
					content: '我是弹窗内容'
				}]
			},
			//弹窗 窗口高度
			barHidth: {
				type: Number,
				default: 400
			},
			//点击模态框是否能关闭弹窗
			showYes: {
				type: Boolean,
				default: false
			}
		},
		data() {
			return {
				scrollTop: 0,
				isIndex: 0,
				Indexes: 0,
				Days: [],
			}
		},
		mounted(){
			// 初始化
			this.Days = this.content[0].timelist;
		},

		methods: {
			// 关闭窗口
			showModal() {
				this.$emit('close', false)
			},
			// 点击模态框关闭窗口
			Modal() {
				if (this.showYes) {
					this.$emit('close', false)
				}
			},
			//配送时间切换回顶
			gotop() {
				this.scrollTop = 1;
				this.$nextTick(function() {
					this.scrollTop = 0;
				});
			},

			//切换日期
			dataCallback(item,index) {
				this.isIndex = index;
				this.Days = this.content[index].timelist;
				this.Indexes = null;
				this.gotop();
				this.$emit('dataCallback', item, index)
			},

			//选择时间
			timeCallback(item,index) {
				this.Indexes = index;
				this.modalName = null;
				this.$emit('timeCallback', item, index)
			},
		}
	}
&lt;/script&gt;

 
</code></pre>
<h6 id="css-2">css</h6>
<pre><code>&lt;style scoped&gt;
	.mask {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: #000;
		animation: getInto .5s 1;
		opacity: 0.5;
		z-index: 999;
	}


	@keyframes getInto {
		0% {
			opacity: 0;
		}

		100% {
			opacity: 0.5;
		}

	}

	.active {
		position: fixed;
		bottom: 0;
		left: 0;
		z-index: 1000;
		width: 100%;
		height: 400rpx;
		border-top-left-radius: 16rpx;
		border-top-right-radius: 16rpx;
		overflow: hidden;
		transform: translateY(100%);
		transition: .4s;
	}

	.add {
		transform: translateY(0);
	}


	.title {
		position: relative;
		text-align: center;
		background-color: #fff;
		padding: 20rpx 0;
		border-bottom: 2rpx solid #eee;
	}

	.title&gt;text {
		position: absolute;
		right: 14rpx;
		width: 40rpx;
		height: 40prx;
		background-color: #ccc;
		color: #666;
		border-radius: 50%;
		font-size: 32rpx;
	}

	.cont {
		display: flex;
		background-color: #fff;
		overflow-y: scroll;
	}

	.day {
		flex: 2;
		background-color: #F3F4F5;
		border-right: 2rpx solid #f8f8f8;
		text-align: center;

	}

	.day view {
		padding: 30rpx 12rpx;
		font-size: 28rpx;
		box-sizing: border-box;
	}

	.content {
		flex: 4;
		font-size: 28rpx;
		border-bottom: 40rpx solid #fff;
		background-color: #fff;
	}

	.appoint {
		text-align: left;
		padding: 30rpx;
		border-bottom: 2rpx solid #f8f8f8;
	}


	.appoint text {
		margin-right: 30rpx;
	}

	.active_copy {
		position: relative;
		background-color: #fff;
		color: #000000;
		box-sizing: border-box;

	}

	.active_copy::after {
		content: '';
		width: 5rpx;
		height: 94rpx;
		background: #fff;
		position: absolute;
		top: 0;
		right: 0;

	}

	.longActive {
		color: #FF502F;
		display: flex;
		align-items: center;
		justify-content: space-between;
		font-size: 32rpx;
		font-weight: 500;
	}
	
	.cuIcon-check{
		width: 30rpx;
		height: 16rpx;
		border-bottom: 4rpx solid #FF502F;
		border-left: 4rpx solid #FF502F;
		transform: rotate(-45deg);
	}
&lt;/style&gt;

 
</code></pre>
]]></content>
    </entry>
</feed>