<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>Gridea</title>
    <updated>2023-05-06T09:36:55.478Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[google 简书广告屏蔽]]></title>
        <id>https://nancy-svy.github.io/post/blockAdvertising/</id>
        <link href="https://nancy-svy.github.io/post/blockAdvertising/">
        </link>
        <updated>2023-05-06T05:36:40.000Z</updated>
        <content type="html"><![CDATA[<p>最近简书感觉是穷疯了，随便打开一篇文章满屏的广告乱飞，对于有强迫症的患者非常难受，看到广告就想点 x x 关闭。似乎简书与我干上了，并不希望我关闭广告，点完关闭立马把我带到广告的详情页，于是忍无可忍从网上找了一些方法，彻底铲除这些辣眼睛的广告。<br>
<img src="https://nancy-svy.github.io/post-images/1683351463792.png" alt="" loading="lazy"></p>
<p><strong>一、 AdGuard 广告拦截器</strong><br>
(AdGuard)[http://www.ddooo.com/softdown/128398.htm] 广告拦截器是一款可以对抗各式广告的拦截插件，该插件可以拦截包括视频广告、浮动广告以及插播广告在内的绝大部分常见的网站广告。<br>
<img src="https://nancy-svy.github.io/post-images/1683351546969.png" alt="" loading="lazy"></p>
<p><strong>二、 Adblock</strong><br>
(AdBlock)[https://adblockplus.org/] 插件是 Chrome 最知名的广告拦截插件之一，不仅能够帮助用户对 Facebook 和 YouTube 等网站上的广告、弹窗和恼人的横幅广告进行拦截，同时也能够对第三方跟踪代码进行拦截，保护用户的隐私。<br>
<img src="https://nancy-svy.github.io/post-images/1683351602470.png" alt="" loading="lazy"></p>
<p><strong>三、Adblock plus</strong><br>
(Adblock Plus)[https://www.adblockplus.org/] 插件作为一款功能强大且免费的广告拦截插件，支持包括 Chrome 、 Firefox 等在内的多种浏览器。<br>
在浏览器中安装、启用该插件后，用户不需要操作，它就会对网页中的广告进行自动屏蔽，并且还会将空白的页面进行合并，完全看不出广告的痕迹。<br>
<img src="https://nancy-svy.github.io/post-images/1683351815771.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI tree组件]]></title>
        <id>https://nancy-svy.github.io/post/elementUITree/</id>
        <link href="https://nancy-svy.github.io/post/elementUITree/">
        </link>
        <updated>2023-04-28T08:01:00.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1. 改变tree的背景色</strong></p>
<pre><code>::v-deep .el-tree{
  background-color: #f5f5f5;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1682669162227.png" alt="" loading="lazy"></figure>
<p><strong>2. tree组件鼠标hover悬浮背景色</strong></p>
<pre><code>::v-deep.el-tree-node__content{
  &amp;:hover{
    background-color: red;
  }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1682669133861.png" alt="" loading="lazy"></figure>
<p><strong>3. tree组件选中背景色修改</strong></p>
<pre><code>::v-deep.el-tree-node.is-current &gt; .el-tree-node__content {
    background-color: black !important;
  }
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://nancy-svy.github.io/post-images/1682669104470.png" alt="" loading="lazy"></figure>
<p><strong>4.tree组件设置图标</strong></p>
<pre><code>    ::v-deep.tree{
        .el-tree-node__expand-icon.expanded {
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
        }
        // 收起
        .el-icon-caret-right:before {
            content: '\e6d9';       
            border: 1px solid #999999;			   
        }
        // 展开
        .el-tree-node__expand-icon.expanded.el-icon-caret-right:before {
            content: '\e6d8';
            color: #165DFF;
            border: 1px solid #165DFF;
        }
        .el-tree-node__expand-icon.is-leaf:before  {
            content: '' !important;
            border: none;
        }
    }
</code></pre>
<p>实现效果<br>
<img src="https://nancy-svy.github.io/post-images/1682669221905.png" alt="" loading="lazy"></p>
<p><strong>5. tree组件有指示线</strong><br>
实现效果<br>
<img src="https://nancy-svy.github.io/post-images/1683339530196.png" alt="" loading="lazy"></p>
<pre><code>&lt;el-tree
    class=&quot;tree-line&quot;
    :data=&quot;data&quot;
    show-checkbox
    node-key=&quot;id&quot;
    :props=&quot;defaultProps&quot;
&gt;
&lt;/el-tree&gt;
</code></pre>
<p>css样式</p>
<pre><code>.tree-line{
    .el-tree-node {
        position: relative;
        padding-left: 16px;
    }
    .el-tree-node__content {
        margin-top: 10px;
    }
    .el-tree-node__children {
        padding-left: 16px;
    }
    .el-tree-node::before {
        content: '';
        height: 100%;
        width: 1px;
        position: absolute;
        left: -3px;
        top: -26px;
        border-width: 1px;
        border-left: 1px dashed #707070;
    }
    
    .el-tree-node:last-child::before {
        height: 38px;
    }
    .el-tree-node::after {
        content: '';
        width: 24px;
        height: 20px;
        position: absolute;
        left: -3px;
        top: 12px;
        border-width: 1px;
        border-top: 1px dashed #707070;
    }
    &amp; &gt; .el-tree-node::after {
        border-top: none;
    }
    &amp; &gt; .el-tree-node::before {
        border-left: none;
    }
    .el-tree-node__expand-icon {
        color: #000;
        &amp;.is-leaf {
        color: transparent;
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-element-admin集成项目]]></title>
        <id>https://nancy-svy.github.io/post/vueElementAdminProject/</id>
        <link href="https://nancy-svy.github.io/post/vueElementAdminProject/">
        </link>
        <updated>2023-04-26T07:02:27.000Z</updated>
        <content type="html"><![CDATA[<h5 id="一-在其它网站下载的svg的图片有fill属性">一. 在其它网站下载的svg的图片，有fill属性</h5>
<p>设置不了svg的颜色，需要去掉fill属性</p>
<h5 id="二-vue-element-admin-修改页面标题">二、vue-element-admin 修改页面标题</h5>
<p><strong>1.找到permission.js页面</strong><br>
其中document.title = getPageTitle(to.meta.title)就是设置title<br>
然后找到getPageTitle方法,按住Ctrl键左键单击getPageTitle方法跳转到get-page-title.js文件界面<br>
<img src="https://nancy-svy.github.io/post-images/1683339152913.png" alt="" loading="lazy"></p>
<p><strong>2.找到get-page-title.js</strong><br>
<img src="https://nancy-svy.github.io/post-images/1683339184366.png" alt="" loading="lazy"></p>
<p><strong>3.再找到settings.js</strong><br>
修改默认的title<br>
<img src="https://nancy-svy.github.io/post-images/1683339196890.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue项目运行时遇到的问题]]></title>
        <id>https://nancy-svy.github.io/post/projectOperationIssues/</id>
        <link href="https://nancy-svy.github.io/post/projectOperationIssues/">
        </link>
        <updated>2023-04-20T02:29:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-module-build-failed-from-node_modulesless-loaderdistcjsjs-typeerror-thisgetoptions">一.  Module build failed (from ./node_modules/less-loader/dist/cjs.js): TypeError: this.getOptions</h3>
<p><strong>解决方法</strong><br>
降低less-loader的版本为7.3.0<br>
npm install less-loader@7.3.0 --save-dev</p>
<h3 id="二-vue-error-index-is-defined-but-never-used-vueno-unused-vars">二.  vue error ‘index‘ is defined but never used vue/no-unused-vars</h3>
<p>在运行vue项目时，界面写了个一个for循环，但是却报错。界面关键部分代码如下。因为index没有使用过，所以报错<br>
<img src="https://nancy-svy.github.io/post-images/1681958282676.png" alt="" loading="lazy"></p>
<p><strong>原因分析</strong><br>
应该是eslint校验导致的，开始想改变eslint校验规则，但是那个没有起效。于是换了一种办法新建vue.config.js文件，然后加入以下代码。重新运行后即可。</p>
<pre><code>module.exports = {
     lintOnSave: false
}
</code></pre>
<p>关于lintOnsave的解释可点击查看详细配置哦~<a href="https://cli.vuejs.org/zh/config/#pages">配置参考</a><br>
<img src="https://nancy-svy.github.io/post-images/1681958383332.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uniapp  实现组织管理效果]]></title>
        <id>https://nancy-svy.github.io/post/organizationalManagement/</id>
        <link href="https://nancy-svy.github.io/post/organizationalManagement/">
        </link>
        <updated>2023-04-19T09:29:11.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1681896820412.png" alt="" loading="lazy"></figure>
<p>html</p>
<pre><code>&lt;template&gt;
	&lt;view class=&quot;container&quot;&gt;
		&lt;view class=&quot;department_container d-flex f-direction&quot;&gt;
			&lt;view class=&quot;tab_wrapper&quot;&gt;
				&lt;view class=&quot;tab_content&quot;&gt;
					&lt;scroll-view scroll-x=&quot;true&quot; :scroll-left=&quot;scrollLeft&quot; @scroll=&quot;handleScroll&quot;&gt;
						&lt;view class=&quot;ul&quot;&gt;
							&lt;view class=&quot;li d-flex a-center f-32 color-9&quot; id=&quot;title&quot; &gt;
								&lt;view id=&quot;choTxt&quot; v-if=&quot;curItem == null&quot;&gt;请选择&lt;/view&gt;
								&lt;view id=&quot;choTxt&quot; v-else @click=&quot;handleDepartmentHomepage&quot;&gt;
									首页
									&lt;uni-icons type=&quot;right&quot; color=&quot;#999&quot; v-if=&quot;curItem.title != item.title&quot;&gt;&lt;/uni-icons&gt;
								&lt;/view&gt;
								&lt;view id=&quot;choTxt&quot; v-for=&quot;(item,index) in chooseArr&quot; :key=&quot;index&quot; @click=&quot;handleTitle(item,index)&quot;&gt;
									&lt;text :class=&quot;curItem.title == item.title ? 'color-02' : 'color-9'&quot;&gt;{{item.title}}&lt;/text&gt;
									&lt;uni-icons type=&quot;right&quot; color=&quot;#999&quot; v-if=&quot;curItem.title != item.title&quot;&gt;&lt;/uni-icons&gt;
								&lt;/view&gt;
							&lt;/view&gt;
						&lt;/view&gt;
					&lt;/scroll-view&gt;
				&lt;/view&gt;
			&lt;/view&gt;
			&lt;view class=&quot;department_list safeArea&quot;&gt;
				&lt;scroll-view scroll-y=&quot;true&quot;&gt;
					&lt;view class=&quot;ul&quot;&gt;
						&lt;view class=&quot;li&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;
							&lt;uni-row&gt;
								&lt;uni-col :span=&quot;18&quot;&gt;
									&lt;view class=&quot;f-32 color-3&quot; @click=&quot;handleSelect(item)&quot;&gt;{{item.title}}&lt;/view&gt;
								&lt;/uni-col&gt;
								&lt;uni-col :span=&quot;6&quot; v-if=&quot;item.children &amp;&amp; item.children.length != 0&quot;&gt;
									&lt;view class=&quot;subordinate f-28 color-02&quot; @click=&quot;handleNext(item, index)&quot;&gt;
										下级
										&lt;uni-icons type=&quot;right&quot; color=&quot;#02C2B0&quot;&gt;&lt;/uni-icons&gt;
									&lt;/view&gt;
								&lt;/uni-col&gt;
							&lt;/uni-row&gt;
						&lt;/view&gt;
					&lt;/view&gt;
				&lt;/scroll-view&gt;
			&lt;/view&gt;
		&lt;/view&gt;
	&lt;/view&gt;
&lt;/template&gt;

</code></pre>
<p>js</p>
<pre><code>&lt;script&gt;
	export default {
		data() {
			return {
				scrollLeft: 0, // 横向滚动条的位置
				titleWidth: 0, // tab每个li的宽度
				chooseArr: [], // 选中的进入下一级
				curItem: null, // 当前选中的
				selectArr: [], // 选中的
				list: [
					{id: '0', title: '一级', children: [
						{id: '00', title: '十一级', children: [
							{id: '001', title: '101某某部门', children: [
								{id: '0001', title: '1001某某部门', children: [
									{id: '00001', title: '10001某某部门', children: [
										{id: '000001', title: '000001某某部门'},
										{id: '000002', title: '000002某某部门'},
										{id: '000003', title: '000003某某部门'},
										{id: '000004', title: '000004某某部门'},
										{id: '000005', title: '000005某某部门'}
									]},
									{id: '00002', title: '10002某某部门'},
									{id: '00003', title: '10003某某部门'},
									{id: '00004', title: '10004某某部门'},
									{id: '00005', title: '10005某某部门'}
								]},
								{id: '0002', title: '1002某某部门'},
								{id: '0003', title: '1003某某部门'},
								{id: '0004', title: '1004某某部门'},
								{id: '0005', title: '1005某某部门'}
							]},
							{id: '001', title: '102某某部门'},
							{id: '001', title: '103某某部门'},
							{id: '001', title: '104某某部门'},
							{id: '001', title: '105某某部门'}
						]},
						{id: '01', title: '十二级',children: [
							{id: '001', title: '121级'},
							{id: '001', title: '122级'},
							{id: '001', title: '123级'},
							{id: '001', title: '124级'},
							{id: '001', title: '125级'}
						]},
						{id: '02', title: '十三级'},
						{id: '03', title: '十四级'},
						{id: '03', title: '十五级'}
					]},
					{id: '1', title: '二级', children: [
						{id: '10', title: '二一级'},
						{id: '11', title: '二二级'},
						{id: '12', title: '二三级'},
						{id: '13', title: '二四级'},
						{id: '13', title: '二五级'}
					]},
					{id: '2', title: '三级'},
					{id: '3', title: '四级'},
					{id: '4', title: '五级'},
					{id: '5', title: '六级'},
					{id: '6', title: '七级'},
					{id: '7', title: '八级'},
					{id: '8', title: '九级'},
					{id: '9', title: '十级'},
					{id: '10', title: '十一级'},
					{id: '11', title: '十二级'},
					{id: '12', title: '十三级'},
					{id: '13', title: '十四级'},
					{id: '14', title: '十五级'},
				],
			
			}
		},
		onLoad() {
			
		},
		mounted() {
			let that = this
			const query = uni.createSelectorQuery().in(this);
			query.select('#title').boundingClientRect(data =&gt; {
				that.titleWidth = data.width
			}).exec();
		},
		methods: {
			// 部门的首级
			handleDepartmentHomepage(){
				this.chooseArr = [] // 选中的进入下一级
				this.curItem = null // 当前选中的
				this.selectArr = []
				this.list = [
					{id: '0', title: '一级', children: [
						{id: '00', title: '十一级', children: [
							{id: '001', title: '101某某部门', children: [
								{id: '0001', title: '1001某某部门', children: [
									{id: '00001', title: '10001某某部门', children: [
										{id: '000001', title: '000001某某部门'},
										{id: '000002', title: '000002某某部门'},
										{id: '000003', title: '000003某某部门'},
										{id: '000004', title: '000004某某部门'},
										{id: '000005', title: '000005某某部门'}
									]},
									{id: '00002', title: '10002某某部门'},
									{id: '00003', title: '10003某某部门'},
									{id: '00004', title: '10004某某部门'},
									{id: '00005', title: '10005某某部门'}
								]},
								{id: '0002', title: '1002某某部门'},
								{id: '0003', title: '1003某某部门'},
								{id: '0004', title: '1004某某部门'},
								{id: '0005', title: '1005某某部门'}
							]},
							{id: '001', title: '102某某部门'},
							{id: '001', title: '103某某部门'},
							{id: '001', title: '104某某部门'},
							{id: '001', title: '105某某部门'}
						]},
						{id: '01', title: '十二级',children: [
							{id: '001', title: '121级'},
							{id: '001', title: '122级'},
							{id: '001', title: '123级'},
							{id: '001', title: '124级'},
							{id: '001', title: '125级'}
						]},
						{id: '02', title: '十三级'},
						{id: '03', title: '十四级'},
						{id: '03', title: '十五级'}
					]},
					{id: '1', title: '二级', children: [
						{id: '10', title: '二一级'},
						{id: '11', title: '二二级'},
						{id: '12', title: '二三级'},
						{id: '13', title: '二四级'},
						{id: '13', title: '二五级'}
					]},
					{id: '2', title: '三级'},
					{id: '3', title: '四级'},
					{id: '4', title: '五级'},
					{id: '5', title: '六级'},
					{id: '6', title: '七级'},
					{id: '7', title: '八级'},
					{id: '8', title: '九级'},
					{id: '9', title: '十级'},
					{id: '10', title: '十一级'},
					{id: '11', title: '十二级'},
					{id: '12', title: '十三级'},
					{id: '13', title: '十四级'},
					{id: '14', title: '十五级'},
				]
			},
			// 选中
			handleSelect(val){
				this.selectArr.push(...this.chooseArr,val)
			},
			// 进入下一级
			handleNext(val){
				this.curItem = val
				this.chooseArr.push(val)
				//获取选择终层后滚动条的走向
				let that = this
				const query = uni.createSelectorQuery().in(this);
				query.selectAll('#choTxt').boundingClientRect(data =&gt; {
					let left = that.titleWidth - data[data.length - 1].left + 68
					that.scrollLeft = left
				}).exec();
				this.list = val.children
			},
			// 横向滚动
			handleScroll(e){
				this.scrollLeft = e.detail.scrollLeft
			},
			// 返回上一级
			handleTitle(val,idx){
				if (this.curItem.title != val.title) {
					this.curItem = val
					let arr = this.chooseArr // 截取前的数据
					let sliceArr = []; // 截取后的数据
					sliceArr = arr.slice(0,idx+1)
					this.chooseArr = sliceArr
					this.list = val.children
				}
			},
			
		}
	}
&lt;/script&gt;
</code></pre>
<p>css</p>
<pre><code>&lt;style lang=&quot;less&quot; scoped&gt;
.department_container{
	background-color: #F0F5FA;
	.tab_wrapper{
		height: 91rpx;
		padding: 0 32rpx;
		overflow: hidden;
		margin-bottom: 20rpx;
		scroll-view{
			width: 100%;
		}
		.tab_content{
			width: 100%;
			height: 90%;
			border-bottom: 1px solid #DDDDDD;
		}
		.ul{
			height: 100%;
			flex-wrap: nowrap;
			.li{
				height: 100%;
				line-height: 91rpx;
				white-space: nowrap;
			}
		}
	}
	.department_list{
		flex: 1;
		box-sizing: border-box;
		overflow-y: hidden;
		scroll-view{
			height: 100%;
		}
		.ul{
			padding-left: 32rpx;
			padding-right: 32rpx;
			background-color: #fff;
		}
		.li{
			height: 96rpx;
			line-height: 96rpx;
			border-bottom: 1px solid #DFE0EB;
			.subordinate{
				text-align: right;
			}
			&amp;:last-child{
				border-bottom: 0px solid #DFE0EB;
			}
		}
	}
}
&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git提交忽略文件]]></title>
        <id>https://nancy-svy.github.io/post/gitIgnoringFiles/</id>
        <link href="https://nancy-svy.github.io/post/gitIgnoringFiles/">
        </link>
        <updated>2023-04-19T01:04:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="创建-gitignore文件">创建 .gitignore文件</h3>
<p><strong>第一种方式</strong><br>
在项目根目录下直接创建一个文件，后缀改成 .gitignore 即可。</p>
<p><strong>第二种方式</strong><br>
用git创建，到根目录下，执行 touch .gitignore，即可看见目录下已经出现了该忽略文件。<br>
如果遇到提示‘touch’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p>
<pre><code>echo test&gt;.gitignore
</code></pre>
<p><strong>看到.gitignore文件, 把下列代码添加到.gitignore文件里面</strong></p>
<pre><code>.DS_Store
node_modules
/dist
unpackage


# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
*.zip
</code></pre>
<p><strong>添加忽略规则</strong></p>
<pre><code># 忽略所有以 .a 结尾的文件
*.a

# 不能忽略所有 lib.a 文件
!lib.a

# 仅仅忽略当前目录下的 TODO 文件
/TODO

# 忽略 build 目录下的所有文件
build/

# 仅仅忽略 doc 一个目录下的所有 .txt 文件
doc/*.txt

# 忽略 doc 目录下（包括子目录）的所有 .pdf 文件
doc/**/*.pdf

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uniapp 时间表]]></title>
        <id>https://nancy-svy.github.io/post/timeTable/</id>
        <link href="https://nancy-svy.github.io/post/timeTable/">
        </link>
        <updated>2023-04-17T03:37:44.000Z</updated>
        <content type="html"><![CDATA[<p>效果图<br>
<img src="https://nancy-svy.github.io/post-images/1681714897240.png" alt="" loading="lazy"></p>
<p><strong>html</strong></p>
<pre><code>&lt;template&gt;
	&lt;view class=&quot;container&quot;&gt;
		&lt;view class=&quot;timetable&quot;&gt;
			&lt;view class=&quot;header&quot;&gt;
				&lt;view class=&quot;day&quot; @click=&quot;handlePreviousDay&quot;&gt;
					&lt;uni-icons type=&quot;left&quot; color=&quot;#333333&quot; size=&quot;12&quot;&gt;&lt;/uni-icons&gt;
					前一天
				&lt;/view&gt;
				&lt;view class=&quot;date&quot;&gt;{{nowTime}}&lt;/view&gt;
				&lt;view class=&quot;day&quot; @click=&quot;handleNextDay&quot;&gt;
					后一天
					&lt;uni-icons type=&quot;right&quot; color=&quot;#333333&quot; size=&quot;12&quot;&gt;&lt;/uni-icons&gt;
				&lt;/view&gt;
			&lt;/view&gt;
			&lt;view class=&quot;time_list&quot;&gt;
				&lt;!-- 时间表上时间显示的区域 --&gt;
				&lt;view 
				:class=&quot;['leave_box', item &amp;&amp; item.my ? 'yellowBg' : 'blueBg']&quot;
				v-for=&quot;(item,index) in tableList&quot;
				:key=&quot;index&quot;
				:style=&quot;{height: `${item.height}rpx`, top: `${item.top}rpx`}&quot;
				&gt;
				&lt;text&gt;名称&lt;/text&gt;
				&lt;/view&gt;
				&lt;!-- 时间表表格 --&gt;
				&lt;view class=&quot;time_item&quot; v-for=&quot;(item,index) in timeList&quot; :key=&quot;index&quot;&gt;
					&lt;view class=&quot;time_item_text&quot;&gt;{{item}}:00&lt;/view&gt;
					&lt;view class=&quot;time_item_leave&quot;&gt;&lt;/view&gt;
				&lt;/view&gt;
			&lt;/view&gt;
		&lt;/view&gt;
	&lt;/view&gt;
	
&lt;/template&gt;
</code></pre>
<p><strong>js</strong></p>
<pre><code>&lt;script&gt;
	import { createTime } from '@/utils/utils.js'
	export default {
		name:&quot;timetable&quot;,
		data() {
			return {
				timeList: [
					'00','01','02','03','04','05','06','07','08','09','10','11',
					'12','13','14','15','16','17','18','19','20','21','22','23'
				],
				 // 当前日期
				nowTime: '', // xx年xx月xx日
				nowParams: '', // xx/xx/xx
				 // 列表单行高度
				li_H: 62,
				// 时间表
				renderSchedule: [
					{ formetter: '2023/03/09', time: '01:00-04:00', my: false },
					{ formetter: '2023/03/09', time: '08:00-10:10', my: false },
					{ formetter: '2023/03/09', time: '05:36-06:50', my: true },
					{ formetter: '2023/03/09', time: '17:30-19:30', my: true }
				],
				// 数据处理后渲染数据
				tableList: [],
			};
		},
		mounted(){
			let now = new Date()
			this.creationTime(now)
			this.processData()
		},
		methods:{
			// 获取当前日期
			creationTime(date){
				let timeParams = createTime(date)
				this.nowTime = `${timeParams.year}年${timeParams.month}月${timeParams.day}日 ${timeParams.weekday}`
				let timeP = createTime(date)
				this.nowParams = `${timeP.year}/${timeP.month}/${timeP.day}`
			},
			// 前一天
			handlePreviousDay(){
				let beforeDate = new Date(this.nowParams)
				beforeDate.setDate(beforeDate.getDate() - 1);
				this.creationTime(beforeDate)
			},
			// 后一天
			handleNextDay(){
				let afterDate = new Date(this.nowParams);
				afterDate.setDate(afterDate.getDate() + 1);
				this.creationTime(afterDate)
			},
			// 处理渲染的时间表数据
			processData(){
				this.renderSchedule.forEach(item =&gt; {
					let timedata = item.time.split('-');
					// 小时
					let startHour = timedata[0].slice(0, 2);
					let endHour = timedata[1].slice(0, 2);
					// 分钟
					let startMinute = timedata[0].slice(-2);
					let endMinute = timedata[1].slice(-2);
					// 开始时间的与结束时间相差几小时
					let myhour = Math.abs(endHour) - Math.abs(startHour);
					// 开始时间与结束时间相差几分钟
					let minute = Math.abs(endMinute) - Math.abs(startMinute);
					// dom高度
					let dom_height = dom_height = (myhour * this.li_H) + (minute * (this.li_H / 60));
					// console.log('高度', dom_height);
					item.height = parseInt(dom_height);
					// dom顶部偏移量
					let dom_top = (Math.abs(startHour) * this.li_H) + (Math.abs(startMinute) * (this.li_H / 60));
					// console.log('dom_top', dom_top);
					item.top = parseInt(dom_top);
				})
				this.tableList = this.renderSchedule;
			},
		},
	}
&lt;/script&gt;

</code></pre>
<p><strong>css</strong></p>
<pre><code>&lt;style lang=&quot;less&quot; scoped&gt;
.container{
	padding: 20rpx 32rpx;
}
.timetable{
	border-radius: 20rpx 20rpx 0rpx 0rpx;
	border: 1px solid #DFE0EB;
	.header{
		height: 80rpx;
		background: rgba(223,224,235,0.3);
		padding:0 19rpx;
		display: flex;
		align-items: center;
		justify-content: space-between;
		border-bottom: 1px solid #DFE0EB;
		.day{
			font-size: 24rpx;
			font-family: 'SourceHanSansCN-Regular';
			font-weight: 400;
			color: #333333;
		}
		.date{
			font-size: 28rpx;
			font-family: 'Source Han Sans CN-Medium';
			font-weight: 500;
			color: #333333;
		}
	}
	.time_list{
		position: relative;
		.time_item{
			height: 61rpx;
			display: flex;
			border-bottom: 1px solid #DFE0EB;
			&amp;:last-child{
				border-bottom: 0px solid #DFE0EB;
				.time_item_text,
				.time_item_leave{
					border-bottom: 0px solid #DFE0EB;
				}
			}
			.time_item_text{
				width: 84rpx;
				height: 61rpx;
				background: #F7F9FB;
				border-right: 1px solid #DFE0EB;
				text-align: center;
				line-height: 61rpx;
				font-size: 20rpx;
				font-family: 'SourceHanSansCN-Regular';
				font-weight: 400;
				color: #333333;
			}
			.time_item_leave{
				flex: 1;
				height: 61rpx;
			}
		}
		.leave_box{
			position: absolute;
			right: 0;
			width: calc(100% - 84rpx);
			font-size: 24rpx;
			font-family: 'SourceHanSansCN-Regular';
			font-weight: 400;
			color: #333333;
			text{
				line-height: 60rpx;
				padding-left: 20rpx;
			}
		}
		.yellowBg{
			background: rgba(255, 204, 0, 0.5);
		}
		.blueBg{
			background: rgba(0, 122, 255, 0.5);
		}
	}
}
		
&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uniapp 引入外部字体]]></title>
        <id>https://nancy-svy.github.io/post/importFontFile/</id>
        <link href="https://nancy-svy.github.io/post/importFontFile/">
        </link>
        <updated>2023-04-14T09:50:09.000Z</updated>
        <content type="html"><![CDATA[<p>uni-app 支持使用字体图标，请仔细阅读官方文档：<a href="https://uniapp.dcloud.net.cn/tutorial/syntax-css.html#%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87">地址</a></p>
<h3 id="一-当字体文件小于40kb时uni-app-会自动将其转化为-base64-格式直接引入即可">一、当字体文件小于40kb时，uni-app 会自动将其转化为 base64 格式，直接引入即可</h3>
<pre><code>@font-face {
     font-family: xxxxx;
     src: url('~@/static/xxxx.ttf');
 }
</code></pre>
<h3 id="当字体文件大于40kb时需要自己转化成base64格式">当字体文件大于40kb时，需要自己转化成base64格式：</h3>
<h6 id="1-将下载好的字体文件转换成base64格式转换地址">1、将下载好的字体文件转换成base64格式，<a href="https://transfonter.org/">转换地址</a></h6>
<p><img src="https://nancy-svy.github.io/post-images/1681464749478.png" alt="" loading="lazy"><br>
####### 步骤：<br>
<img src="https://nancy-svy.github.io/post-images/1681465633635.webp" alt="" loading="lazy"></p>
<ol>
<li>点击【Add fonts】,选择文件</li>
<li>打开【Base64 encode】</li>
<li>点击【Covert】</li>
<li>点击【Download】下载文件并解压，打开 stylesheet.css 文件，复制代码</li>
</ol>
<h6 id="2-转换完成后下载文件解压后将这三个文件放入项目中的static目录下">2、转换完成后，下载文件，解压后将这三个文件放入项目中的static目录下:</h6>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1681464757016.png" alt="" loading="lazy"></figure>
<h6 id="3-在appvue中引入该文件">3、在App.vue中引入该文件</h6>
<pre><code>@import url(&quot;./static/fonts/stylesheet.css&quot;);
</code></pre>
<h6 id="4-在代码中正常使用即可">4、在代码中正常使用即可：</h6>
<pre><code>例如：font-family: YOUSHEhaoshenti;
</code></pre>
<h3 id="或者在阿里巴巴矢量图标图-地址-中查找需要下载的字体文件">或者在阿里巴巴矢量图标图 <a href="https://www.iconfont.cn/">地址</a> 中查找需要下载的字体文件</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[google  chrome问题]]></title>
        <id>https://nancy-svy.github.io/post/chromeQuestion/</id>
        <link href="https://nancy-svy.github.io/post/chromeQuestion/">
        </link>
        <updated>2023-04-12T01:05:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题">问题：</h2>
<pre><code>    打开谷歌浏览器提示：您使用的是不受支持的命令行标记:–extensions-on-chrome-urls。稳定性和安全性会有所下降。
</code></pre>
<h2 id="问题分析">问题分析：</h2>
<pre><code>    出现该提示是因为在你非官方安装插件之后
</code></pre>
<h2 id="解决办法">解决办法：</h2>
<pre><code>    在Chrome导航栏中输入[Experiments](chrome://flags ),
    搜索栏搜索【Extensions on chrome:// URLs】网址下的扩展程序，然后选择Disabled。     
</code></pre>
<p><img src="https://nancy-svy.github.io/post-images/1681261731032.png" alt="" loading="lazy"><br>
disabled 关闭<br>
enabled 启用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[压缩包添加密码]]></title>
        <id>https://nancy-svy.github.io/post/compressedPacketEncryption/</id>
        <link href="https://nancy-svy.github.io/post/compressedPacketEncryption/">
        </link>
        <updated>2023-04-12T00:44:30.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>压缩文件：找到需要压缩的文件/文件夹，右击文件，点击添加到压缩文件，开始压缩。</li>
<li>添加密码：进入压缩界面，点击添加密码</li>
<li>输入密码：进入添加密码界面后，输入密码</li>
<li>开始压缩：密码设置完成后，点击立即压缩，开始压缩文件并加密</li>
<li>压缩成功：我们可以看到压缩文件和原文件都在，说明压缩成功了。</li>
<li>解压：右击压缩文件，点击解压到，开始解压</li>
<li>需要密码：出现解压需要密码，说明密码设置成功。</li>
</ol>
]]></content>
    </entry>
</feed>