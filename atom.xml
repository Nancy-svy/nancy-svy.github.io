<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>真实の幻梦</title>
    <updated>2023-07-28T09:48:34.105Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>草在结它的种子 ，风在摇它的叶子 ，我们站着，不说话，就十分美好。</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 真实の幻梦</rights>
    <entry>
        <title type="html"><![CDATA[截图工具 把图片钉在桌面上的截图工具]]></title>
        <id>https://nancy-svy.github.io/post/screenshotTool/</id>
        <link href="https://nancy-svy.github.io/post/screenshotTool/">
        </link>
        <updated>2023-07-27T09:32:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="实现效果好处">实现效果&amp;好处</h3>
<p>方便切换到其他程序继续查看、抄写或者是与新内容进行比较</p>
<h3 id="一-qq截图">一、QQ截图</h3>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1690450974153.png" alt="" loading="lazy"></figure>
<h3 id="二-snipaste">二、Snipaste</h3>
<p>官网<br>
<a href="https://www.snipaste.com/download.html">https://www.snipaste.com/download.html</a></p>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1690450825713.png" alt="" loading="lazy"></figure>
<h3 id="三-其他截图工具">三、其他截图工具</h3>
<ol>
<li>
<p>FSCapture<br>
<strong>介绍</strong><br>
一款集图像捕捉、浏览编辑、视频录制等功能于一身的截图工具，具有体积小、功能强大、操作简便无<strong>需安装、不占内存</strong>等优点，其方便的浮动工具条和便捷的快捷键堪称完美结合。截图后的图片编辑与保存选项也特别丰富和方便，内置功能完善的图像编辑器，支持几乎所有主流图片格式，除提供缩放、旋转、剪切、格式转换、调整大小等基本功能外，还可向图像中加入标题、边框和水印、文本、线条、图形等内容，并可调整图像颜色，进行多种特效处理。</p>
<p><strong>官网</strong><br>
<a href="https://www.faststonecapture.cn/">https://www.faststonecapture.cn/</a></p>
</li>
<li>
<p>verycapture<br>
<strong>介绍</strong><br>
一款综合性的截图工具，主要有多种形状截屏、贴图、GIF/视频录制、OCR、翻译等功能</p>
</li>
<li>
<p>Pickpick<br>
<strong>介绍</strong><br>
picpick截图软件界面简洁，功能强大，支持全屏、活动窗口、矩形区域、任意形状等截取方式，简单实用。同时picpick截图软件中还有一些常用的图像处理功能，可对截取的图像进行编辑修改，是设计人员不可缺少的图像神器。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue  在发布阶段移除所有的console.log()输出语句]]></title>
        <id>https://nancy-svy.github.io/post/removeConsoleLog/</id>
        <link href="https://nancy-svy.github.io/post/removeConsoleLog/">
        </link>
        <updated>2023-07-21T02:44:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="第一种方法">第一种方法</h3>
<ol>
<li>下载插件</li>
</ol>
<pre><code>npm install babel-plugin-transform-remove-console --save-dev
</code></pre>
<ol start="2">
<li>修改bable.config.js</li>
</ol>
<pre><code>module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ],
  'env': {
    'development': {
      'plugins': ['dynamic-import-node']
    },
    // 增加以下配置编译时可以去掉console.log等
    'production': {
      'plugins': [
        [
          'transform-remove-console',
          {
            // 排除项
            'exclude': ['error', 'warn']
          }
        ]
      ]
    }
  }
}
</code></pre>
<h3 id="第二种方法">第二种方法</h3>
<p>vue-element-admin 打包后去除console</p>
<ol>
<li>下载插件</li>
</ol>
<pre><code>npm install terser-webpack-plugin --save-dev
</code></pre>
<ol start="2">
<li>在vue.config.js中加入以下代码</li>
</ol>
<pre><code>module.exports = {
  publicPath: '/',         
  outputDir: 'dist',
  assetsDir: 'static',
  // lintOnSave: process.env.NODE_ENV === 'development',
  lintOnSave: false,
  productionSourceMap: false,
  configureWebpack: {
    name: name,
    resolve: {
      alias: {
        '@': resolve('src')
      }
    }
  },
  // 移除console.log
  configureWebpack: config =&gt; {
    if (process.env.NODE_ENV === 'production') {
      config.optimization.minimizer[0].options.terserOptions.compress.warnings = false
      config.optimization.minimizer[0].options.terserOptions.compress.drop_console = true
      config.optimization.minimizer[0].options.terserOptions.compress.drop_debugger = true
      config.optimization.minimizer[0].options.terserOptions.compress.pure_funcs = ['console.log']
    }
  },

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue + iframe标签添加请求头]]></title>
        <id>https://nancy-svy.github.io/post/iframeAddRequestHeader/</id>
        <link href="https://nancy-svy.github.io/post/iframeAddRequestHeader/">
        </link>
        <updated>2023-07-10T12:33:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;iframe id=&quot;iframe&quot; src=&quot;&quot; /&gt;
</code></pre>
<pre><code>setTimeout(() =&gt; {
  var iframe = document.querySelector(&quot;#iframe&quot;);
  this.populateIframe(iframe, [[&quot;Authorization&quot;, &quot;Bearer &quot; + getToken()]]);
}, 0);
</code></pre>
<pre><code>  methods: {
    populateIframe(iframe, headers) {
      var xhr = new XMLHttpRequest();
      xhr.open(&quot;GET&quot;, 'http：localhost:8080/xxx');
      xhr.responseType = &quot;blob&quot;;
      headers.forEach((header) =&gt; {
        xhr.setRequestHeader(header[0], header[1]);
      });
      xhr.onreadystatechange = () =&gt; {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
              console.log(xhr)
            // 这个样式显示有问题
            // iframe.src = URL.createObjectURL(xhr.response);  
            iframe.src = xhr.responseURL;
          }
        }
      };
      xhr.send();
    },
  }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue  路由]]></title>
        <id>https://nancy-svy.github.io/post/router/</id>
        <link href="https://nancy-svy.github.io/post/router/">
        </link>
        <updated>2023-06-30T09:32:03.000Z</updated>
        <content type="html"><![CDATA[<h5 id="有面包屑时三级路由怎么进行跳转页面">有面包屑时，三级路由怎么进行跳转页面</h5>
<p>路由结构</p>
<pre><code>{
    path: '/nrgl',
    component: Layout,
    redirect: '/nrgl/index',
    meta: {
      title: '内容管理',
      icon: 'el-icon-s-help'
    },
    children: [
      {
        path: 'index',
        component: () =&gt; import('@/views/myview/nrgl/index'),
        name: 'index',
        meta: { title: '内容列表',  icon: 'dashboard' }
      },
      {
        path: 'detail',
        component: () =&gt; import('@/views/myview/nrgl/detail'),
        name: 'detail',
        meta: {
          title:  '内容详情',
          icon:  'dashboard', 
          noCache:  true, 
          activeMenu:  '/nrgl/index'
       },
        hidden: true
      },
    ]
  },
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI  el-input限制输入的值为整数或小数]]></title>
        <id>https://nancy-svy.github.io/post/elInputLimitation/</id>
        <link href="https://nancy-svy.github.io/post/elInputLimitation/">
        </link>
        <updated>2023-06-29T03:29:47.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;el-input
    v-model=&quot;&quot;
    oninput=&quot;value=value.replace(/[^0-9.]/g,'').replace(/^\./g, '').replace(/\.{2,}/g, '').replace('.', '$#$').replace(/\./g, '').replace('$#$', '.');&quot;
    size=&quot;mini&quot;/&gt;
</code></pre>
<p>备注：<br>
1：^不放在开头表示取否的意思，就是取相反<br>
2：replace是对你输入的字符串一个字符一个字符的去查找替换，和常见正则可以多个字符查找略有不同</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 接口返回的preview是张图片，前端如何渲染]]></title>
        <id>https://nancy-svy.github.io/post/thePreviewModuleIsAPicture/</id>
        <link href="https://nancy-svy.github.io/post/thePreviewModuleIsAPicture/">
        </link>
        <updated>2023-06-27T12:27:03.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687917326500.png" alt="" loading="lazy"></figure>
<h5 id="第一种">第一种</h5>
<p>也是最简单的一种，直接将接口地址赋值给img标签的src</p>
<pre><code>&lt;img src=&quot;https://xxx.xxx.xxx.com/img&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
<h5 id="第二种">第二种</h5>
<ol>
<li>blob<br>
api.js中设置 responseType为blod</li>
</ol>
<pre><code>export const Tqimg = () =&gt; {
  return request4({
    url: &quot;/xxx/xx/xx&quot;,
    method: &quot;get&quot;,
    // 加上下面这个
    responseType: &quot;blob&quot;,
  });
};
</code></pre>
<p>vue单文件的methods中</p>
<pre><code>async Tqimg() {
  await Tqimg().then((res) =&gt; {
    console.log(res);
    const myBlob = new window.Blob([res.data], { type: &quot;image/jpeg&quot; });
    // Tianqimg是提前定义好的模型
    this.Tianqimg = window.URL.createObjectURL(myBlob);
  });
},
</code></pre>
<p>vue单文件的template中</p>
<pre><code>&lt;img :src=&quot;Tianqimg&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
<ol start="2">
<li>arraybuffer<br>
api.js中设置 responseType为arraybuffer</li>
</ol>
<pre><code>export function verificationCode(data) {
  return serviceCode({
    url: '/code',
    method: 'get',
    data,
    responseType: 'arraybuffer' //这里是声明期望返回的数据类型,为arraybuffer
  })
}
</code></pre>
<p>vue单文件的methods中</p>
<pre><code>getCode(){
      verificationCode().then(res =&gt; {
        // console.log(res)
        const bufferUrl = btoa(new Uint8Array(res.data).reduce((data, byte) =&gt; data + String.fromCharCode(byte), ''));
        this.verificationCodePath = 'data:image/png;base64,' + bufferUrl
      })
    },
</code></pre>
<p>vue单文件的template中</p>
<pre><code>&lt;img :src=&quot;verificationCodePath&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 解决vue报You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.]]></title>
        <id>https://nancy-svy.github.io/post/runtime-onlyBuildOfVue/</id>
        <link href="https://nancy-svy.github.io/post/runtime-onlyBuildOfVue/">
        </link>
        <updated>2023-06-26T08:06:32.000Z</updated>
        <content type="html"><![CDATA[<p>
<code style="color: #c7254e;background-color: #f2f2f2;">
You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.
</code>
意思就是说 ，您使用的是仅运行时版本的Vue，这种情况下，模板编译器是不可用的，可以将模板预编译为呈现函数，也可以使用编译器包含的内部版本。
<p>
<h5> 
解决办法，将<code style="color: #c7254e;background-color: #f2f2f2;">vue.config.js</code>文件中增加<code style="color: #c7254e;background-color: #f2f2f2;">vue$: "vue/dist/vue.esm.js",</code>，然后重新运行项目即可。
<h5>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687767357725.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI   el-popconfirm 的确认事件不起作用]]></title>
        <id>https://nancy-svy.github.io/post/elPopconfirmQuestion/</id>
        <link href="https://nancy-svy.github.io/post/elPopconfirmQuestion/">
        </link>
        <updated>2023-06-21T08:26:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687336036974.png" alt="" loading="lazy"></figure>
<p>element中是 <code style="color: #c7254e;background-color: #f2f2f2;">@confirm</code> 但是使用起来没有效果，<br>
在网上查找的是 <code style="color: #c7254e;background-color: #f2f2f2;">@onConfirm</code>, 使用起来有效果</p>
<p>如果这个 <code style="color: #c7254e;background-color: #f2f2f2;">@confirm</code> 或者 <code style="color: #c7254e;background-color: #f2f2f2;">@onConfirm</code> 使用没有效果<br>
后来想到一个折中的方法：</p>
<pre><code>&lt;el-popconfirm
    title=&quot;是否删除？&quot;
    @confirm=&quot;del(scope.row)&quot;
    @onConfirm=&quot;del(scope.row)&quot;
&gt;
&lt;/el-popconfirm&gt;
</code></pre>
<p>当当当， 都用上就有效果了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[npm install 报错提示github需要权限 Permission denied (publickey) npm install 报错提示github需要权限 Permission denied (publickey)]]></title>
        <id>https://nancy-svy.github.io/post/npmInstallPermission/</id>
        <link href="https://nancy-svy.github.io/post/npmInstallPermission/">
        </link>
        <updated>2023-06-21T08:16:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-报错信息">1、报错信息</h3>
<p>npm ERR! code 128<br>
npm ERR! An unknown git error occurred<br>
npm ERR! command git --no-replace-objects ls-remote ssh://git@github.com/layouts/Admin.js.git<br>
npm ERR! git@github.com: Permission denied (publickey).<br>
npm ERR! fatal: Could not read from remote repository.<br>
npm ERR!<br>
npm ERR! Please make sure you have the correct access rights<br>
npm ERR! and the repository exists.</p>
<p>npm ERR! A complete log of this run can be found in:<br>
npm ERR! C:\Users\xxx\AppData\Local\npm-cache_logs\2022-05-30T05_33_24_378Z-debug-0.log</p>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687335592933.png" alt="" loading="lazy"></figure>
<h3 id="2-解决办法">2、解决办法</h3>
<p>运行以下命令</p>
<pre><code>git config --global http.sslverify &quot;false&quot;
</code></pre>
<p>然后再执行</p>
<pre><code>npm install
</code></pre>
<p>如果上述命令执行完后，还是报那个错误，继续执行如下命令</p>
<pre><code>git config --global url.&quot;https://&quot;.insteadOf git://
</code></pre>
<p>可以通过如下操作解决 npm 下载速度慢的问题</p>
<pre><code>npm i
nstall --registry=https://registry.npm.taobao.org
</code></pre>
<p>Error: EPERM: operation not permitted问题<br>
删除C:\Users\用户名.npmrc 文件就ok</p>
<p><a href="https://www.cnblogs.com/rainbow-tan/p/16330527.html">参考</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uniapp 小程序一个页面多个倒计时]]></title>
        <id>https://nancy-svy.github.io/post/multipleCountdowns/</id>
        <link href="https://nancy-svy.github.io/post/multipleCountdowns/">
        </link>
        <updated>2023-06-06T01:41:51.000Z</updated>
        <content type="html"><![CDATA[<p>效果图<br>
<img src="https://nancy-svy.github.io/post-images/1686015900357.png" alt="" loading="lazy"></p>
<p>封装的方法</p>
<pre><code>handleTime  (timestamp) {
	let t = Math.abs(timestamp);
	let d = Math.floor(t/100/60/60/24);
	let h = Math.floor(t/1000/60/60%24);
	let m = Math.floor(t/1000/60%60);
	let s = Math.floor(t/1000%60);
	return{
		day: d,
		hours: h,
		minute: m,
		second: s
	}
},
getRemainTime (overTime) {
	let now = new Date().getTime();
	let over = new Date(overTime).getTime();
	return this.handleTime(over - now);
},
</code></pre>
<p>调用方法</p>
<pre><code>&lt;template&gt;
   &lt;view&gt;
   	  &lt;view v-for=&quot;(item, index) in times&quot; :key=&quot;index&quot;&gt;{{ item.remainTimeNum }}&lt;/view&gt;
   &lt;/view&gt;
&lt;/template&gt;

import { getRemainTime } from @/utils/utils.js';

export default {
   data() {
   	return {
   		times: [{
            id: 1,
            applyStart:  &quot;2023-06-03 08:00:42&quot;,
            applyEnd:  &quot;2023-06-03 09:00:07&quot;,
            name:  &quot;2&quot;
            note:  &quot;1&quot;,
            phone:  &quot;1&quot;,
            placeName:  &quot;1&quot;,
         }{
            id: 2,
            applyStart:  &quot;2023-06-03 10:00:30&quot;,
            applyEnd:  &quot;2023-06-03 12:00:00&quot;,
            name:  &quot;2&quot;
            note:  &quot;1&quot;,
            phone:  &quot;1&quot;,
            placeName:  &quot;1&quot;,
         }]
   	};
   },
   onLoad() {
   		this.timer(this.times);
   },
   methods: {
   		timer(times) {
   			let that = this;
			let timeInterval = null 
			clearInterval(timeInterval)
			timeInterval = setInterval(() =&gt; {
				times.forEach((item, index) =&gt; {
					that.$set(item, 'remainTimeNum', getRemainTime(item.applyEnd))
				})
			},1000)
   		}
   }
};
&lt;/script&gt;
</code></pre>
<p>在页面渲染完成之后，对data里的某个数组或对象进行新增、删除属性是监听不到的，视图不会更新，需要使用this.$set()更新视图。</p>
<pre><code>this.$set(target, key, value)
target: 要更改的数据源(可以是一个对象或者数组)
key: 要更改的属性(字段)
value: 新增的值
</code></pre>
<p>删除属性可以使用</p>
<pre><code>this.$delete(target,key)
</code></pre>
]]></content>
    </entry>
</feed>