<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>真实の幻梦</title>
    <updated>2023-07-10T12:42:43.424Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>草在结它的种子 ，风在摇它的叶子 ，我们站着，不说话，就十分美好。</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 真实の幻梦</rights>
    <entry>
        <title type="html"><![CDATA[vue + iframe标签添加请求头]]></title>
        <id>https://nancy-svy.github.io/post/iframeAddRequestHeader/</id>
        <link href="https://nancy-svy.github.io/post/iframeAddRequestHeader/">
        </link>
        <updated>2023-07-10T12:33:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;iframe id=&quot;iframe&quot; src=&quot;&quot; /&gt;
</code></pre>
<pre><code>setTimeout(() =&gt; {
  var iframe = document.querySelector(&quot;#iframe&quot;);
  this.populateIframe(iframe, [[&quot;Authorization&quot;, &quot;Bearer &quot; + getToken()]]);
}, 0);
</code></pre>
<pre><code>  methods: {
    populateIframe(iframe, headers) {
      var xhr = new XMLHttpRequest();
      xhr.open(&quot;GET&quot;, 'http：localhost:8080/xxx');
      xhr.responseType = &quot;blob&quot;;
      headers.forEach((header) =&gt; {
        xhr.setRequestHeader(header[0], header[1]);
      });
      xhr.onreadystatechange = () =&gt; {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
            iframe.src = URL.createObjectURL(xhr.response);
          }
        }
      };
      xhr.send();
    },
  }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue  路由]]></title>
        <id>https://nancy-svy.github.io/post/router/</id>
        <link href="https://nancy-svy.github.io/post/router/">
        </link>
        <updated>2023-06-30T09:32:03.000Z</updated>
        <content type="html"><![CDATA[<h5 id="有面包屑时三级路由怎么进行跳转页面">有面包屑时，三级路由怎么进行跳转页面</h5>
<p>路由结构</p>
<pre><code>{
    path: '/nrgl',
    component: Layout,
    redirect: '/nrgl/index',
    meta: {
      title: '内容管理',
      icon: 'el-icon-s-help'
    },
    children: [
      {
        path: 'index',
        component: () =&gt; import('@/views/myview/nrgl/index'),
        name: 'index',
        meta: { title: '内容列表',  icon: 'dashboard' }
      },
      {
        path: 'detail',
        component: () =&gt; import('@/views/myview/nrgl/detail'),
        name: 'detail',
        meta: {
          title:  '内容详情',
          icon:  'dashboard', 
          noCache:  true, 
          activeMenu:  '/nrgl/index'
       },
        hidden: true
      },
    ]
  },
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI  el-input限制输入的值为整数或小数]]></title>
        <id>https://nancy-svy.github.io/post/elInputLimitation/</id>
        <link href="https://nancy-svy.github.io/post/elInputLimitation/">
        </link>
        <updated>2023-06-29T03:29:47.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;el-input
    v-model=&quot;&quot;
    oninput=&quot;value=value.replace(/[^0-9.]/g,'').replace(/^\./g, '').replace(/\.{2,}/g, '').replace('.', '$#$').replace(/\./g, '').replace('$#$', '.');&quot;
    size=&quot;mini&quot;/&gt;
</code></pre>
<p>备注：<br>
1：^不放在开头表示取否的意思，就是取相反<br>
2：replace是对你输入的字符串一个字符一个字符的去查找替换，和常见正则可以多个字符查找略有不同</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 接口返回的preview是张图片，前端如何渲染]]></title>
        <id>https://nancy-svy.github.io/post/thePreviewModuleIsAPicture/</id>
        <link href="https://nancy-svy.github.io/post/thePreviewModuleIsAPicture/">
        </link>
        <updated>2023-06-27T12:27:03.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687917326500.png" alt="" loading="lazy"></figure>
<h5 id="第一种">第一种</h5>
<p>也是最简单的一种，直接将接口地址赋值给img标签的src</p>
<pre><code>&lt;img src=&quot;https://xxx.xxx.xxx.com/img&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
<h5 id="第二种">第二种</h5>
<ol>
<li>blob<br>
api.js中设置 responseType为blod</li>
</ol>
<pre><code>export const Tqimg = () =&gt; {
  return request4({
    url: &quot;/xxx/xx/xx&quot;,
    method: &quot;get&quot;,
    // 加上下面这个
    responseType: &quot;blob&quot;,
  });
};
</code></pre>
<p>vue单文件的methods中</p>
<pre><code>async Tqimg() {
  await Tqimg().then((res) =&gt; {
    console.log(res);
    const myBlob = new window.Blob([res.data], { type: &quot;image/jpeg&quot; });
    // Tianqimg是提前定义好的模型
    this.Tianqimg = window.URL.createObjectURL(myBlob);
  });
},
</code></pre>
<p>vue单文件的template中</p>
<pre><code>&lt;img :src=&quot;Tianqimg&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
<ol start="2">
<li>arraybuffer<br>
api.js中设置 responseType为arraybuffer</li>
</ol>
<pre><code>export function verificationCode(data) {
  return serviceCode({
    url: '/code',
    method: 'get',
    data,
    responseType: 'arraybuffer' //这里是声明期望返回的数据类型,为arraybuffer
  })
}
</code></pre>
<p>vue单文件的methods中</p>
<pre><code>getCode(){
      verificationCode().then(res =&gt; {
        // console.log(res)
        const bufferUrl = btoa(new Uint8Array(res.data).reduce((data, byte) =&gt; data + String.fromCharCode(byte), ''));
        this.verificationCodePath = 'data:image/png;base64,' + bufferUrl
      })
    },
</code></pre>
<p>vue单文件的template中</p>
<pre><code>&lt;img :src=&quot;verificationCodePath&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 解决vue报You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.]]></title>
        <id>https://nancy-svy.github.io/post/runtime-onlyBuildOfVue/</id>
        <link href="https://nancy-svy.github.io/post/runtime-onlyBuildOfVue/">
        </link>
        <updated>2023-06-26T08:06:32.000Z</updated>
        <content type="html"><![CDATA[<p>
<code style="color: #c7254e;background-color: #f2f2f2;">
You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.
</code>
意思就是说 ，您使用的是仅运行时版本的Vue，这种情况下，模板编译器是不可用的，可以将模板预编译为呈现函数，也可以使用编译器包含的内部版本。
<p>
<h5> 
解决办法，将<code style="color: #c7254e;background-color: #f2f2f2;">vue.config.js</code>文件中增加<code style="color: #c7254e;background-color: #f2f2f2;">vue$: "vue/dist/vue.esm.js",</code>，然后重新运行项目即可。
<h5>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687767357725.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI   el-popconfirm 的确认事件不起作用]]></title>
        <id>https://nancy-svy.github.io/post/elPopconfirmQuestion/</id>
        <link href="https://nancy-svy.github.io/post/elPopconfirmQuestion/">
        </link>
        <updated>2023-06-21T08:26:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687336036974.png" alt="" loading="lazy"></figure>
<p>element中是 <code style="color: #c7254e;background-color: #f2f2f2;">@confirm</code> 但是使用起来没有效果，<br>
在网上查找的是 <code style="color: #c7254e;background-color: #f2f2f2;">@onConfirm</code>, 使用起来有效果</p>
<p>如果这个 <code style="color: #c7254e;background-color: #f2f2f2;">@confirm</code> 或者 <code style="color: #c7254e;background-color: #f2f2f2;">@onConfirm</code> 使用没有效果<br>
后来想到一个折中的方法：</p>
<pre><code>&lt;el-popconfirm
    title=&quot;是否删除？&quot;
    @confirm=&quot;del(scope.row)&quot;
    @onConfirm=&quot;del(scope.row)&quot;
&gt;
&lt;/el-popconfirm&gt;
</code></pre>
<p>当当当， 都用上就有效果了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[npm install 报错提示github需要权限 Permission denied (publickey) npm install 报错提示github需要权限 Permission denied (publickey)]]></title>
        <id>https://nancy-svy.github.io/post/npmInstallPermission/</id>
        <link href="https://nancy-svy.github.io/post/npmInstallPermission/">
        </link>
        <updated>2023-06-21T08:16:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-报错信息">1、报错信息</h3>
<p>npm ERR! code 128<br>
npm ERR! An unknown git error occurred<br>
npm ERR! command git --no-replace-objects ls-remote ssh://git@github.com/layouts/Admin.js.git<br>
npm ERR! git@github.com: Permission denied (publickey).<br>
npm ERR! fatal: Could not read from remote repository.<br>
npm ERR!<br>
npm ERR! Please make sure you have the correct access rights<br>
npm ERR! and the repository exists.</p>
<p>npm ERR! A complete log of this run can be found in:<br>
npm ERR! C:\Users\xxx\AppData\Local\npm-cache_logs\2022-05-30T05_33_24_378Z-debug-0.log</p>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687335592933.png" alt="" loading="lazy"></figure>
<h3 id="2-解决办法">2、解决办法</h3>
<p>运行以下命令</p>
<pre><code>git config --global http.sslverify &quot;false&quot;
</code></pre>
<p>然后再执行</p>
<pre><code>npm install
</code></pre>
<p>如果上述命令执行完后，还是报那个错误，继续执行如下命令</p>
<pre><code>git config --global url.&quot;https://&quot;.insteadOf git://
</code></pre>
<p>可以通过如下操作解决 npm 下载速度慢的问题</p>
<pre><code>npm i
nstall --registry=https://registry.npm.taobao.org
</code></pre>
<p>Error: EPERM: operation not permitted问题<br>
删除C:\Users\用户名.npmrc 文件就ok</p>
<p><a href="https://www.cnblogs.com/rainbow-tan/p/16330527.html">参考</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uniapp 小程序一个页面多个倒计时]]></title>
        <id>https://nancy-svy.github.io/post/multipleCountdowns/</id>
        <link href="https://nancy-svy.github.io/post/multipleCountdowns/">
        </link>
        <updated>2023-06-06T01:41:51.000Z</updated>
        <content type="html"><![CDATA[<p>效果图<br>
<img src="https://nancy-svy.github.io/post-images/1686015900357.png" alt="" loading="lazy"></p>
<p>封装的方法</p>
<pre><code>handleTime  (timestamp) {
	let t = Math.abs(timestamp);
	let d = Math.floor(t/100/60/60/24);
	let h = Math.floor(t/1000/60/60%24);
	let m = Math.floor(t/1000/60%60);
	let s = Math.floor(t/1000%60);
	return{
		day: d,
		hours: h,
		minute: m,
		second: s
	}
},
getRemainTime (overTime) {
	let now = new Date().getTime();
	let over = new Date(overTime).getTime();
	return this.handleTime(over - now);
},
</code></pre>
<p>调用方法</p>
<pre><code>&lt;template&gt;
   &lt;view&gt;
   	  &lt;view v-for=&quot;(item, index) in times&quot; :key=&quot;index&quot;&gt;{{ item.remainTimeNum }}&lt;/view&gt;
   &lt;/view&gt;
&lt;/template&gt;

import { getRemainTime } from @/utils/utils.js';

export default {
   data() {
   	return {
   		times: [{
            id: 1,
            applyStart:  &quot;2023-06-03 08:00:42&quot;,
            applyEnd:  &quot;2023-06-03 09:00:07&quot;,
            name:  &quot;2&quot;
            note:  &quot;1&quot;,
            phone:  &quot;1&quot;,
            placeName:  &quot;1&quot;,
         }{
            id: 2,
            applyStart:  &quot;2023-06-03 10:00:30&quot;,
            applyEnd:  &quot;2023-06-03 12:00:00&quot;,
            name:  &quot;2&quot;
            note:  &quot;1&quot;,
            phone:  &quot;1&quot;,
            placeName:  &quot;1&quot;,
         }]
   	};
   },
   onLoad() {
   		this.timer(this.times);
   },
   methods: {
   		timer(times) {
   			let that = this;
			let timeInterval = null 
			clearInterval(timeInterval)
			timeInterval = setInterval(() =&gt; {
				times.forEach((item, index) =&gt; {
					that.$set(item, 'remainTimeNum', getRemainTime(item.applyEnd))
				})
			},1000)
   		}
   }
};
&lt;/script&gt;
</code></pre>
<p>在页面渲染完成之后，对data里的某个数组或对象进行新增、删除属性是监听不到的，视图不会更新，需要使用this.$set()更新视图。</p>
<pre><code>this.$set(target, key, value)
target: 要更改的数据源(可以是一个对象或者数组)
key: 要更改的属性(字段)
value: 新增的值
</code></pre>
<p>删除属性可以使用</p>
<pre><code>this.$delete(target,key)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postman报错Error: write EPROTO 67713288:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER]]></title>
        <id>https://nancy-svy.github.io/post/testInterfaceError/</id>
        <link href="https://nancy-svy.github.io/post/testInterfaceError/">
        </link>
        <updated>2023-05-29T09:40:25.000Z</updated>
        <content type="html"><![CDATA[<p><strong>postman报错Error: write EPROTO 67713288:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER</strong></p>
<p>使用postman时报错如下: <code style="color: #c7254e;background-color: #f2f2f2;"> Error: write EPROTO 93988952:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER:…/…/third_party/boringssl/src/ssl/tls_record.cc:242:</code></p>
<p><strong>debug</strong><br>
把https改成http，去掉s就能正常检测接口啦</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 日历组件]]></title>
        <id>https://nancy-svy.github.io/post/calendar-component/</id>
        <link href="https://nancy-svy.github.io/post/calendar-component/">
        </link>
        <updated>2023-05-25T08:41:24.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1685004547966.png" alt="" loading="lazy"></figure>
<h3 id="子组件">子组件</h3>
<pre><code>&lt;template&gt;
  &lt;div class=&quot;cal_con&quot;&gt;
    &lt;div class=&quot;cal_header&quot;&gt;
      &lt;div class=&quot;cal_h_left&quot;&gt;
		&lt;!-- 上一年按钮 --&gt;
        &lt;div class=&quot;cal_h_btn&quot; @click=&quot;preYear&quot;&gt;
			&lt;svg-icon icon-class=&quot;el-icon-d-arrow-left&quot; class-name=&quot;cal_h_l_icon&quot;&gt;&lt;/svg-icon&gt;
        &lt;/div&gt;
		&lt;!-- 上个月按钮 --&gt;
        &lt;div class=&quot;cal_h_btn&quot; @click=&quot;preMonth&quot;&gt;
			&lt;svg-icon icon-class=&quot;el-icon-arrow-left&quot; class-name=&quot;cal_h_l_icon&quot;&gt;&lt;/svg-icon&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div&gt;
        &lt;span class=&quot;cal_h_time&quot;&gt;&lt;span class=&quot;cal_h_time_text&quot;&gt;{{ year }}&lt;/span&gt; 年 &lt;/span&gt;
        &lt;span class=&quot;cal_h_time&quot;&gt;&lt;span class=&quot;cal_h_time_text&quot;&gt;{{ month }}&lt;/span&gt; 月&lt;/span&gt;
      &lt;/div&gt;

      &lt;div class=&quot;cal_h_left&quot;&gt;
		  &lt;!-- 下个月按钮 --&gt;
        &lt;div class=&quot;cal_h_btn&quot; @click=&quot;nextMonth&quot;&gt;
			&lt;svg-icon icon-class=&quot;el-icon-arrow-right&quot; class-name=&quot;cal_h_l_icon&quot;&gt;&lt;/svg-icon&gt;
        &lt;/div&gt;
		&lt;!-- 下一年按钮 --&gt;
        &lt;div class=&quot;cal_h_btn&quot; @click=&quot;nextYear&quot;&gt;
			&lt;svg-icon icon-class=&quot;el-icon-d-arrow-right&quot; class-name=&quot;cal_h_l_icon&quot;&gt;&lt;/svg-icon&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;cal_month&quot;&gt;
	  &lt;!-- 星期 --&gt;
      &lt;div class=&quot;cal_m_weeks&quot;&gt;
        &lt;span class=&quot;cal_m_day_cell&quot; v-for=&quot;(wItem, wIndex) in weeks&quot; :key=&quot;wIndex&quot;&gt;{{ wItem }}&lt;/span&gt;
      &lt;/div&gt;

      &lt;div class=&quot;cal_m_days&quot;&gt;
        &lt;div class=&quot;cal_m_day_line&quot; v-for=&quot;(ds, index) in monthData&quot; :key=&quot;index&quot;&gt;
          &lt;div
            v-for=&quot;d in ds&quot;
            :key=&quot;d.day&quot;
            :class=&quot;['cal_m_day_cell',{
				'current_date': d.fullYear == currentYear &amp;&amp; d.month == currentMonth &amp;&amp; d.day == currentDay,
				'active_cell': selectObj.fullYear == d.fullYear &amp;&amp; selectObj.month == d.month &amp;&amp; selectObj.day == d.day
			}]&quot;
            :style=&quot;getCellColor(d)&quot;
            @mouseenter=&quot;mouseenter(d, $event)&quot;
            @mouseleave=&quot;mouseleave(d, $event)&quot;
		    @click=&quot;handleSelected(d)&quot;
          &gt;
            {{ d.day }}
			&lt;!-- &lt;slot :name=&quot;d.fullYear + '-' + d.month + '-' + d.day&quot;&gt;&lt;/slot&gt; --&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

  &lt;/div&gt;
&lt;/template&gt;

</code></pre>
<p><strong>js</strong></p>
<pre><code>&lt;script&gt;
export default {
  name: 'Calendar',
  props: {
    date: {
      type: Date,
      default: () =&gt; new Date()
    }
  },
  data () {
    return {
      now: this.date,
      year: 0,
      month: 0,
      weeks: [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;],
      monthData: [],
      currentYear: new Date().getFullYear(), // 当前年
      currentMonth: new Date().getMonth() + 1, // 当前月
      currentDay: new Date().getDate(), // 当前日
	  // 选中的数据
	  selectObj: {
		fullYear: new Date().getFullYear(),
		month: new Date().getMonth() + 1,
		day: new Date().getDate()
	  },
    }
  },
  computed: {
	  
  },
  mounted () {
    this.setYearMonth(this.now)
    this.generateMonth(this.now)
  },
  methods: {
	// 设置年月
    setYearMonth (now) {
      this.year = now.getFullYear()
      this.month = now.getMonth() + 1
    },
	// 上一年按钮
    preYear () {
      let n = this.now
      let date = new Date(n.getFullYear() - 1, n.getMonth(), n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), n.getMilliseconds());
      this.setYearMonthInfos(date)
    },
	// 上个月按钮
    preMonth () {
      let n = this.now
      let date = new Date(n.getFullYear(), n.getMonth() - 1, n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), n.getMilliseconds());
	  this.setYearMonthInfos(date)
    },
	// 下一年按钮
    nextYear () {
      let n = this.now
      let date = new Date(n.getFullYear() + 1, n.getMonth(), n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), n.getMilliseconds());
      this.setYearMonthInfos(date)
    },
	// 下个月按钮
    nextMonth () {
      let n = this.now
      let date = new Date(n.getFullYear(), n.getMonth() + 1, n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), n.getMilliseconds());
      this.setYearMonthInfos(date)
    },
	// 设置年月的详细信息
    setYearMonthInfos (date) {
      this.setYearMonth(date)
      this.generateMonth(date)
      this.now = date
      this.dateChange()
    },
	// 生成月份
    generateMonth (date) {
      date.setDate(1)
      // 星期 0 - 6， 星期天 - 星期6
      let weekStart = date.getDay()

      let endDate = new Date(date.getFullYear(), date.getMonth() + 1, 0)
      let dayEnd = endDate.getDate()
      // 星期 0 - 6， 星期天 - 星期6
      let weeEnd = endDate.getDay()

      let milsStart = date.getTime()
      let dayMils = 24 * 60 * 60 * 1000
      let milsEnd = endDate.getTime() + dayMils

      let monthDatas = []
      let current;
      // 上个月的几天
      for (let i = 0; i &lt; weekStart; i++) {
        current = new Date(milsStart - (weekStart - i) * dayMils)
        monthDatas.push({
          type: -1,
          date: current,
          fullYear: current.getFullYear(),
          month: current.getMonth() + 1,
          day: current.getDate()
        })
      }
      // 当前月
      for (let i = 0; i &lt; dayEnd; i++) {
        current = new Date(milsStart + i * dayMils)
        monthDatas.push({
          type: 0,
          date: current,
          fullYear: current.getFullYear(),
          month: current.getMonth() + 1,
          day: current.getDate()
        })
      }
      // 下个月的几天
      for (let i = 0; i &lt; (6 - weeEnd); i++) {
        current = new Date(milsEnd + i * dayMils)
        monthDatas.push({
          type: 1,
          date: current,
          fullYear: current.getFullYear(),
          month: current.getMonth() + 1,
          day: current.getDate()
        })
      }

      this.monthData = []
      for (let i = 0; i &lt; monthDatas.length; i++) {
        let mi = i % 7;
        if (mi == 0) {
          this.monthData.push([])
        }
        this.monthData[Math.floor(i / 7)].push(monthDatas[i])
      }

      // 少于6行，补足6行
      if (this.monthData.length &lt;= 5) {
        milsStart = current.getTime()
        let lastLine = []
        for (let i = 1; i &lt;= 7; i++) {
          current = new Date(milsStart + i * dayMils)
          lastLine.push({
            type: 1,
            date: current,
            fullYear: current.getFullYear(),
            month: current.getMonth() + 1,
            day: current.getDate()
          })
        }
        this.monthData.push(lastLine)
      }
    },
	// 当前月份中不存在的日期
    getCellColor (d) {
      let color = d.type == -1 ? 'color: #c0c4cc;' : (d.type == 1 ? 'color: #c0c4cc;' : '')
      return color;
    },
	// 鼠标移入事件
    mouseenter (d, event) {
      this.$emit(&quot;enter&quot;, event, d)
    },
	// 鼠标移出事件
    mouseleave (d, event) {
      this.$emit(&quot;leave&quot;, event, d)
    },
	// 选中的日期
	handleSelected(d){
		if(d.month &lt; this.selectObj.month){
			this.preMonth()
		}else if(d.month &gt; this.selectObj.month){
			this.nextMonth()
		}
		this.selectObj = d
		
		this.$emit(&quot;selected&quot;, d)
	},
	// 数据改变
    dateChange () {
      let fullYear = this.now.getFullYear()
      let month = this.now.getMonth()

      let startDay = new Date(fullYear, month, 1)
      let endDay = new Date(fullYear, month + 1, 0, 23, 59, 59)

      this.$emit(&quot;changeMonth&quot;, startDay, endDay)
    }
  }
}
&lt;/script&gt;
</code></pre>
<p><strong>css</strong></p>
<pre><code>&lt;style scoped lang=&quot;scss&quot;&gt;
.cal_con {
  width: 100%;
  height: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  color: #606266;
  // border: 1px solid #e4e7ed;
  // box-shadow: 0 2px 12px 0 #0000006e;
  background: #fff;
  border-radius: 4px;
  margin: auto;
  .cal_header {
	margin: 12px;
	text-align: center;
    font-size: 16px;
    display: flex;
    justify-content: space-between;
    justify-items: center;
    .cal_h_time {
      cursor: pointer;
	  .cal_h_time_text{
		  color: #02C2B0;
	  }
    }
    .cal_h_left {
      height: 100%;
      display: flex;
      .cal_h_btn {
        height: 100%;
        width: 24px;
        cursor: pointer;
      }
      .cal_h_l_icon {
		/* height: 8px;
        width: 12px;*/
        height: 24px;
        width: 24px;
        margin: auto;
		&amp;:hover{
			color: #02C2B0;
		}
      }
    }
  }
  .cal_month {
    font-size: 12px;
    text-align: center;
    height: calc(100% - 34px);
    .cal_m_day_cell {
      width: 24px;
      height: 24px;
      line-height: 24px;
      cursor: pointer;
      position: relative;
	  &amp;:hover {
		color: #02C2B0;
		border: 1px solid #409eff;
	  }
    }
	.active_cell{
		color: #02C2B0;
		border: 1px solid #02C2B0;
	}
	.current_date{
		color: #02C2B0;
	}
    .cal_m_weeks {
      padding: 8px;
      display: flex;
      justify-content: space-around;
      justify-items: center;
      border-bottom: 1px solid #e4e7ed;
    }
    .cal_m_days {
      height: calc(100% - 49px);
      padding: 8px;
      display: flex;
      justify-content: space-around;
      justify-items: center;
      flex-wrap: wrap;
      .cal_m_day_line {
        width: 100%;
        display: flex;
        justify-content: space-around;
        justify-items: center;
      }
    }
  }
}
&lt;/style&gt;
</code></pre>
<h3 id="父组件">父组件</h3>
<pre><code>&lt;template&gt;
	&lt;div class=&quot;calendar-box&quot;&gt;
		&lt;Calendar :date=&quot;new Date()&quot; @selected=&quot;selected&quot;/&gt;
	&lt;/div&gt;
&lt;/template&gt;
</code></pre>
<p><strong>js</strong></p>
<pre><code>&lt;script&gt;
	import Calendar from './components/calendar.vue'
	export default{
		components: {
			Calendar
		},
		data(){
			return{
				
			}
		},
		methods: {
			selected(dateInfo){
				console.log('选中的日期', dateInfo)
			},
		}
	}
&lt;/script&gt;
</code></pre>
<p><strong>css</strong></p>
<pre><code>&lt;style lang=&quot;scss&quot; scoped&gt;
	.calendar-box{
		width: 300px;
		height: 300px;
	}
&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
</feed>