<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nancy-svy.github.io</id>
    <title>真实の幻梦</title>
    <updated>2023-09-05T07:31:06.489Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nancy-svy.github.io"/>
    <link rel="self" href="https://nancy-svy.github.io/atom.xml"/>
    <subtitle>草在结它的种子 ，风在摇它的叶子 ，我们站着，不说话，就十分美好。</subtitle>
    <logo>https://nancy-svy.github.io/images/avatar.png</logo>
    <icon>https://nancy-svy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 真实の幻梦</rights>
    <entry>
        <title type="html"><![CDATA[vue 常用修饰符]]></title>
        <id>https://nancy-svy.github.io/post/vue-chang-yong-xiu-shi-fu/</id>
        <link href="https://nancy-svy.github.io/post/vue-chang-yong-xiu-shi-fu/">
        </link>
        <updated>2023-08-28T05:53:29.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>事件修饰符</li>
</ol>
<pre><code>.stop  阻止事件冒泡

.prevent   提交事件不再重复加载页面，阻止表单提交的默认行为

.capture   优先触发 用于捕获监听，冒泡是从内到外，捕获是从外到里

.self   只有自己能触发，子元素无法触发

.once   点击事件只触发一次

.native  使用时将被当成原生HTML标签看待
</code></pre>
<ol start="2">
<li>按键修饰符</li>
</ol>
<pre><code>@keyup  键盘抬起

@keydown  键盘按下

space=''      对键盘输入空格进行监听

按键码的别名：
      .enter 
      .tab 
      .delete 
      .esc 
      .space 
      .up 
      .down 
      .left 
      .right
</code></pre>
<ol start="3">
<li>表单修饰符</li>
</ol>
<pre><code>.lazy：在表单输入时不会马上显示在页面，而是等输入完成失去焦点时才会显示；

.trim：过滤表单输入时两边的空格；

.number：限制输入数字或将输入的数据转为数字
</code></pre>
<ol start="4">
<li>系统修饰符</li>
</ol>
<pre><code>@click.strl     点击+按住ctrl键，才能实现方法

类似的还有：
    .ctrl 
    .alt 
    .shift 
    .meta

.exact 修饰符    赋值其他修饰符进行精确匹配，@click.ctrl  必须只点击+按住ctrl键才会触发方法，另外还按住其他键不会触发
 用法  @click.ctrl.exact=&quot;&quot;
</code></pre>
<ol start="5">
<li>鼠标按键修饰符</li>
</ol>
<pre><code>主要是鼠标的左右键、滚轮
 @click.rigth 触发鼠标右击事件

 @click.rigth.prevent 右键生效，prevent可以取消右击的默认事件，顺序不可以乱
  
.middle触发滚轮事件
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[el-tree树形实现点击按钮tree节点上下移动]]></title>
        <id>https://nancy-svy.github.io/post/tree-move-up-and-down/</id>
        <link href="https://nancy-svy.github.io/post/tree-move-up-and-down/">
        </link>
        <updated>2023-08-22T06:57:13.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1692687647247.png" alt="" loading="lazy"></figure>
<p><em>图标</em></p>
<div style="display: flex; justify-content: space-evenly; background: #C0C4CC; margin-bottom: 20px; height: 60px;">
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1692687941408.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://nancy-svy.github.io/post-images/1692687947383.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://nancy-svy.github.io/post-images/1692687926239.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://nancy-svy.github.io/post-images/1692687932013.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://nancy-svy.github.io/post-images/1692687906222.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://nancy-svy.github.io/post-images/1692687914668.png" alt="" loading="lazy"></figure>
</div>
<pre><code>&lt;div class=&quot;treeBox&quot;  v-loading=&quot;treeLoading&quot;&gt;
    &lt;el-tree
        class=&quot;departmentTree&quot;
        :data=&quot;treeData&quot;
        node-key=&quot;id&quot;
        ref=&quot;tree&quot;
        highlight-current
        default-expand-all
        :current-node-key=&quot;selectedItemId&quot;
        :props=&quot;{children: 'children', label: 'label'}&quot;
        @node-click=&quot;nodeClick&quot;
    &gt;
        &lt;div class=&quot;custom-tree-node&quot; slot-scope=&quot;{ node, data }&quot;&gt;
            &lt;div class=&quot;iconFile&quot;&gt;&lt;/div&gt;
            &lt;template v-if=&quot;data.isEditing&quot;&gt;
                &lt;el-input class=&quot;nameInput&quot; v-model=&quot;data.label&quot; size=&quot;mini&quot; placeholder=&quot;输入名称&quot;&gt;
                    &lt;img slot=&quot;suffix&quot; class=&quot;iconSure&quot; src=&quot;@/assets/images/icon_sure.png&quot; alt=&quot;&quot; @click.stop=&quot;sureCreate(node, data)&quot;&gt;
                    &lt;img slot=&quot;suffix&quot; class=&quot;iconClose&quot; src=&quot;@/assets/images/icon_close.png&quot; alt=&quot;&quot; @click.stop=&quot;cancelCreate(node, data)&quot;&gt;
                &lt;/el-input&gt;
            &lt;/template&gt;
            &lt;template v-else&gt;
                &lt;span class=&quot;fileName&quot;&gt;{{ data.label }}&lt;/span&gt;
                &lt;!-- 三个点图片 --&gt;
                &lt;el-dropdown 
                    v-if=&quot;selectedItemId == data.id&quot; 
                    trigger=&quot;click&quot; 
                    @command=&quot;dropDownClick($event, data, node)&quot;
                &gt;
                    &lt;div class=&quot;el-dropdown-link&quot;&gt;
                        &lt;div class=&quot;iconMore&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;el-dropdown-menu slot=&quot;dropdown&quot; class=&quot;simu-dropdown&quot;&gt;
                        &lt;el-dropdown-item
                            v-for=&quot;item in nodeHandles&quot;
                            :key=&quot;item&quot;
                            :command=&quot;item&quot;
                        &gt;
                            {{item}}
                        &lt;/el-dropdown-item&gt;
                    &lt;/el-dropdown-menu&gt;
                &lt;/el-dropdown&gt;
                &lt;div v-else class=&quot;iconMore&quot;&gt;&lt;/div&gt;
            &lt;/template&gt;
        &lt;/div&gt;
    &lt;/el-tree&gt;
&lt;/div&gt;
</code></pre>
<pre><code>&lt;script&gt;
    export default {
        data(){
            return{
                treeLoading: false,
                // 列表
                treeData: [{
                    id: '1',
                    label: '一级 1',
                    isEditing: false,
                    children: [{
                        id: '2',
                        label: '二级 1-1',
                        isEditing: false,
                        children: [{
                            id: '11',
                            label: '三级 1-1-1',
                            isEditing: false,
                        }]
                    }]
                    }, {
                        id: '3',
                        label: '一级 2',
                        isEditing: false,
                        children: [{
                            id: '4',
                            label: '二级 2-1',
                            isEditing: false,
                            children: [{
                                id: '5',
                                label: '三级 2-1-1',
                                isEditing: false,
                            }]
                        }, {
                            id: '6',
                            label: '二级 2-2',
                            isEditing: false,
                            children: [{
                                id: '7',
                                label: '三级 2-2-1',
                                isEditing: false,
                            }]
                        }]
                    }, {
                        id: '8',
                        label: '一级 3',
                        isEditing: false,
                        children: [{
                            id: '9',
                            label: '二级 3-1',
                            isEditing: false,
                            children: [{
                                id: '10',
                                label: '三级 3-1-1',
                                isEditing: false,
                            }]
                        }, {
                            id: '11',
                            label: '二级 3-2',
                            isEditing: false,
                            children: [{
                                id: '12',
                                label: '三级 3-2-1',
                                isEditing: false,
                            }]
                        }
                    ]
                }],
                selectedItemId: '', // 选中的id
                nodeHandles: ['添加子部门','修改名称','删除','上移','下移'],
            }
        },
        mounted(){

        },
        methods:{
            // el-tree的节点点击事件
            nodeClick (event) {
                this.selectedItemId = event.id
                this.$nextTick(() =&gt; {
                    this.$refs.tree.setCurrentKey(this.selectedItemId)
                })
            },
            // 树节点操作
            dropDownClick(val, data, node){
                this.treeType = val
                if(val == '添加子部门'){
                    let addFind = (arr, data) =&gt; {
                        arr.forEach(item =&gt; {
                            if(item.id == data.id){
                                item.children.push({
                                    id: item.id + 's',
                                    isEditing: true,
                                    label: '',
                                    parentId: item.id
                                })
                            }else if(item.children &amp;&amp; item.children.length != 0){
                                addFind(item.children, data);
                            }
                        })
                    }
                    addFind(this.treeData, data)
                }else if(val == '修改名称'){
                    this.findTree(this.treeData, data.id);
                }else if(val == '删除'){
                    this.$message.success('删除成功')
                       
                }else if(val == '上移'){
                    let fatherChildren = node.parent.data.children || []
                    let selfIndex = fatherChildren.findIndex(a =&gt; a.id == data.id)
                    if (selfIndex) {
                        let reqData = {
                            id: data.id, 
                            changeId: fatherChildren[selfIndex - 1].id
                        }
                        console.log('上移', reqData)
                        
                    } else {
                        this.$message.warning('不能再上移了')
                    }
                }else if(val == '下移'){
                    let fatherChildren = node.parent.data.children || []
                    let selfIndex = fatherChildren.findIndex(a =&gt; a.id == data.id)
                    if (selfIndex == fatherChildren.length - 1) {
                        this.$message.warning('不能再下移了')
                    } else {
                        let downData = {
                            id: data.id, 
                            changeId: fatherChildren[selfIndex + 1].id
                        }
                        console.log('下移', downData)
                        
                    }
                }
            },
            // 根据id 修改isEditing值
            findTree(arr, id){
                arr.forEach((item) =&gt; { 
                    if(item.id == id){        
                        item.isEditing = !item.isEditing;
                        return item;
                    }else if(item.children &amp;&amp; item.children.length != 0){
                        this.findTree(item.children, id);                        
                    }                   
                })
            },
            // 确认添加、修改子级
            sureCreate(node, data){
                if(this.treeType == '添加子部门'){
                    this.findTree(this.treeData, data.id)
                    this.$message.success('添加成功')

                }else if(this.treeType == '修改名称'){
                    this.findTree(this.treeData, data.id)
                    this.$message.success('修改成功')
                    
                }
            },
            // 取消添加、修改子级
            cancelCreate(node, data){
                if(this.treeType == '添加子部门'){
                    let find = (arr, id) =&gt; {
                        arr.forEach((item, index) =&gt; { 
                            if(item.id == id){   
                                console.log(item.id ) 
                                console.log(id )  
                                arr.splice(index, 1)
                            }else if(item.children &amp;&amp; item.children.length != 0){
                                find(item.children, id);                        
                            }                   
                        })
                    }
                    find(this.treeData, data.id)
                }else if(this.treeType == '修改名称'){
                    this.findTree(this.treeData, data.id)
                }
            },
        }
    }
&lt;/script&gt;
</code></pre>
<pre><code>&lt;style lang=&quot;scss&quot;&gt;
.treeBox{
    .departmentTree {
        .el-tree-node__content {
            height: 32px;
            &amp;:hover{
                background: #EBEDF0;
            }
        }
        .el-tree-node.is-current {
            &amp;&gt;.el-tree-node__content {
                background-color: #02C2B0;
                .iconFile {
                    background-image: url('./assets/images/organization-default.png');
                }
                .iconMore {
                    opacity: 1 !important;
                    background-image: url('./assets/images/icon_more_active.png');
                }
                .fileName,.el-tree-node__expand-icon {
                    color: #fff;
                }
                .el-tree-node__expand-icon.is-leaf{
                    color: transparent;
                    cursor: default;
                }
            }
        }
        .custom-tree-node {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: space-between;
            .iconFile {
                width: 14px;
                height: 14px;
                margin-right: 6px;
                background-image: url('./assets/images/organization.png');
                background-repeat: no-repeat;
                background-size: cover;
            }
            .iconSure {
                margin: 0 6px;
            }
            .iconClose {
                margin-right: 11px;
            }
            .nameInput {
                flex: 1;
                background: #fff;
                input {
                    width: calc(100% - 56px);
                    height: 22px;
                    padding: 0 4px;
                    background: #EBEBEB;
                    border-radius: 0;
                    border: none;
                } 
                .el-input__suffix {
                    right: 0;
                }
                .iconClose{
                    margin-right: 0;
                }
            }
            .fileName {
                flex: 1;
                line-height: 22px;
                font-size: 14px;
                color: #303133;
            }
            .iconMore {
                opacity: 0;
                width: 2px;
                height: 10px;
                margin: 6px 12px;
                background-image: url('./assets/images/icon_more.png');
                background-repeat: no-repeat;
                background-size: cover;
            }
        }
    }
    .el-dropdown-menu__item:hover {
        background-color: #7BDFD6!important;
        color: #fff!important;
    }
}
.simu-dropdown{
    li:hover{
        color: #fff!important;
        background: #7BDFD6!important;
    }
}

&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[截图工具 把图片钉在桌面上的截图工具]]></title>
        <id>https://nancy-svy.github.io/post/screenshotTool/</id>
        <link href="https://nancy-svy.github.io/post/screenshotTool/">
        </link>
        <updated>2023-07-27T09:32:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="实现效果好处">实现效果&amp;好处</h3>
<p>方便切换到其他程序继续查看、抄写或者是与新内容进行比较</p>
<h3 id="一-qq截图">一、QQ截图</h3>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1690450974153.png" alt="" loading="lazy"></figure>
<h3 id="二-snipaste">二、Snipaste</h3>
<p>官网<br>
<a href="https://www.snipaste.com/download.html">https://www.snipaste.com/download.html</a></p>
<figure data-type="image" tabindex="2"><img src="https://nancy-svy.github.io/post-images/1690450825713.png" alt="" loading="lazy"></figure>
<h3 id="三-其他截图工具">三、其他截图工具</h3>
<ol>
<li>
<p>FSCapture<br>
<strong>介绍</strong><br>
一款集图像捕捉、浏览编辑、视频录制等功能于一身的截图工具，具有体积小、功能强大、操作简便无<strong>需安装、不占内存</strong>等优点，其方便的浮动工具条和便捷的快捷键堪称完美结合。截图后的图片编辑与保存选项也特别丰富和方便，内置功能完善的图像编辑器，支持几乎所有主流图片格式，除提供缩放、旋转、剪切、格式转换、调整大小等基本功能外，还可向图像中加入标题、边框和水印、文本、线条、图形等内容，并可调整图像颜色，进行多种特效处理。</p>
<p><strong>官网</strong><br>
<a href="https://www.faststonecapture.cn/">https://www.faststonecapture.cn/</a></p>
</li>
<li>
<p>verycapture<br>
<strong>介绍</strong><br>
一款综合性的截图工具，主要有多种形状截屏、贴图、GIF/视频录制、OCR、翻译等功能</p>
</li>
<li>
<p>Pickpick<br>
<strong>介绍</strong><br>
picpick截图软件界面简洁，功能强大，支持全屏、活动窗口、矩形区域、任意形状等截取方式，简单实用。同时picpick截图软件中还有一些常用的图像处理功能，可对截取的图像进行编辑修改，是设计人员不可缺少的图像神器。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue  在发布阶段移除所有的console.log()输出语句]]></title>
        <id>https://nancy-svy.github.io/post/removeConsoleLog/</id>
        <link href="https://nancy-svy.github.io/post/removeConsoleLog/">
        </link>
        <updated>2023-07-21T02:44:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="第一种方法">第一种方法</h3>
<ol>
<li>下载插件</li>
</ol>
<pre><code>npm install babel-plugin-transform-remove-console --save-dev
</code></pre>
<ol start="2">
<li>修改bable.config.js</li>
</ol>
<pre><code>module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ],
  'env': {
    'development': {
      'plugins': ['dynamic-import-node']
    },
    // 增加以下配置编译时可以去掉console.log等
    'production': {
      'plugins': [
        [
          'transform-remove-console',
          {
            // 排除项
            'exclude': ['error', 'warn']
          }
        ]
      ]
    }
  }
}
</code></pre>
<h3 id="第二种方法">第二种方法</h3>
<p>vue-element-admin 打包后去除console</p>
<ol>
<li>下载插件</li>
</ol>
<pre><code>npm install terser-webpack-plugin --save-dev
</code></pre>
<ol start="2">
<li>在vue.config.js中加入以下代码</li>
</ol>
<pre><code>module.exports = {
  publicPath: '/',         
  outputDir: 'dist',
  assetsDir: 'static',
  // lintOnSave: process.env.NODE_ENV === 'development',
  lintOnSave: false,
  productionSourceMap: false,
  configureWebpack: {
    name: name,
    resolve: {
      alias: {
        '@': resolve('src')
      }
    }
  },
  // 移除console.log
  configureWebpack: config =&gt; {
    if (process.env.NODE_ENV === 'production') {
      config.optimization.minimizer[0].options.terserOptions.compress.warnings = false
      config.optimization.minimizer[0].options.terserOptions.compress.drop_console = true
      config.optimization.minimizer[0].options.terserOptions.compress.drop_debugger = true
      config.optimization.minimizer[0].options.terserOptions.compress.pure_funcs = ['console.log']
    }
  },

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue + iframe标签添加请求头]]></title>
        <id>https://nancy-svy.github.io/post/iframeAddRequestHeader/</id>
        <link href="https://nancy-svy.github.io/post/iframeAddRequestHeader/">
        </link>
        <updated>2023-07-10T12:33:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;iframe id=&quot;iframe&quot; src=&quot;&quot; /&gt;
</code></pre>
<pre><code>setTimeout(() =&gt; {
  var iframe = document.querySelector(&quot;#iframe&quot;);
  this.populateIframe(iframe, [[&quot;Authorization&quot;, &quot;Bearer &quot; + getToken()]]);
}, 0);
</code></pre>
<pre><code>  methods: {
    populateIframe(iframe, headers) {
      var xhr = new XMLHttpRequest();
      xhr.open(&quot;GET&quot;, 'http：localhost:8080/xxx');
      xhr.responseType = &quot;blob&quot;;
      headers.forEach((header) =&gt; {
        xhr.setRequestHeader(header[0], header[1]);
      });
      xhr.onreadystatechange = () =&gt; {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
              console.log(xhr)
            // 这个样式显示有问题
            // iframe.src = URL.createObjectURL(xhr.response);  
            iframe.src = xhr.responseURL;
          }
        }
      };
      xhr.send();
    },
  }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue  路由]]></title>
        <id>https://nancy-svy.github.io/post/router/</id>
        <link href="https://nancy-svy.github.io/post/router/">
        </link>
        <updated>2023-06-30T09:32:03.000Z</updated>
        <content type="html"><![CDATA[<h5 id="有面包屑时三级路由怎么进行跳转页面">有面包屑时，三级路由怎么进行跳转页面</h5>
<p>路由结构</p>
<pre><code>{
    path: '/nrgl',
    component: Layout,
    redirect: '/nrgl/index',
    meta: {
      title: '内容管理',
      icon: 'el-icon-s-help'
    },
    children: [
      {
        path: 'index',
        component: () =&gt; import('@/views/myview/nrgl/index'),
        name: 'index',
        meta: { title: '内容列表',  icon: 'dashboard' }
      },
      {
        path: 'detail',
        component: () =&gt; import('@/views/myview/nrgl/detail'),
        name: 'detail',
        meta: {
          title:  '内容详情',
          icon:  'dashboard', 
          noCache:  true, 
          activeMenu:  '/nrgl/index'
       },
        hidden: true
      },
    ]
  },
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI  el-input限制输入的值为整数或小数]]></title>
        <id>https://nancy-svy.github.io/post/elInputLimitation/</id>
        <link href="https://nancy-svy.github.io/post/elInputLimitation/">
        </link>
        <updated>2023-06-29T03:29:47.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;el-input
    v-model=&quot;&quot;
    oninput=&quot;value=value.replace(/[^0-9.]/g,'').replace(/^\./g, '').replace(/\.{2,}/g, '').replace('.', '$#$').replace(/\./g, '').replace('$#$', '.');&quot;
    size=&quot;mini&quot;/&gt;
</code></pre>
<p>备注：<br>
1：^不放在开头表示取否的意思，就是取相反<br>
2：replace是对你输入的字符串一个字符一个字符的去查找替换，和常见正则可以多个字符查找略有不同</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 接口返回的preview是张图片，前端如何渲染]]></title>
        <id>https://nancy-svy.github.io/post/thePreviewModuleIsAPicture/</id>
        <link href="https://nancy-svy.github.io/post/thePreviewModuleIsAPicture/">
        </link>
        <updated>2023-06-27T12:27:03.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687917326500.png" alt="" loading="lazy"></figure>
<h5 id="第一种">第一种</h5>
<p>也是最简单的一种，直接将接口地址赋值给img标签的src</p>
<pre><code>&lt;img src=&quot;https://xxx.xxx.xxx.com/img&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
<h5 id="第二种">第二种</h5>
<ol>
<li>blob<br>
api.js中设置 responseType为blod</li>
</ol>
<pre><code>export const Tqimg = () =&gt; {
  return request4({
    url: &quot;/xxx/xx/xx&quot;,
    method: &quot;get&quot;,
    // 加上下面这个
    responseType: &quot;blob&quot;,
  });
};
</code></pre>
<p>vue单文件的methods中</p>
<pre><code>async Tqimg() {
  await Tqimg().then((res) =&gt; {
    console.log(res);
    const myBlob = new window.Blob([res.data], { type: &quot;image/jpeg&quot; });
    // Tianqimg是提前定义好的模型
    this.Tianqimg = window.URL.createObjectURL(myBlob);
  });
},
</code></pre>
<p>vue单文件的template中</p>
<pre><code>&lt;img :src=&quot;Tianqimg&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
<ol start="2">
<li>arraybuffer<br>
api.js中设置 responseType为arraybuffer</li>
</ol>
<pre><code>export function verificationCode(data) {
  return serviceCode({
    url: '/code',
    method: 'get',
    data,
    responseType: 'arraybuffer' //这里是声明期望返回的数据类型,为arraybuffer
  })
}
</code></pre>
<p>vue单文件的methods中</p>
<pre><code>getCode(){
      verificationCode().then(res =&gt; {
        // console.log(res)
        const bufferUrl = btoa(new Uint8Array(res.data).reduce((data, byte) =&gt; data + String.fromCharCode(byte), ''));
        this.verificationCodePath = 'data:image/png;base64,' + bufferUrl
      })
    },
</code></pre>
<p>vue单文件的template中</p>
<pre><code>&lt;img :src=&quot;verificationCodePath&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 解决vue报You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.]]></title>
        <id>https://nancy-svy.github.io/post/runtime-onlyBuildOfVue/</id>
        <link href="https://nancy-svy.github.io/post/runtime-onlyBuildOfVue/">
        </link>
        <updated>2023-06-26T08:06:32.000Z</updated>
        <content type="html"><![CDATA[<p>
<code style="color: #c7254e;background-color: #f2f2f2;">
You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.
</code>
意思就是说 ，您使用的是仅运行时版本的Vue，这种情况下，模板编译器是不可用的，可以将模板预编译为呈现函数，也可以使用编译器包含的内部版本。
<p>
<h5> 
解决办法，将<code style="color: #c7254e;background-color: #f2f2f2;">vue.config.js</code>文件中增加<code style="color: #c7254e;background-color: #f2f2f2;">vue$: "vue/dist/vue.esm.js",</code>，然后重新运行项目即可。
<h5>
<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687767357725.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[elementUI   el-popconfirm 的确认事件不起作用]]></title>
        <id>https://nancy-svy.github.io/post/elPopconfirmQuestion/</id>
        <link href="https://nancy-svy.github.io/post/elPopconfirmQuestion/">
        </link>
        <updated>2023-06-21T08:26:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://nancy-svy.github.io/post-images/1687336036974.png" alt="" loading="lazy"></figure>
<p>element中是 <code style="color: #c7254e;background-color: #f2f2f2;">@confirm</code> 但是使用起来没有效果，<br>
在网上查找的是 <code style="color: #c7254e;background-color: #f2f2f2;">@onConfirm</code>, 使用起来有效果</p>
<p>如果这个 <code style="color: #c7254e;background-color: #f2f2f2;">@confirm</code> 或者 <code style="color: #c7254e;background-color: #f2f2f2;">@onConfirm</code> 使用没有效果<br>
后来想到一个折中的方法：</p>
<pre><code>&lt;el-popconfirm
    title=&quot;是否删除？&quot;
    @confirm=&quot;del(scope.row)&quot;
    @onConfirm=&quot;del(scope.row)&quot;
&gt;
&lt;/el-popconfirm&gt;
</code></pre>
<p>当当当， 都用上就有效果了。</p>
]]></content>
    </entry>
</feed>